# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, Dict, List, Optional, Union
from taikunpycore.models.aws_flavor_list import AwsFlavorList
from taikunpycore.models.azure_flavor_list import AzureFlavorList
from taikunpycore.models.bind_flavor_to_project_command import BindFlavorToProjectCommand
from taikunpycore.models.bound_flavors_for_projects_list import BoundFlavorsForProjectsList
from taikunpycore.models.cloud_credentials_dropdown_record_dto import CloudCredentialsDropdownRecordDto
from taikunpycore.models.google_flavor_list import GoogleFlavorList
from taikunpycore.models.openshift_flavor_list import OpenshiftFlavorList
from taikunpycore.models.openstack_flavor_list import OpenstackFlavorList
from taikunpycore.models.proxmox_flavor_list import ProxmoxFlavorList
from taikunpycore.models.tanzu_flavor_list import TanzuFlavorList
from taikunpycore.models.unbind_flavor_from_project_command import UnbindFlavorFromProjectCommand
from taikunpycore.models.vsphere_flavor_list import VsphereFlavorList
from taikunpycore.models.zededa_flavor_list import ZededaFlavorList

from taikunpycore.api_client import ApiClient, RequestSerialized
from taikunpycore.api_response import ApiResponse
from taikunpycore.rest import RESTResponseType


class FlavorsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def flavors_aws_instance_types(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AwsFlavorList:
        """Retrieve awz instance types


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_aws_instance_types_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AwsFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def flavors_aws_instance_types_with_http_info(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AwsFlavorList]:
        """Retrieve awz instance types


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_aws_instance_types_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AwsFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def flavors_aws_instance_types_without_preload_content(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve awz instance types


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_aws_instance_types_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AwsFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _flavors_aws_instance_types_serialize(
        self,
        cloud_id,
        limit,
        offset,
        start_ram,
        end_ram,
        start_cpu,
        end_cpu,
        search,
        sort_by,
        sort_direction,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if cloud_id is not None:
            _path_params['cloudId'] = cloud_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if offset is not None:
            
            _query_params.append(('Offset', offset))
            
        if start_ram is not None:
            
            _query_params.append(('StartRam', start_ram))
            
        if end_ram is not None:
            
            _query_params.append(('EndRam', end_ram))
            
        if start_cpu is not None:
            
            _query_params.append(('StartCpu', start_cpu))
            
        if end_cpu is not None:
            
            _query_params.append(('EndCpu', end_cpu))
            
        if search is not None:
            
            _query_params.append(('Search', search))
            
        if sort_by is not None:
            
            _query_params.append(('SortBy', sort_by))
            
        if sort_direction is not None:
            
            _query_params.append(('SortDirection', sort_direction))
            
        if project_id is not None:
            
            _query_params.append(('ProjectId', project_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/flavors/aws/{cloudId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def flavors_azure_vm_sizes(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AzureFlavorList:
        """Retrieve azure vm sizes


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_azure_vm_sizes_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AzureFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def flavors_azure_vm_sizes_with_http_info(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AzureFlavorList]:
        """Retrieve azure vm sizes


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_azure_vm_sizes_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AzureFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def flavors_azure_vm_sizes_without_preload_content(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve azure vm sizes


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_azure_vm_sizes_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AzureFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _flavors_azure_vm_sizes_serialize(
        self,
        cloud_id,
        limit,
        offset,
        start_ram,
        end_ram,
        start_cpu,
        end_cpu,
        search,
        sort_by,
        sort_direction,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if cloud_id is not None:
            _path_params['cloudId'] = cloud_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if offset is not None:
            
            _query_params.append(('Offset', offset))
            
        if start_ram is not None:
            
            _query_params.append(('StartRam', start_ram))
            
        if end_ram is not None:
            
            _query_params.append(('EndRam', end_ram))
            
        if start_cpu is not None:
            
            _query_params.append(('StartCpu', start_cpu))
            
        if end_cpu is not None:
            
            _query_params.append(('EndCpu', end_cpu))
            
        if search is not None:
            
            _query_params.append(('Search', search))
            
        if sort_by is not None:
            
            _query_params.append(('SortBy', sort_by))
            
        if sort_direction is not None:
            
            _query_params.append(('SortDirection', sort_direction))
            
        if project_id is not None:
            
            _query_params.append(('ProjectId', project_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/flavors/azure/{cloudId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def flavors_bind_to_project(
        self,
        bind_flavor_to_project_command: Optional[BindFlavorToProjectCommand] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Bind flavors to project


        :param bind_flavor_to_project_command:
        :type bind_flavor_to_project_command: BindFlavorToProjectCommand
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_bind_to_project_serialize(
            bind_flavor_to_project_command=bind_flavor_to_project_command,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def flavors_bind_to_project_with_http_info(
        self,
        bind_flavor_to_project_command: Optional[BindFlavorToProjectCommand] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Bind flavors to project


        :param bind_flavor_to_project_command:
        :type bind_flavor_to_project_command: BindFlavorToProjectCommand
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_bind_to_project_serialize(
            bind_flavor_to_project_command=bind_flavor_to_project_command,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def flavors_bind_to_project_without_preload_content(
        self,
        bind_flavor_to_project_command: Optional[BindFlavorToProjectCommand] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Bind flavors to project


        :param bind_flavor_to_project_command:
        :type bind_flavor_to_project_command: BindFlavorToProjectCommand
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_bind_to_project_serialize(
            bind_flavor_to_project_command=bind_flavor_to_project_command,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _flavors_bind_to_project_serialize(
        self,
        bind_flavor_to_project_command,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if bind_flavor_to_project_command is not None:
            _body_params = bind_flavor_to_project_command


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/flavors/bind',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def flavors_dropdown_flavors(
        self,
        organization_id: Optional[StrictInt] = None,
        filter_by: Optional[StrictStr] = None,
        search: Optional[StrictStr] = None,
        is_infra: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[CloudCredentialsDropdownRecordDto]:
        """Retrieve cloud credentials dropdown list


        :param organization_id:
        :type organization_id: int
        :param filter_by:
        :type filter_by: str
        :param search:
        :type search: str
        :param is_infra:
        :type is_infra: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_dropdown_flavors_serialize(
            organization_id=organization_id,
            filter_by=filter_by,
            search=search,
            is_infra=is_infra,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CloudCredentialsDropdownRecordDto]",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def flavors_dropdown_flavors_with_http_info(
        self,
        organization_id: Optional[StrictInt] = None,
        filter_by: Optional[StrictStr] = None,
        search: Optional[StrictStr] = None,
        is_infra: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[CloudCredentialsDropdownRecordDto]]:
        """Retrieve cloud credentials dropdown list


        :param organization_id:
        :type organization_id: int
        :param filter_by:
        :type filter_by: str
        :param search:
        :type search: str
        :param is_infra:
        :type is_infra: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_dropdown_flavors_serialize(
            organization_id=organization_id,
            filter_by=filter_by,
            search=search,
            is_infra=is_infra,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CloudCredentialsDropdownRecordDto]",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def flavors_dropdown_flavors_without_preload_content(
        self,
        organization_id: Optional[StrictInt] = None,
        filter_by: Optional[StrictStr] = None,
        search: Optional[StrictStr] = None,
        is_infra: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve cloud credentials dropdown list


        :param organization_id:
        :type organization_id: int
        :param filter_by:
        :type filter_by: str
        :param search:
        :type search: str
        :param is_infra:
        :type is_infra: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_dropdown_flavors_serialize(
            organization_id=organization_id,
            filter_by=filter_by,
            search=search,
            is_infra=is_infra,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[CloudCredentialsDropdownRecordDto]",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _flavors_dropdown_flavors_serialize(
        self,
        organization_id,
        filter_by,
        search,
        is_infra,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if organization_id is not None:
            
            _query_params.append(('OrganizationId', organization_id))
            
        if filter_by is not None:
            
            _query_params.append(('FilterBy', filter_by))
            
        if search is not None:
            
            _query_params.append(('Search', search))
            
        if is_infra is not None:
            
            _query_params.append(('IsInfra', is_infra))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/flavors/credentials/dropdown/list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def flavors_google_machine_types(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GoogleFlavorList:
        """Retrieve google machine types


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_google_machine_types_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def flavors_google_machine_types_with_http_info(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GoogleFlavorList]:
        """Retrieve google machine types


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_google_machine_types_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def flavors_google_machine_types_without_preload_content(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve google machine types


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_google_machine_types_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _flavors_google_machine_types_serialize(
        self,
        cloud_id,
        limit,
        offset,
        start_ram,
        end_ram,
        start_cpu,
        end_cpu,
        search,
        sort_by,
        sort_direction,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if cloud_id is not None:
            _path_params['cloudId'] = cloud_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if offset is not None:
            
            _query_params.append(('Offset', offset))
            
        if start_ram is not None:
            
            _query_params.append(('StartRam', start_ram))
            
        if end_ram is not None:
            
            _query_params.append(('EndRam', end_ram))
            
        if start_cpu is not None:
            
            _query_params.append(('StartCpu', start_cpu))
            
        if end_cpu is not None:
            
            _query_params.append(('EndCpu', end_cpu))
            
        if search is not None:
            
            _query_params.append(('Search', search))
            
        if sort_by is not None:
            
            _query_params.append(('SortBy', sort_by))
            
        if sort_direction is not None:
            
            _query_params.append(('SortDirection', sort_direction))
            
        if project_id is not None:
            
            _query_params.append(('ProjectId', project_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/flavors/google/{cloudId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def flavors_openshift_flavors(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OpenshiftFlavorList:
        """Retrieve openshift flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_openshift_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenshiftFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def flavors_openshift_flavors_with_http_info(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OpenshiftFlavorList]:
        """Retrieve openshift flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_openshift_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenshiftFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def flavors_openshift_flavors_without_preload_content(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve openshift flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_openshift_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenshiftFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _flavors_openshift_flavors_serialize(
        self,
        cloud_id,
        limit,
        offset,
        start_ram,
        end_ram,
        start_cpu,
        end_cpu,
        search,
        sort_by,
        sort_direction,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if cloud_id is not None:
            _path_params['cloudId'] = cloud_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if offset is not None:
            
            _query_params.append(('Offset', offset))
            
        if start_ram is not None:
            
            _query_params.append(('StartRam', start_ram))
            
        if end_ram is not None:
            
            _query_params.append(('EndRam', end_ram))
            
        if start_cpu is not None:
            
            _query_params.append(('StartCpu', start_cpu))
            
        if end_cpu is not None:
            
            _query_params.append(('EndCpu', end_cpu))
            
        if search is not None:
            
            _query_params.append(('Search', search))
            
        if sort_by is not None:
            
            _query_params.append(('SortBy', sort_by))
            
        if sort_direction is not None:
            
            _query_params.append(('SortDirection', sort_direction))
            
        if project_id is not None:
            
            _query_params.append(('ProjectId', project_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/flavors/openshift/{cloudId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def flavors_openstack_flavors(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OpenstackFlavorList:
        """Retrieve openstack flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_openstack_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenstackFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def flavors_openstack_flavors_with_http_info(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OpenstackFlavorList]:
        """Retrieve openstack flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_openstack_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenstackFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def flavors_openstack_flavors_without_preload_content(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve openstack flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_openstack_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OpenstackFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _flavors_openstack_flavors_serialize(
        self,
        cloud_id,
        limit,
        offset,
        start_ram,
        end_ram,
        start_cpu,
        end_cpu,
        search,
        sort_by,
        sort_direction,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if cloud_id is not None:
            _path_params['cloudId'] = cloud_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if offset is not None:
            
            _query_params.append(('Offset', offset))
            
        if start_ram is not None:
            
            _query_params.append(('StartRam', start_ram))
            
        if end_ram is not None:
            
            _query_params.append(('EndRam', end_ram))
            
        if start_cpu is not None:
            
            _query_params.append(('StartCpu', start_cpu))
            
        if end_cpu is not None:
            
            _query_params.append(('EndCpu', end_cpu))
            
        if search is not None:
            
            _query_params.append(('Search', search))
            
        if sort_by is not None:
            
            _query_params.append(('SortBy', sort_by))
            
        if sort_direction is not None:
            
            _query_params.append(('SortDirection', sort_direction))
            
        if project_id is not None:
            
            _query_params.append(('ProjectId', project_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/flavors/openstack/{cloudId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def flavors_proxmox_flavors(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ProxmoxFlavorList:
        """Retrieve proxmox flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_proxmox_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProxmoxFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def flavors_proxmox_flavors_with_http_info(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ProxmoxFlavorList]:
        """Retrieve proxmox flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_proxmox_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProxmoxFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def flavors_proxmox_flavors_without_preload_content(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve proxmox flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_proxmox_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ProxmoxFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _flavors_proxmox_flavors_serialize(
        self,
        cloud_id,
        limit,
        offset,
        start_ram,
        end_ram,
        start_cpu,
        end_cpu,
        search,
        sort_by,
        sort_direction,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if cloud_id is not None:
            _path_params['cloudId'] = cloud_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if offset is not None:
            
            _query_params.append(('Offset', offset))
            
        if start_ram is not None:
            
            _query_params.append(('StartRam', start_ram))
            
        if end_ram is not None:
            
            _query_params.append(('EndRam', end_ram))
            
        if start_cpu is not None:
            
            _query_params.append(('StartCpu', start_cpu))
            
        if end_cpu is not None:
            
            _query_params.append(('EndCpu', end_cpu))
            
        if search is not None:
            
            _query_params.append(('Search', search))
            
        if sort_by is not None:
            
            _query_params.append(('SortBy', sort_by))
            
        if sort_direction is not None:
            
            _query_params.append(('SortDirection', sort_direction))
            
        if project_id is not None:
            
            _query_params.append(('ProjectId', project_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/flavors/proxmox/{cloudId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def flavors_selected_flavors_for_project(
        self,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        project_id: Optional[StrictInt] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        search: Optional[StrictStr] = None,
        filter_by: Optional[StrictStr] = None,
        organization_id: Optional[StrictInt] = None,
        flavor_name: Optional[StrictStr] = None,
        with_price: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BoundFlavorsForProjectsList:
        """Retrieve selected flavors for project


        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param project_id:
        :type project_id: int
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param search:
        :type search: str
        :param filter_by:
        :type filter_by: str
        :param organization_id:
        :type organization_id: int
        :param flavor_name:
        :type flavor_name: str
        :param with_price:
        :type with_price: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_selected_flavors_for_project_serialize(
            limit=limit,
            offset=offset,
            project_id=project_id,
            sort_by=sort_by,
            sort_direction=sort_direction,
            search=search,
            filter_by=filter_by,
            organization_id=organization_id,
            flavor_name=flavor_name,
            with_price=with_price,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BoundFlavorsForProjectsList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def flavors_selected_flavors_for_project_with_http_info(
        self,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        project_id: Optional[StrictInt] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        search: Optional[StrictStr] = None,
        filter_by: Optional[StrictStr] = None,
        organization_id: Optional[StrictInt] = None,
        flavor_name: Optional[StrictStr] = None,
        with_price: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BoundFlavorsForProjectsList]:
        """Retrieve selected flavors for project


        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param project_id:
        :type project_id: int
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param search:
        :type search: str
        :param filter_by:
        :type filter_by: str
        :param organization_id:
        :type organization_id: int
        :param flavor_name:
        :type flavor_name: str
        :param with_price:
        :type with_price: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_selected_flavors_for_project_serialize(
            limit=limit,
            offset=offset,
            project_id=project_id,
            sort_by=sort_by,
            sort_direction=sort_direction,
            search=search,
            filter_by=filter_by,
            organization_id=organization_id,
            flavor_name=flavor_name,
            with_price=with_price,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BoundFlavorsForProjectsList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def flavors_selected_flavors_for_project_without_preload_content(
        self,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        project_id: Optional[StrictInt] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        search: Optional[StrictStr] = None,
        filter_by: Optional[StrictStr] = None,
        organization_id: Optional[StrictInt] = None,
        flavor_name: Optional[StrictStr] = None,
        with_price: Optional[StrictBool] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve selected flavors for project


        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param project_id:
        :type project_id: int
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param search:
        :type search: str
        :param filter_by:
        :type filter_by: str
        :param organization_id:
        :type organization_id: int
        :param flavor_name:
        :type flavor_name: str
        :param with_price:
        :type with_price: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_selected_flavors_for_project_serialize(
            limit=limit,
            offset=offset,
            project_id=project_id,
            sort_by=sort_by,
            sort_direction=sort_direction,
            search=search,
            filter_by=filter_by,
            organization_id=organization_id,
            flavor_name=flavor_name,
            with_price=with_price,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BoundFlavorsForProjectsList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _flavors_selected_flavors_for_project_serialize(
        self,
        limit,
        offset,
        project_id,
        sort_by,
        sort_direction,
        search,
        filter_by,
        organization_id,
        flavor_name,
        with_price,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if offset is not None:
            
            _query_params.append(('Offset', offset))
            
        if project_id is not None:
            
            _query_params.append(('ProjectId', project_id))
            
        if sort_by is not None:
            
            _query_params.append(('SortBy', sort_by))
            
        if sort_direction is not None:
            
            _query_params.append(('SortDirection', sort_direction))
            
        if search is not None:
            
            _query_params.append(('Search', search))
            
        if filter_by is not None:
            
            _query_params.append(('FilterBy', filter_by))
            
        if organization_id is not None:
            
            _query_params.append(('OrganizationId', organization_id))
            
        if flavor_name is not None:
            
            _query_params.append(('FlavorName', flavor_name))
            
        if with_price is not None:
            
            _query_params.append(('WithPrice', with_price))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/flavors/projects/list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def flavors_tanzu_flavors(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TanzuFlavorList:
        """Retrieve tanzu flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_tanzu_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TanzuFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def flavors_tanzu_flavors_with_http_info(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TanzuFlavorList]:
        """Retrieve tanzu flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_tanzu_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TanzuFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def flavors_tanzu_flavors_without_preload_content(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve tanzu flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_tanzu_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TanzuFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _flavors_tanzu_flavors_serialize(
        self,
        cloud_id,
        limit,
        offset,
        start_ram,
        end_ram,
        start_cpu,
        end_cpu,
        search,
        sort_by,
        sort_direction,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if cloud_id is not None:
            _path_params['cloudId'] = cloud_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if offset is not None:
            
            _query_params.append(('Offset', offset))
            
        if start_ram is not None:
            
            _query_params.append(('StartRam', start_ram))
            
        if end_ram is not None:
            
            _query_params.append(('EndRam', end_ram))
            
        if start_cpu is not None:
            
            _query_params.append(('StartCpu', start_cpu))
            
        if end_cpu is not None:
            
            _query_params.append(('EndCpu', end_cpu))
            
        if search is not None:
            
            _query_params.append(('Search', search))
            
        if sort_by is not None:
            
            _query_params.append(('SortBy', sort_by))
            
        if sort_direction is not None:
            
            _query_params.append(('SortDirection', sort_direction))
            
        if project_id is not None:
            
            _query_params.append(('ProjectId', project_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/flavors/tanzu/{cloudId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def flavors_unbind_from_project(
        self,
        unbind_flavor_from_project_command: UnbindFlavorFromProjectCommand,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Unbind flavors from project


        :param unbind_flavor_from_project_command: (required)
        :type unbind_flavor_from_project_command: UnbindFlavorFromProjectCommand
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_unbind_from_project_serialize(
            unbind_flavor_from_project_command=unbind_flavor_from_project_command,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def flavors_unbind_from_project_with_http_info(
        self,
        unbind_flavor_from_project_command: UnbindFlavorFromProjectCommand,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Unbind flavors from project


        :param unbind_flavor_from_project_command: (required)
        :type unbind_flavor_from_project_command: UnbindFlavorFromProjectCommand
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_unbind_from_project_serialize(
            unbind_flavor_from_project_command=unbind_flavor_from_project_command,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def flavors_unbind_from_project_without_preload_content(
        self,
        unbind_flavor_from_project_command: UnbindFlavorFromProjectCommand,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Unbind flavors from project


        :param unbind_flavor_from_project_command: (required)
        :type unbind_flavor_from_project_command: UnbindFlavorFromProjectCommand
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_unbind_from_project_serialize(
            unbind_flavor_from_project_command=unbind_flavor_from_project_command,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _flavors_unbind_from_project_serialize(
        self,
        unbind_flavor_from_project_command,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if unbind_flavor_from_project_command is not None:
            _body_params = unbind_flavor_from_project_command


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/plain', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/flavors/unbind',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def flavors_vsphere_flavors(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VsphereFlavorList:
        """Retrieve vsphere flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_vsphere_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VsphereFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def flavors_vsphere_flavors_with_http_info(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VsphereFlavorList]:
        """Retrieve vsphere flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_vsphere_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VsphereFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def flavors_vsphere_flavors_without_preload_content(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve vsphere flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_vsphere_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VsphereFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _flavors_vsphere_flavors_serialize(
        self,
        cloud_id,
        limit,
        offset,
        start_ram,
        end_ram,
        start_cpu,
        end_cpu,
        search,
        sort_by,
        sort_direction,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if cloud_id is not None:
            _path_params['cloudId'] = cloud_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if offset is not None:
            
            _query_params.append(('Offset', offset))
            
        if start_ram is not None:
            
            _query_params.append(('StartRam', start_ram))
            
        if end_ram is not None:
            
            _query_params.append(('EndRam', end_ram))
            
        if start_cpu is not None:
            
            _query_params.append(('StartCpu', start_cpu))
            
        if end_cpu is not None:
            
            _query_params.append(('EndCpu', end_cpu))
            
        if search is not None:
            
            _query_params.append(('Search', search))
            
        if sort_by is not None:
            
            _query_params.append(('SortBy', sort_by))
            
        if sort_direction is not None:
            
            _query_params.append(('SortDirection', sort_direction))
            
        if project_id is not None:
            
            _query_params.append(('ProjectId', project_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/flavors/vsphere/{cloudId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def flavors_zadara_instance_types(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AwsFlavorList:
        """Retrieve zadara instance types


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_zadara_instance_types_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AwsFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def flavors_zadara_instance_types_with_http_info(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AwsFlavorList]:
        """Retrieve zadara instance types


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_zadara_instance_types_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AwsFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def flavors_zadara_instance_types_without_preload_content(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve zadara instance types


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_zadara_instance_types_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AwsFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _flavors_zadara_instance_types_serialize(
        self,
        cloud_id,
        limit,
        offset,
        start_ram,
        end_ram,
        start_cpu,
        end_cpu,
        search,
        sort_by,
        sort_direction,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if cloud_id is not None:
            _path_params['cloudId'] = cloud_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if offset is not None:
            
            _query_params.append(('Offset', offset))
            
        if start_ram is not None:
            
            _query_params.append(('StartRam', start_ram))
            
        if end_ram is not None:
            
            _query_params.append(('EndRam', end_ram))
            
        if start_cpu is not None:
            
            _query_params.append(('StartCpu', start_cpu))
            
        if end_cpu is not None:
            
            _query_params.append(('EndCpu', end_cpu))
            
        if search is not None:
            
            _query_params.append(('Search', search))
            
        if sort_by is not None:
            
            _query_params.append(('SortBy', sort_by))
            
        if sort_direction is not None:
            
            _query_params.append(('SortDirection', sort_direction))
            
        if project_id is not None:
            
            _query_params.append(('ProjectId', project_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/flavors/zadara/{cloudId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def flavors_zededa_flavors(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ZededaFlavorList:
        """Retrieve zededa flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_zededa_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ZededaFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def flavors_zededa_flavors_with_http_info(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ZededaFlavorList]:
        """Retrieve zededa flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_zededa_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ZededaFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def flavors_zededa_flavors_without_preload_content(
        self,
        cloud_id: StrictInt,
        limit: Optional[StrictInt] = None,
        offset: Optional[StrictInt] = None,
        start_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        end_ram: Optional[Union[StrictFloat, StrictInt]] = None,
        start_cpu: Optional[StrictInt] = None,
        end_cpu: Optional[StrictInt] = None,
        search: Optional[StrictStr] = None,
        sort_by: Optional[StrictStr] = None,
        sort_direction: Optional[StrictStr] = None,
        project_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve zededa flavors


        :param cloud_id: (required)
        :type cloud_id: int
        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param start_ram:
        :type start_ram: float
        :param end_ram:
        :type end_ram: float
        :param start_cpu:
        :type start_cpu: int
        :param end_cpu:
        :type end_cpu: int
        :param search:
        :type search: str
        :param sort_by:
        :type sort_by: str
        :param sort_direction:
        :type sort_direction: str
        :param project_id:
        :type project_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._flavors_zededa_flavors_serialize(
            cloud_id=cloud_id,
            limit=limit,
            offset=offset,
            start_ram=start_ram,
            end_ram=end_ram,
            start_cpu=start_cpu,
            end_cpu=end_cpu,
            search=search,
            sort_by=sort_by,
            sort_direction=sort_direction,
            project_id=project_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ZededaFlavorList",
            '400': "ProblemDetails",
            '401': "ProblemDetails",
            '403': "ProblemDetails",
            '404': "ProblemDetails",
            '500': "ProblemDetails",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _flavors_zededa_flavors_serialize(
        self,
        cloud_id,
        limit,
        offset,
        start_ram,
        end_ram,
        start_cpu,
        end_cpu,
        search,
        sort_by,
        sort_direction,
        project_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if cloud_id is not None:
            _path_params['cloudId'] = cloud_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if offset is not None:
            
            _query_params.append(('Offset', offset))
            
        if start_ram is not None:
            
            _query_params.append(('StartRam', start_ram))
            
        if end_ram is not None:
            
            _query_params.append(('EndRam', end_ram))
            
        if start_cpu is not None:
            
            _query_params.append(('StartCpu', start_cpu))
            
        if end_cpu is not None:
            
            _query_params.append(('EndCpu', end_cpu))
            
        if search is not None:
            
            _query_params.append(('Search', search))
            
        if sort_by is not None:
            
            _query_params.append(('SortBy', sort_by))
            
        if sort_direction is not None:
            
            _query_params.append(('SortDirection', sort_direction))
            
        if project_id is not None:
            
            _query_params.append(('ProjectId', project_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/flavors/zededa/{cloudId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


