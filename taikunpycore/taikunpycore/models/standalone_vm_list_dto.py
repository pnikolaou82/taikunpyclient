# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.cloud_type import CloudType
from taikunpycore.models.stand_alone_vm_status import StandAloneVmStatus
from taikunpycore.models.standalone_profile_list_dto import StandaloneProfileListDto
from typing import Optional, Set
from typing_extensions import Self

class StandaloneVmListDto(BaseModel):
    """
    StandaloneVmListDto
    """ # noqa: E501
    id: Optional[StrictInt]
    name: Optional[StrictStr]
    flavor_id: Optional[StrictStr] = Field(alias="flavorId")
    volume_size: Optional[StrictInt] = Field(alias="volumeSize")
    organization_name: Optional[StrictStr] = Field(alias="organizationName")
    organization_id: Optional[StrictInt] = Field(alias="organizationId")
    ram: Optional[StrictInt]
    cpu: Optional[StrictInt]
    volume_type: Optional[StrictStr] = Field(alias="volumeType")
    public_ip_enabled: Optional[StrictBool] = Field(alias="publicIpEnabled")
    public_ip: Optional[StrictStr] = Field(alias="publicIp")
    ip_address: Optional[StrictStr] = Field(alias="ipAddress")
    cloud_type: CloudType = Field(alias="cloudType")
    image_name: Optional[StrictStr] = Field(alias="imageName")
    revision: Optional[StrictInt]
    is_windows: Optional[StrictBool] = Field(alias="isWindows")
    status: StandAloneVmStatus
    project_name: Optional[StrictStr] = Field(alias="projectName")
    project_id: Optional[StrictInt] = Field(alias="projectId")
    stand_alone_profile: StandaloneProfileListDto = Field(alias="standAloneProfile")
    created_at: Optional[StrictStr] = Field(alias="createdAt")
    created_by: Optional[StrictStr] = Field(alias="createdBy")
    last_modified: Optional[StrictStr] = Field(alias="lastModified")
    __properties: ClassVar[List[str]] = ["id", "name", "flavorId", "volumeSize", "organizationName", "organizationId", "ram", "cpu", "volumeType", "publicIpEnabled", "publicIp", "ipAddress", "cloudType", "imageName", "revision", "isWindows", "status", "projectName", "projectId", "standAloneProfile", "createdAt", "createdBy", "lastModified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StandaloneVmListDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of stand_alone_profile
        if self.stand_alone_profile:
            _dict['standAloneProfile'] = self.stand_alone_profile.to_dict()
        # set to None if volume_type (nullable) is None
        # and model_fields_set contains the field
        if self.volume_type is None and "volume_type" in self.model_fields_set:
            _dict['volumeType'] = None

        # set to None if public_ip (nullable) is None
        # and model_fields_set contains the field
        if self.public_ip is None and "public_ip" in self.model_fields_set:
            _dict['publicIp'] = None

        # set to None if ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.ip_address is None and "ip_address" in self.model_fields_set:
            _dict['ipAddress'] = None

        # set to None if image_name (nullable) is None
        # and model_fields_set contains the field
        if self.image_name is None and "image_name" in self.model_fields_set:
            _dict['imageName'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['createdAt'] = None

        # set to None if created_by (nullable) is None
        # and model_fields_set contains the field
        if self.created_by is None and "created_by" in self.model_fields_set:
            _dict['createdBy'] = None

        # set to None if last_modified (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified is None and "last_modified" in self.model_fields_set:
            _dict['lastModified'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StandaloneVmListDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "flavorId": obj.get("flavorId"),
            "volumeSize": obj.get("volumeSize"),
            "organizationName": obj.get("organizationName"),
            "organizationId": obj.get("organizationId"),
            "ram": obj.get("ram"),
            "cpu": obj.get("cpu"),
            "volumeType": obj.get("volumeType"),
            "publicIpEnabled": obj.get("publicIpEnabled"),
            "publicIp": obj.get("publicIp"),
            "ipAddress": obj.get("ipAddress"),
            "cloudType": obj.get("cloudType"),
            "imageName": obj.get("imageName"),
            "revision": obj.get("revision"),
            "isWindows": obj.get("isWindows"),
            "status": obj.get("status"),
            "projectName": obj.get("projectName"),
            "projectId": obj.get("projectId"),
            "standAloneProfile": StandaloneProfileListDto.from_dict(obj["standAloneProfile"]) if obj.get("standAloneProfile") is not None else None,
            "createdAt": obj.get("createdAt"),
            "createdBy": obj.get("createdBy"),
            "lastModified": obj.get("lastModified")
        })
        return _obj


