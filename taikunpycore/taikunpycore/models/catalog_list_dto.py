# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.available_packages_dto import AvailablePackagesDto
from taikunpycore.models.project_catalog_dto import ProjectCatalogDto
from typing import Optional, Set
from typing_extensions import Self

class CatalogListDto(BaseModel):
    """
    CatalogListDto
    """ # noqa: E501
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    is_locked: Optional[StrictBool] = Field(default=None, alias="isLocked")
    is_default: Optional[StrictBool] = Field(default=None, alias="isDefault")
    organization_id: Optional[StrictInt] = Field(default=None, alias="organizationId")
    package_ids: Optional[List[StrictStr]] = Field(default=None, alias="packageIds")
    bound_projects: Optional[List[ProjectCatalogDto]] = Field(default=None, alias="boundProjects")
    bound_applications: Optional[List[AvailablePackagesDto]] = Field(default=None, alias="boundApplications")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "isLocked", "isDefault", "organizationId", "packageIds", "boundProjects", "boundApplications"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CatalogListDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bound_projects (list)
        _items = []
        if self.bound_projects:
            for _item_bound_projects in self.bound_projects:
                if _item_bound_projects:
                    _items.append(_item_bound_projects.to_dict())
            _dict['boundProjects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bound_applications (list)
        _items = []
        if self.bound_applications:
            for _item_bound_applications in self.bound_applications:
                if _item_bound_applications:
                    _items.append(_item_bound_applications.to_dict())
            _dict['boundApplications'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if package_ids (nullable) is None
        # and model_fields_set contains the field
        if self.package_ids is None and "package_ids" in self.model_fields_set:
            _dict['packageIds'] = None

        # set to None if bound_projects (nullable) is None
        # and model_fields_set contains the field
        if self.bound_projects is None and "bound_projects" in self.model_fields_set:
            _dict['boundProjects'] = None

        # set to None if bound_applications (nullable) is None
        # and model_fields_set contains the field
        if self.bound_applications is None and "bound_applications" in self.model_fields_set:
            _dict['boundApplications'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CatalogListDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "isLocked": obj.get("isLocked"),
            "isDefault": obj.get("isDefault"),
            "organizationId": obj.get("organizationId"),
            "packageIds": obj.get("packageIds"),
            "boundProjects": [ProjectCatalogDto.from_dict(_item) for _item in obj["boundProjects"]] if obj.get("boundProjects") is not None else None,
            "boundApplications": [AvailablePackagesDto.from_dict(_item) for _item in obj["boundApplications"]] if obj.get("boundApplications") is not None else None
        })
        return _obj


