# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.allowed_host_create_dto import AllowedHostCreateDto
from taikunpycore.models.dns_server_create_dto import DnsServerCreateDto
from taikunpycore.models.ntp_server_create_dto import NtpServerCreateDto
from taikunpycore.models.ssh_user_create_dto import SshUserCreateDto
from typing import Optional, Set
from typing_extensions import Self

class CreateAccessProfileCommand(BaseModel):
    """
    CreateAccessProfileCommand
    """ # noqa: E501
    name: Optional[StrictStr] = None
    http_proxy: Optional[StrictStr] = Field(default=None, alias="httpProxy")
    organization_id: Optional[StrictInt] = Field(default=None, alias="organizationId")
    ssh_users: Optional[List[SshUserCreateDto]] = Field(default=None, alias="sshUsers")
    dns_servers: Optional[List[DnsServerCreateDto]] = Field(default=None, alias="dnsServers")
    ntp_servers: Optional[List[NtpServerCreateDto]] = Field(default=None, alias="ntpServers")
    allowed_hosts: Optional[List[AllowedHostCreateDto]] = Field(default=None, alias="allowedHosts")
    __properties: ClassVar[List[str]] = ["name", "httpProxy", "organizationId", "sshUsers", "dnsServers", "ntpServers", "allowedHosts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAccessProfileCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ssh_users (list)
        _items = []
        if self.ssh_users:
            for _item_ssh_users in self.ssh_users:
                if _item_ssh_users:
                    _items.append(_item_ssh_users.to_dict())
            _dict['sshUsers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dns_servers (list)
        _items = []
        if self.dns_servers:
            for _item_dns_servers in self.dns_servers:
                if _item_dns_servers:
                    _items.append(_item_dns_servers.to_dict())
            _dict['dnsServers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ntp_servers (list)
        _items = []
        if self.ntp_servers:
            for _item_ntp_servers in self.ntp_servers:
                if _item_ntp_servers:
                    _items.append(_item_ntp_servers.to_dict())
            _dict['ntpServers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_hosts (list)
        _items = []
        if self.allowed_hosts:
            for _item_allowed_hosts in self.allowed_hosts:
                if _item_allowed_hosts:
                    _items.append(_item_allowed_hosts.to_dict())
            _dict['allowedHosts'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if http_proxy (nullable) is None
        # and model_fields_set contains the field
        if self.http_proxy is None and "http_proxy" in self.model_fields_set:
            _dict['httpProxy'] = None

        # set to None if organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.organization_id is None and "organization_id" in self.model_fields_set:
            _dict['organizationId'] = None

        # set to None if ssh_users (nullable) is None
        # and model_fields_set contains the field
        if self.ssh_users is None and "ssh_users" in self.model_fields_set:
            _dict['sshUsers'] = None

        # set to None if dns_servers (nullable) is None
        # and model_fields_set contains the field
        if self.dns_servers is None and "dns_servers" in self.model_fields_set:
            _dict['dnsServers'] = None

        # set to None if ntp_servers (nullable) is None
        # and model_fields_set contains the field
        if self.ntp_servers is None and "ntp_servers" in self.model_fields_set:
            _dict['ntpServers'] = None

        # set to None if allowed_hosts (nullable) is None
        # and model_fields_set contains the field
        if self.allowed_hosts is None and "allowed_hosts" in self.model_fields_set:
            _dict['allowedHosts'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAccessProfileCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "httpProxy": obj.get("httpProxy"),
            "organizationId": obj.get("organizationId"),
            "sshUsers": [SshUserCreateDto.from_dict(_item) for _item in obj["sshUsers"]] if obj.get("sshUsers") is not None else None,
            "dnsServers": [DnsServerCreateDto.from_dict(_item) for _item in obj["dnsServers"]] if obj.get("dnsServers") is not None else None,
            "ntpServers": [NtpServerCreateDto.from_dict(_item) for _item in obj["ntpServers"]] if obj.get("ntpServers") is not None else None,
            "allowedHosts": [AllowedHostCreateDto.from_dict(_item) for _item in obj["allowedHosts"]] if obj.get("allowedHosts") is not None else None
        })
        return _obj


