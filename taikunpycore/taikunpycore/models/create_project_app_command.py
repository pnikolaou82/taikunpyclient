# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.project_app_params_dto import ProjectAppParamsDto
from typing import Optional, Set
from typing_extensions import Self

class CreateProjectAppCommand(BaseModel):
    """
    CreateProjectAppCommand
    """ # noqa: E501
    name: Optional[StrictStr] = None
    namespace: Optional[StrictStr] = None
    project_id: Optional[StrictInt] = Field(default=None, alias="projectId")
    catalog_app_id: Optional[StrictInt] = Field(default=None, alias="catalogAppId")
    extra_values: Optional[StrictStr] = Field(default=None, alias="extraValues")
    auto_sync: Optional[StrictBool] = Field(default=None, alias="autoSync")
    taikun_link_enabled: Optional[StrictBool] = Field(default=None, alias="taikunLinkEnabled")
    parameters: Optional[List[ProjectAppParamsDto]] = None
    __properties: ClassVar[List[str]] = ["name", "namespace", "projectId", "catalogAppId", "extraValues", "autoSync", "taikunLinkEnabled", "parameters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateProjectAppCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if namespace (nullable) is None
        # and model_fields_set contains the field
        if self.namespace is None and "namespace" in self.model_fields_set:
            _dict['namespace'] = None

        # set to None if extra_values (nullable) is None
        # and model_fields_set contains the field
        if self.extra_values is None and "extra_values" in self.model_fields_set:
            _dict['extraValues'] = None

        # set to None if parameters (nullable) is None
        # and model_fields_set contains the field
        if self.parameters is None and "parameters" in self.model_fields_set:
            _dict['parameters'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateProjectAppCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "namespace": obj.get("namespace"),
            "projectId": obj.get("projectId"),
            "catalogAppId": obj.get("catalogAppId"),
            "extraValues": obj.get("extraValues"),
            "autoSync": obj.get("autoSync"),
            "taikunLinkEnabled": obj.get("taikunLinkEnabled"),
            "parameters": [ProjectAppParamsDto.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None
        })
        return _obj


