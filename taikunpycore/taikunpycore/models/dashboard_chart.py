# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.credential_chart_dto import CredentialChartDto
from taikunpycore.models.organization_entity_for_dashboard import OrganizationEntityForDashboard
from taikunpycore.models.project_chart_dto import ProjectChartDto
from taikunpycore.models.server_chart_dto import ServerChartDto
from typing import Optional, Set
from typing_extensions import Self

class DashboardChart(BaseModel):
    """
    DashboardChart
    """ # noqa: E501
    organization: Optional[OrganizationEntityForDashboard] = None
    projects: Optional[ProjectChartDto] = None
    cloud_credentials: Optional[CredentialChartDto] = Field(default=None, alias="cloudCredentials")
    servers: Optional[ServerChartDto] = None
    stand_alone_vms: Optional[ServerChartDto] = Field(default=None, alias="standAloneVms")
    __properties: ClassVar[List[str]] = ["organization", "projects", "cloudCredentials", "servers", "standAloneVms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DashboardChart from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of projects
        if self.projects:
            _dict['projects'] = self.projects.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloud_credentials
        if self.cloud_credentials:
            _dict['cloudCredentials'] = self.cloud_credentials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of servers
        if self.servers:
            _dict['servers'] = self.servers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stand_alone_vms
        if self.stand_alone_vms:
            _dict['standAloneVms'] = self.stand_alone_vms.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DashboardChart from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "organization": OrganizationEntityForDashboard.from_dict(obj["organization"]) if obj.get("organization") is not None else None,
            "projects": ProjectChartDto.from_dict(obj["projects"]) if obj.get("projects") is not None else None,
            "cloudCredentials": CredentialChartDto.from_dict(obj["cloudCredentials"]) if obj.get("cloudCredentials") is not None else None,
            "servers": ServerChartDto.from_dict(obj["servers"]) if obj.get("servers") is not None else None,
            "standAloneVms": ServerChartDto.from_dict(obj["standAloneVms"]) if obj.get("standAloneVms") is not None else None
        })
        return _obj


