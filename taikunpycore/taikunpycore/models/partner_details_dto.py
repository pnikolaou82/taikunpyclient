# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.common_dropdown_dto import CommonDropdownDto
from taikunpycore.models.partner_color_settings_dto import PartnerColorSettingsDto
from taikunpycore.models.partner_image_settings_dto import PartnerImageSettingsDto
from taikunpycore.models.white_list_domain_dto import WhiteListDomainDto
from typing import Optional, Set
from typing_extensions import Self

class PartnerDetailsDto(BaseModel):
    """
    PartnerDetailsDto
    """ # noqa: E501
    id: Optional[StrictInt]
    name: Optional[StrictStr]
    link: Optional[StrictStr]
    domain: Optional[StrictStr]
    country: Optional[StrictStr]
    city: Optional[StrictStr]
    vat_number: Optional[StrictStr] = Field(alias="vatNumber")
    background_image_url: Optional[StrictStr] = Field(alias="backgroundImageUrl")
    address: Optional[StrictStr]
    logo: Optional[StrictStr]
    phone: Optional[StrictStr]
    email: Optional[StrictStr]
    payment_enabled: Optional[StrictBool] = Field(alias="paymentEnabled")
    allow_registration: Optional[StrictBool] = Field(alias="allowRegistration")
    required_user_approval: Optional[StrictBool] = Field(alias="requiredUserApproval")
    organizations: Optional[List[CommonDropdownDto]]
    white_list_domains: Optional[List[WhiteListDomainDto]] = Field(alias="whiteListDomains")
    partner_color_settings: Optional[PartnerColorSettingsDto] = Field(default=None, alias="partnerColorSettings")
    partner_image_settings: Optional[PartnerImageSettingsDto] = Field(default=None, alias="partnerImageSettings")
    __properties: ClassVar[List[str]] = ["id", "name", "link", "domain", "country", "city", "vatNumber", "backgroundImageUrl", "address", "logo", "phone", "email", "paymentEnabled", "allowRegistration", "requiredUserApproval", "organizations", "whiteListDomains", "partnerColorSettings", "partnerImageSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PartnerDetailsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in organizations (list)
        _items = []
        if self.organizations:
            for _item_organizations in self.organizations:
                if _item_organizations:
                    _items.append(_item_organizations.to_dict())
            _dict['organizations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in white_list_domains (list)
        _items = []
        if self.white_list_domains:
            for _item_white_list_domains in self.white_list_domains:
                if _item_white_list_domains:
                    _items.append(_item_white_list_domains.to_dict())
            _dict['whiteListDomains'] = _items
        # override the default output from pydantic by calling `to_dict()` of partner_color_settings
        if self.partner_color_settings:
            _dict['partnerColorSettings'] = self.partner_color_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partner_image_settings
        if self.partner_image_settings:
            _dict['partnerImageSettings'] = self.partner_image_settings.to_dict()
        # set to None if link (nullable) is None
        # and model_fields_set contains the field
        if self.link is None and "link" in self.model_fields_set:
            _dict['link'] = None

        # set to None if domain (nullable) is None
        # and model_fields_set contains the field
        if self.domain is None and "domain" in self.model_fields_set:
            _dict['domain'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if vat_number (nullable) is None
        # and model_fields_set contains the field
        if self.vat_number is None and "vat_number" in self.model_fields_set:
            _dict['vatNumber'] = None

        # set to None if background_image_url (nullable) is None
        # and model_fields_set contains the field
        if self.background_image_url is None and "background_image_url" in self.model_fields_set:
            _dict['backgroundImageUrl'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if logo (nullable) is None
        # and model_fields_set contains the field
        if self.logo is None and "logo" in self.model_fields_set:
            _dict['logo'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if payment_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.payment_enabled is None and "payment_enabled" in self.model_fields_set:
            _dict['paymentEnabled'] = None

        # set to None if allow_registration (nullable) is None
        # and model_fields_set contains the field
        if self.allow_registration is None and "allow_registration" in self.model_fields_set:
            _dict['allowRegistration'] = None

        # set to None if required_user_approval (nullable) is None
        # and model_fields_set contains the field
        if self.required_user_approval is None and "required_user_approval" in self.model_fields_set:
            _dict['requiredUserApproval'] = None

        # set to None if organizations (nullable) is None
        # and model_fields_set contains the field
        if self.organizations is None and "organizations" in self.model_fields_set:
            _dict['organizations'] = None

        # set to None if white_list_domains (nullable) is None
        # and model_fields_set contains the field
        if self.white_list_domains is None and "white_list_domains" in self.model_fields_set:
            _dict['whiteListDomains'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PartnerDetailsDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "link": obj.get("link"),
            "domain": obj.get("domain"),
            "country": obj.get("country"),
            "city": obj.get("city"),
            "vatNumber": obj.get("vatNumber"),
            "backgroundImageUrl": obj.get("backgroundImageUrl"),
            "address": obj.get("address"),
            "logo": obj.get("logo"),
            "phone": obj.get("phone"),
            "email": obj.get("email"),
            "paymentEnabled": obj.get("paymentEnabled"),
            "allowRegistration": obj.get("allowRegistration"),
            "requiredUserApproval": obj.get("requiredUserApproval"),
            "organizations": [CommonDropdownDto.from_dict(_item) for _item in obj["organizations"]] if obj.get("organizations") is not None else None,
            "whiteListDomains": [WhiteListDomainDto.from_dict(_item) for _item in obj["whiteListDomains"]] if obj.get("whiteListDomains") is not None else None,
            "partnerColorSettings": PartnerColorSettingsDto.from_dict(obj["partnerColorSettings"]) if obj.get("partnerColorSettings") is not None else None,
            "partnerImageSettings": PartnerImageSettingsDto.from_dict(obj["partnerImageSettings"]) if obj.get("partnerImageSettings") is not None else None
        })
        return _obj


