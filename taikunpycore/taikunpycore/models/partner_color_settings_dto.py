# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PartnerColorSettingsDto(BaseModel):
    """
    PartnerColorSettingsDto
    """ # noqa: E501
    bg: Optional[StrictStr]
    bg_collapsed_sub_item: Optional[StrictStr] = Field(alias="bgCollapsedSubItem")
    item_text: Optional[StrictStr] = Field(alias="itemText")
    item_bg: Optional[StrictStr] = Field(alias="itemBg")
    item_bg_hover: Optional[StrictStr] = Field(alias="itemBgHover")
    item_text_active: Optional[StrictStr] = Field(alias="itemTextActive")
    item_bg_active: Optional[StrictStr] = Field(alias="itemBgActive")
    item_bg_active_hover: Optional[StrictStr] = Field(alias="itemBgActiveHover")
    __properties: ClassVar[List[str]] = ["bg", "bgCollapsedSubItem", "itemText", "itemBg", "itemBgHover", "itemTextActive", "itemBgActive", "itemBgActiveHover"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PartnerColorSettingsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if bg (nullable) is None
        # and model_fields_set contains the field
        if self.bg is None and "bg" in self.model_fields_set:
            _dict['bg'] = None

        # set to None if bg_collapsed_sub_item (nullable) is None
        # and model_fields_set contains the field
        if self.bg_collapsed_sub_item is None and "bg_collapsed_sub_item" in self.model_fields_set:
            _dict['bgCollapsedSubItem'] = None

        # set to None if item_text (nullable) is None
        # and model_fields_set contains the field
        if self.item_text is None and "item_text" in self.model_fields_set:
            _dict['itemText'] = None

        # set to None if item_bg (nullable) is None
        # and model_fields_set contains the field
        if self.item_bg is None and "item_bg" in self.model_fields_set:
            _dict['itemBg'] = None

        # set to None if item_bg_hover (nullable) is None
        # and model_fields_set contains the field
        if self.item_bg_hover is None and "item_bg_hover" in self.model_fields_set:
            _dict['itemBgHover'] = None

        # set to None if item_text_active (nullable) is None
        # and model_fields_set contains the field
        if self.item_text_active is None and "item_text_active" in self.model_fields_set:
            _dict['itemTextActive'] = None

        # set to None if item_bg_active (nullable) is None
        # and model_fields_set contains the field
        if self.item_bg_active is None and "item_bg_active" in self.model_fields_set:
            _dict['itemBgActive'] = None

        # set to None if item_bg_active_hover (nullable) is None
        # and model_fields_set contains the field
        if self.item_bg_active_hover is None and "item_bg_active_hover" in self.model_fields_set:
            _dict['itemBgActiveHover'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PartnerColorSettingsDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bg": obj.get("bg"),
            "bgCollapsedSubItem": obj.get("bgCollapsedSubItem"),
            "itemText": obj.get("itemText"),
            "itemBg": obj.get("itemBg"),
            "itemBgHover": obj.get("itemBgHover"),
            "itemTextActive": obj.get("itemTextActive"),
            "itemBgActive": obj.get("itemBgActive"),
            "itemBgActiveHover": obj.get("itemBgActiveHover")
        })
        return _obj


