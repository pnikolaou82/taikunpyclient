# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.common_dropdown_dto import CommonDropdownDto
from taikunpycore.models.common_string_based_dropdown_dto import CommonStringBasedDropdownDto
from taikunpycore.models.vsphere_network_list_dto import VsphereNetworkListDto
from typing import Optional, Set
from typing_extensions import Self

class VsphereListDto(BaseModel):
    """
    VsphereListDto
    """ # noqa: E501
    id: Optional[StrictInt]
    project_count: Optional[StrictInt] = Field(alias="projectCount")
    is_locked: Optional[StrictBool] = Field(alias="isLocked")
    name: Optional[StrictStr]
    projects: List[CommonDropdownDto]
    created_by: Optional[StrictStr] = Field(alias="createdBy")
    created_at: Optional[StrictStr] = Field(alias="createdAt")
    last_modified: Optional[StrictStr] = Field(alias="lastModified")
    last_modified_by: Optional[StrictStr] = Field(alias="lastModifiedBy")
    is_default: Optional[StrictBool] = Field(alias="isDefault")
    drs_enabled: Optional[StrictBool] = Field(alias="drsEnabled")
    resource_pool: Optional[StrictStr] = Field(alias="resourcePool")
    organization_id: Optional[StrictInt] = Field(alias="organizationId")
    organization_name: Optional[StrictStr] = Field(alias="organizationName")
    continent_name: Optional[StrictStr] = Field(alias="continentName")
    hypervisors: List[CommonStringBasedDropdownDto]
    username: Optional[StrictStr]
    url: Optional[StrictStr]
    datacenter_id: Optional[StrictStr] = Field(alias="datacenterId")
    datacenter_name: Optional[StrictStr] = Field(alias="datacenterName")
    datastore: Optional[StrictStr]
    vm_template_name: Optional[StrictStr] = Field(alias="vmTemplateName")
    vsphere_networks: List[VsphereNetworkListDto] = Field(alias="vsphereNetworks")
    skip_tls_flag: Optional[StrictBool] = Field(alias="skipTlsFlag")
    __properties: ClassVar[List[str]] = ["id", "projectCount", "isLocked", "name", "projects", "createdBy", "createdAt", "lastModified", "lastModifiedBy", "isDefault", "drsEnabled", "resourcePool", "organizationId", "organizationName", "continentName", "hypervisors", "username", "url", "datacenterId", "datacenterName", "datastore", "vmTemplateName", "vsphereNetworks", "skipTlsFlag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VsphereListDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in projects (list)
        _items = []
        if self.projects:
            for _item_projects in self.projects:
                if _item_projects:
                    _items.append(_item_projects.to_dict())
            _dict['projects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hypervisors (list)
        _items = []
        if self.hypervisors:
            for _item_hypervisors in self.hypervisors:
                if _item_hypervisors:
                    _items.append(_item_hypervisors.to_dict())
            _dict['hypervisors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vsphere_networks (list)
        _items = []
        if self.vsphere_networks:
            for _item_vsphere_networks in self.vsphere_networks:
                if _item_vsphere_networks:
                    _items.append(_item_vsphere_networks.to_dict())
            _dict['vsphereNetworks'] = _items
        # set to None if last_modified (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified is None and "last_modified" in self.model_fields_set:
            _dict['lastModified'] = None

        # set to None if last_modified_by (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_by is None and "last_modified_by" in self.model_fields_set:
            _dict['lastModifiedBy'] = None

        # set to None if continent_name (nullable) is None
        # and model_fields_set contains the field
        if self.continent_name is None and "continent_name" in self.model_fields_set:
            _dict['continentName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VsphereListDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "projectCount": obj.get("projectCount"),
            "isLocked": obj.get("isLocked"),
            "name": obj.get("name"),
            "projects": [CommonDropdownDto.from_dict(_item) for _item in obj["projects"]] if obj.get("projects") is not None else None,
            "createdBy": obj.get("createdBy"),
            "createdAt": obj.get("createdAt"),
            "lastModified": obj.get("lastModified"),
            "lastModifiedBy": obj.get("lastModifiedBy"),
            "isDefault": obj.get("isDefault"),
            "drsEnabled": obj.get("drsEnabled"),
            "resourcePool": obj.get("resourcePool"),
            "organizationId": obj.get("organizationId"),
            "organizationName": obj.get("organizationName"),
            "continentName": obj.get("continentName"),
            "hypervisors": [CommonStringBasedDropdownDto.from_dict(_item) for _item in obj["hypervisors"]] if obj.get("hypervisors") is not None else None,
            "username": obj.get("username"),
            "url": obj.get("url"),
            "datacenterId": obj.get("datacenterId"),
            "datacenterName": obj.get("datacenterName"),
            "datastore": obj.get("datastore"),
            "vmTemplateName": obj.get("vmTemplateName"),
            "vsphereNetworks": [VsphereNetworkListDto.from_dict(_item) for _item in obj["vsphereNetworks"]] if obj.get("vsphereNetworks") is not None else None,
            "skipTlsFlag": obj.get("skipTlsFlag")
        })
        return _obj


