# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from taikunpycore.models.servers_for_billing_dto import ServersForBillingDto
from taikunpycore.models.standalone_vms_for_billing_dto import StandaloneVmsForBillingDto
from typing import Optional, Set
from typing_extensions import Self

class ProjectsForBillingDto(BaseModel):
    """
    ProjectsForBillingDto
    """ # noqa: E501
    id: Optional[StrictInt]
    name: Optional[StrictStr]
    created_at: Optional[datetime] = Field(alias="createdAt")
    billing_start_date: Optional[datetime] = Field(alias="billingStartDate")
    organization_name: Optional[StrictStr] = Field(alias="organizationName")
    price: Union[StrictFloat, StrictInt]
    servers: Optional[List[ServersForBillingDto]]
    standalone_vms: Optional[List[StandaloneVmsForBillingDto]] = Field(alias="standaloneVms")
    billing_enabled: Optional[StrictBool] = Field(alias="billingEnabled")
    __properties: ClassVar[List[str]] = ["id", "name", "createdAt", "billingStartDate", "organizationName", "price", "servers", "standaloneVms", "billingEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectsForBillingDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in servers (list)
        _items = []
        if self.servers:
            for _item_servers in self.servers:
                if _item_servers:
                    _items.append(_item_servers.to_dict())
            _dict['servers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in standalone_vms (list)
        _items = []
        if self.standalone_vms:
            for _item_standalone_vms in self.standalone_vms:
                if _item_standalone_vms:
                    _items.append(_item_standalone_vms.to_dict())
            _dict['standaloneVms'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['createdAt'] = None

        # set to None if billing_start_date (nullable) is None
        # and model_fields_set contains the field
        if self.billing_start_date is None and "billing_start_date" in self.model_fields_set:
            _dict['billingStartDate'] = None

        # set to None if organization_name (nullable) is None
        # and model_fields_set contains the field
        if self.organization_name is None and "organization_name" in self.model_fields_set:
            _dict['organizationName'] = None

        # set to None if servers (nullable) is None
        # and model_fields_set contains the field
        if self.servers is None and "servers" in self.model_fields_set:
            _dict['servers'] = None

        # set to None if standalone_vms (nullable) is None
        # and model_fields_set contains the field
        if self.standalone_vms is None and "standalone_vms" in self.model_fields_set:
            _dict['standaloneVms'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectsForBillingDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "createdAt": obj.get("createdAt"),
            "billingStartDate": obj.get("billingStartDate"),
            "organizationName": obj.get("organizationName"),
            "price": obj.get("price"),
            "servers": [ServersForBillingDto.from_dict(_item) for _item in obj["servers"]] if obj.get("servers") is not None else None,
            "standaloneVms": [StandaloneVmsForBillingDto.from_dict(_item) for _item in obj["standaloneVms"]] if obj.get("standaloneVms") is not None else None,
            "billingEnabled": obj.get("billingEnabled")
        })
        return _obj


