# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from taikunpycore.models.stand_alone_meta_data_dto import StandAloneMetaDataDto
from taikunpycore.models.stand_alone_vm_disk_dto import StandAloneVmDiskDto
from typing import Optional, Set
from typing_extensions import Self

class CreateStandAloneVmCommand(BaseModel):
    """
    CreateStandAloneVmCommand
    """ # noqa: E501
    name: Optional[StrictStr] = None
    flavor_name: Optional[StrictStr] = Field(default=None, alias="flavorName")
    volume_size: Optional[StrictInt] = Field(default=None, alias="volumeSize")
    volume_type: Optional[StrictStr] = Field(default=None, alias="volumeType")
    username: Optional[StrictStr] = None
    password: Optional[StrictStr] = None
    public_ip_enabled: Optional[StrictBool] = Field(default=None, alias="publicIpEnabled")
    image: Optional[StrictStr] = None
    cloud_init: Optional[StrictStr] = Field(default=None, alias="cloudInit")
    stand_alone_profile_id: Optional[StrictInt] = Field(default=None, alias="standAloneProfileId")
    project_id: Optional[StrictInt] = Field(default=None, alias="projectId")
    count: Optional[StrictInt] = None
    spot_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="spotPrice")
    spot_instance: Optional[StrictBool] = Field(default=None, alias="spotInstance")
    availability_zone: Optional[StrictStr] = Field(default=None, alias="availabilityZone")
    hypervisor: Optional[StrictStr] = None
    stand_alone_vm_disks: Optional[List[StandAloneVmDiskDto]] = Field(default=None, alias="standAloneVmDisks")
    stand_alone_meta_datas: Optional[List[StandAloneMetaDataDto]] = Field(default=None, alias="standAloneMetaDatas")
    __properties: ClassVar[List[str]] = ["name", "flavorName", "volumeSize", "volumeType", "username", "password", "publicIpEnabled", "image", "cloudInit", "standAloneProfileId", "projectId", "count", "spotPrice", "spotInstance", "availabilityZone", "hypervisor", "standAloneVmDisks", "standAloneMetaDatas"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateStandAloneVmCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in stand_alone_vm_disks (list)
        _items = []
        if self.stand_alone_vm_disks:
            for _item_stand_alone_vm_disks in self.stand_alone_vm_disks:
                if _item_stand_alone_vm_disks:
                    _items.append(_item_stand_alone_vm_disks.to_dict())
            _dict['standAloneVmDisks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stand_alone_meta_datas (list)
        _items = []
        if self.stand_alone_meta_datas:
            for _item_stand_alone_meta_datas in self.stand_alone_meta_datas:
                if _item_stand_alone_meta_datas:
                    _items.append(_item_stand_alone_meta_datas.to_dict())
            _dict['standAloneMetaDatas'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if flavor_name (nullable) is None
        # and model_fields_set contains the field
        if self.flavor_name is None and "flavor_name" in self.model_fields_set:
            _dict['flavorName'] = None

        # set to None if volume_type (nullable) is None
        # and model_fields_set contains the field
        if self.volume_type is None and "volume_type" in self.model_fields_set:
            _dict['volumeType'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if image (nullable) is None
        # and model_fields_set contains the field
        if self.image is None and "image" in self.model_fields_set:
            _dict['image'] = None

        # set to None if cloud_init (nullable) is None
        # and model_fields_set contains the field
        if self.cloud_init is None and "cloud_init" in self.model_fields_set:
            _dict['cloudInit'] = None

        # set to None if spot_price (nullable) is None
        # and model_fields_set contains the field
        if self.spot_price is None and "spot_price" in self.model_fields_set:
            _dict['spotPrice'] = None

        # set to None if availability_zone (nullable) is None
        # and model_fields_set contains the field
        if self.availability_zone is None and "availability_zone" in self.model_fields_set:
            _dict['availabilityZone'] = None

        # set to None if hypervisor (nullable) is None
        # and model_fields_set contains the field
        if self.hypervisor is None and "hypervisor" in self.model_fields_set:
            _dict['hypervisor'] = None

        # set to None if stand_alone_vm_disks (nullable) is None
        # and model_fields_set contains the field
        if self.stand_alone_vm_disks is None and "stand_alone_vm_disks" in self.model_fields_set:
            _dict['standAloneVmDisks'] = None

        # set to None if stand_alone_meta_datas (nullable) is None
        # and model_fields_set contains the field
        if self.stand_alone_meta_datas is None and "stand_alone_meta_datas" in self.model_fields_set:
            _dict['standAloneMetaDatas'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateStandAloneVmCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "flavorName": obj.get("flavorName"),
            "volumeSize": obj.get("volumeSize"),
            "volumeType": obj.get("volumeType"),
            "username": obj.get("username"),
            "password": obj.get("password"),
            "publicIpEnabled": obj.get("publicIpEnabled"),
            "image": obj.get("image"),
            "cloudInit": obj.get("cloudInit"),
            "standAloneProfileId": obj.get("standAloneProfileId"),
            "projectId": obj.get("projectId"),
            "count": obj.get("count"),
            "spotPrice": obj.get("spotPrice"),
            "spotInstance": obj.get("spotInstance"),
            "availabilityZone": obj.get("availabilityZone"),
            "hypervisor": obj.get("hypervisor"),
            "standAloneVmDisks": [StandAloneVmDiskDto.from_dict(_item) for _item in obj["standAloneVmDisks"]] if obj.get("standAloneVmDisks") is not None else None,
            "standAloneMetaDatas": [StandAloneMetaDataDto.from_dict(_item) for _item in obj["standAloneMetaDatas"]] if obj.get("standAloneMetaDatas") is not None else None
        })
        return _obj


