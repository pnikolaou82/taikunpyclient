# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from taikunpycore.models.button_status_dto import ButtonStatusDto
from typing import Optional, Set
from typing_extensions import Self

class VClusterActionVisibilityDto(BaseModel):
    """
    VClusterActionVisibilityDto
    """ # noqa: E501
    attach_alerting_profile: ButtonStatusDto = Field(alias="attachAlertingProfile")
    detach_alerting_profile: ButtonStatusDto = Field(alias="detachAlertingProfile")
    project_maintenance_mode: ButtonStatusDto = Field(alias="projectMaintenanceMode")
    lock: ButtonStatusDto
    unlock: ButtonStatusDto
    __properties: ClassVar[List[str]] = ["attachAlertingProfile", "detachAlertingProfile", "projectMaintenanceMode", "lock", "unlock"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VClusterActionVisibilityDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attach_alerting_profile
        if self.attach_alerting_profile:
            _dict['attachAlertingProfile'] = self.attach_alerting_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of detach_alerting_profile
        if self.detach_alerting_profile:
            _dict['detachAlertingProfile'] = self.detach_alerting_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_maintenance_mode
        if self.project_maintenance_mode:
            _dict['projectMaintenanceMode'] = self.project_maintenance_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lock
        if self.lock:
            _dict['lock'] = self.lock.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unlock
        if self.unlock:
            _dict['unlock'] = self.unlock.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VClusterActionVisibilityDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachAlertingProfile": ButtonStatusDto.from_dict(obj["attachAlertingProfile"]) if obj.get("attachAlertingProfile") is not None else None,
            "detachAlertingProfile": ButtonStatusDto.from_dict(obj["detachAlertingProfile"]) if obj.get("detachAlertingProfile") is not None else None,
            "projectMaintenanceMode": ButtonStatusDto.from_dict(obj["projectMaintenanceMode"]) if obj.get("projectMaintenanceMode") is not None else None,
            "lock": ButtonStatusDto.from_dict(obj["lock"]) if obj.get("lock") is not None else None,
            "unlock": ButtonStatusDto.from_dict(obj["unlock"]) if obj.get("unlock") is not None else None
        })
        return _obj


