# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from taikunpycore.models.stand_alone_meta_data_dto_for_vm import StandAloneMetaDataDtoForVm
from taikunpycore.models.stand_alone_profile_for_details_dto import StandAloneProfileForDetailsDto
from taikunpycore.models.stand_alone_vm_disk_for_details_dto import StandAloneVmDiskForDetailsDto
from taikunpycore.models.standalone_visibility_dto import StandaloneVisibilityDto
from typing import Optional, Set
from typing_extensions import Self

class StandaloneVmsListForDetailsDto(BaseModel):
    """
    StandaloneVmsListForDetailsDto
    """ # noqa: E501
    id: Optional[StrictInt]
    name: Optional[StrictStr]
    image_name: Optional[StrictStr] = Field(alias="imageName")
    image_id: Optional[StrictStr] = Field(alias="imageId")
    status: Optional[StrictStr]
    cloud_init: Optional[StrictStr] = Field(alias="cloudInit")
    volume_type: Optional[StrictStr] = Field(alias="volumeType")
    volume_size: Optional[StrictInt] = Field(alias="volumeSize")
    created_at: Optional[StrictStr] = Field(alias="createdAt")
    created_by: Optional[StrictStr] = Field(alias="createdBy")
    last_modified: Optional[StrictStr] = Field(alias="lastModified")
    last_modified_by: Optional[StrictStr] = Field(alias="lastModifiedBy")
    ssh_public_key: Optional[StrictStr] = Field(alias="sshPublicKey")
    current_flavor: Optional[StrictStr] = Field(alias="currentFlavor")
    target_flavor: Optional[StrictStr] = Field(alias="targetFlavor")
    public_ip_enabled: Optional[StrictBool] = Field(alias="publicIpEnabled")
    public_ip: Optional[StrictStr] = Field(alias="publicIp")
    hypervisor: Optional[StrictStr]
    hypervisor_id: Optional[StrictStr] = Field(alias="hypervisorId")
    ip_address: Optional[StrictStr] = Field(alias="ipAddress")
    spot_price: Union[StrictFloat, StrictInt] = Field(alias="spotPrice")
    spot_instance: Optional[StrictBool] = Field(alias="spotInstance")
    availability_zone: Optional[StrictStr] = Field(alias="availabilityZone")
    action_buttons: StandaloneVisibilityDto = Field(alias="actionButtons")
    is_windows: Optional[StrictBool] = Field(alias="isWindows")
    disks: List[StandAloneVmDiskForDetailsDto]
    stand_alone_meta_datas: List[StandAloneMetaDataDtoForVm] = Field(alias="standAloneMetaDatas")
    profile: StandAloneProfileForDetailsDto
    __properties: ClassVar[List[str]] = ["id", "name", "imageName", "imageId", "status", "cloudInit", "volumeType", "volumeSize", "createdAt", "createdBy", "lastModified", "lastModifiedBy", "sshPublicKey", "currentFlavor", "targetFlavor", "publicIpEnabled", "publicIp", "hypervisor", "hypervisorId", "ipAddress", "spotPrice", "spotInstance", "availabilityZone", "actionButtons", "isWindows", "disks", "standAloneMetaDatas", "profile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StandaloneVmsListForDetailsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action_buttons
        if self.action_buttons:
            _dict['actionButtons'] = self.action_buttons.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in disks (list)
        _items = []
        if self.disks:
            for _item_disks in self.disks:
                if _item_disks:
                    _items.append(_item_disks.to_dict())
            _dict['disks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stand_alone_meta_datas (list)
        _items = []
        if self.stand_alone_meta_datas:
            for _item_stand_alone_meta_datas in self.stand_alone_meta_datas:
                if _item_stand_alone_meta_datas:
                    _items.append(_item_stand_alone_meta_datas.to_dict())
            _dict['standAloneMetaDatas'] = _items
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        # set to None if cloud_init (nullable) is None
        # and model_fields_set contains the field
        if self.cloud_init is None and "cloud_init" in self.model_fields_set:
            _dict['cloudInit'] = None

        # set to None if last_modified (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified is None and "last_modified" in self.model_fields_set:
            _dict['lastModified'] = None

        # set to None if last_modified_by (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_by is None and "last_modified_by" in self.model_fields_set:
            _dict['lastModifiedBy'] = None

        # set to None if target_flavor (nullable) is None
        # and model_fields_set contains the field
        if self.target_flavor is None and "target_flavor" in self.model_fields_set:
            _dict['targetFlavor'] = None

        # set to None if public_ip (nullable) is None
        # and model_fields_set contains the field
        if self.public_ip is None and "public_ip" in self.model_fields_set:
            _dict['publicIp'] = None

        # set to None if hypervisor (nullable) is None
        # and model_fields_set contains the field
        if self.hypervisor is None and "hypervisor" in self.model_fields_set:
            _dict['hypervisor'] = None

        # set to None if hypervisor_id (nullable) is None
        # and model_fields_set contains the field
        if self.hypervisor_id is None and "hypervisor_id" in self.model_fields_set:
            _dict['hypervisorId'] = None

        # set to None if ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.ip_address is None and "ip_address" in self.model_fields_set:
            _dict['ipAddress'] = None

        # set to None if availability_zone (nullable) is None
        # and model_fields_set contains the field
        if self.availability_zone is None and "availability_zone" in self.model_fields_set:
            _dict['availabilityZone'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StandaloneVmsListForDetailsDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "imageName": obj.get("imageName"),
            "imageId": obj.get("imageId"),
            "status": obj.get("status"),
            "cloudInit": obj.get("cloudInit"),
            "volumeType": obj.get("volumeType"),
            "volumeSize": obj.get("volumeSize"),
            "createdAt": obj.get("createdAt"),
            "createdBy": obj.get("createdBy"),
            "lastModified": obj.get("lastModified"),
            "lastModifiedBy": obj.get("lastModifiedBy"),
            "sshPublicKey": obj.get("sshPublicKey"),
            "currentFlavor": obj.get("currentFlavor"),
            "targetFlavor": obj.get("targetFlavor"),
            "publicIpEnabled": obj.get("publicIpEnabled"),
            "publicIp": obj.get("publicIp"),
            "hypervisor": obj.get("hypervisor"),
            "hypervisorId": obj.get("hypervisorId"),
            "ipAddress": obj.get("ipAddress"),
            "spotPrice": obj.get("spotPrice"),
            "spotInstance": obj.get("spotInstance"),
            "availabilityZone": obj.get("availabilityZone"),
            "actionButtons": StandaloneVisibilityDto.from_dict(obj["actionButtons"]) if obj.get("actionButtons") is not None else None,
            "isWindows": obj.get("isWindows"),
            "disks": [StandAloneVmDiskForDetailsDto.from_dict(_item) for _item in obj["disks"]] if obj.get("disks") is not None else None,
            "standAloneMetaDatas": [StandAloneMetaDataDtoForVm.from_dict(_item) for _item in obj["standAloneMetaDatas"]] if obj.get("standAloneMetaDatas") is not None else None,
            "profile": StandAloneProfileForDetailsDto.from_dict(obj["profile"]) if obj.get("profile") is not None else None
        })
        return _obj


