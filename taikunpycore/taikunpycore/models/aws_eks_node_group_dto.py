# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AwsEksNodeGroupDto(BaseModel):
    """
    AwsEksNodeGroupDto
    """ # noqa: E501
    name: Optional[StrictStr] = None
    role: Optional[StrictStr] = None
    ami_type: Optional[StrictStr] = Field(default=None, alias="amiType")
    ami_release_version: Optional[StrictStr] = Field(default=None, alias="amiReleaseVersion")
    arn: Optional[StrictStr] = None
    capacity_type: Optional[StrictStr] = Field(default=None, alias="capacityType")
    health_issues: Optional[List[StrictStr]] = Field(default=None, alias="healthIssues")
    status: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    created: Optional[StrictStr] = None
    disk_size: Optional[StrictInt] = Field(default=None, alias="diskSize")
    desired_size: Optional[StrictInt] = Field(default=None, alias="desiredSize")
    max_size: Optional[StrictInt] = Field(default=None, alias="maxSize")
    min_size: Optional[StrictInt] = Field(default=None, alias="minSize")
    instance_types: Optional[List[StrictStr]] = Field(default=None, alias="instanceTypes")
    __properties: ClassVar[List[str]] = ["name", "role", "amiType", "amiReleaseVersion", "arn", "capacityType", "healthIssues", "status", "version", "created", "diskSize", "desiredSize", "maxSize", "minSize", "instanceTypes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AwsEksNodeGroupDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if role (nullable) is None
        # and model_fields_set contains the field
        if self.role is None and "role" in self.model_fields_set:
            _dict['role'] = None

        # set to None if ami_type (nullable) is None
        # and model_fields_set contains the field
        if self.ami_type is None and "ami_type" in self.model_fields_set:
            _dict['amiType'] = None

        # set to None if ami_release_version (nullable) is None
        # and model_fields_set contains the field
        if self.ami_release_version is None and "ami_release_version" in self.model_fields_set:
            _dict['amiReleaseVersion'] = None

        # set to None if arn (nullable) is None
        # and model_fields_set contains the field
        if self.arn is None and "arn" in self.model_fields_set:
            _dict['arn'] = None

        # set to None if capacity_type (nullable) is None
        # and model_fields_set contains the field
        if self.capacity_type is None and "capacity_type" in self.model_fields_set:
            _dict['capacityType'] = None

        # set to None if health_issues (nullable) is None
        # and model_fields_set contains the field
        if self.health_issues is None and "health_issues" in self.model_fields_set:
            _dict['healthIssues'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if instance_types (nullable) is None
        # and model_fields_set contains the field
        if self.instance_types is None and "instance_types" in self.model_fields_set:
            _dict['instanceTypes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AwsEksNodeGroupDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "role": obj.get("role"),
            "amiType": obj.get("amiType"),
            "amiReleaseVersion": obj.get("amiReleaseVersion"),
            "arn": obj.get("arn"),
            "capacityType": obj.get("capacityType"),
            "healthIssues": obj.get("healthIssues"),
            "status": obj.get("status"),
            "version": obj.get("version"),
            "created": obj.get("created"),
            "diskSize": obj.get("diskSize"),
            "desiredSize": obj.get("desiredSize"),
            "maxSize": obj.get("maxSize"),
            "minSize": obj.get("minSize"),
            "instanceTypes": obj.get("instanceTypes")
        })
        return _obj


