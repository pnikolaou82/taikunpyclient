# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleFlavorDto(BaseModel):
    """
    GoogleFlavorDto
    """ # noqa: E501
    name: Optional[StrictStr]
    cpu: Optional[StrictInt]
    ram: Optional[Union[StrictFloat, StrictInt]]
    description: Optional[Any]
    linux_price: Optional[Union[StrictFloat, StrictInt]] = Field(alias="linuxPrice")
    windows_price: Optional[Union[StrictFloat, StrictInt]] = Field(alias="windowsPrice")
    linux_spot_price: Optional[Union[StrictFloat, StrictInt]] = Field(alias="linuxSpotPrice")
    windows_spot_price: Optional[Union[StrictFloat, StrictInt]] = Field(alias="windowsSpotPrice")
    __properties: ClassVar[List[str]] = ["name", "cpu", "ram", "description", "linuxPrice", "windowsPrice", "linuxSpotPrice", "windowsSpotPrice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFlavorDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cpu (nullable) is None
        # and model_fields_set contains the field
        if self.cpu is None and "cpu" in self.model_fields_set:
            _dict['cpu'] = None

        # set to None if ram (nullable) is None
        # and model_fields_set contains the field
        if self.ram is None and "ram" in self.model_fields_set:
            _dict['ram'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if linux_price (nullable) is None
        # and model_fields_set contains the field
        if self.linux_price is None and "linux_price" in self.model_fields_set:
            _dict['linuxPrice'] = None

        # set to None if windows_price (nullable) is None
        # and model_fields_set contains the field
        if self.windows_price is None and "windows_price" in self.model_fields_set:
            _dict['windowsPrice'] = None

        # set to None if linux_spot_price (nullable) is None
        # and model_fields_set contains the field
        if self.linux_spot_price is None and "linux_spot_price" in self.model_fields_set:
            _dict['linuxSpotPrice'] = None

        # set to None if windows_spot_price (nullable) is None
        # and model_fields_set contains the field
        if self.windows_spot_price is None and "windows_spot_price" in self.model_fields_set:
            _dict['windowsSpotPrice'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFlavorDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "cpu": obj.get("cpu"),
            "ram": obj.get("ram"),
            "description": obj.get("description"),
            "linuxPrice": obj.get("linuxPrice"),
            "windowsPrice": obj.get("windowsPrice"),
            "linuxSpotPrice": obj.get("linuxSpotPrice"),
            "windowsSpotPrice": obj.get("windowsSpotPrice")
        })
        return _obj


