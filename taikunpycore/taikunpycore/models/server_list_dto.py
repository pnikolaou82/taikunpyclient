# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from taikunpycore.models.cloud_role import CloudRole
from taikunpycore.models.cloud_type import CloudType
from taikunpycore.models.kubernetes_node_labels_dto import KubernetesNodeLabelsDto
from taikunpycore.models.proxmox_role import ProxmoxRole
from taikunpycore.models.server_action_button_visibility_dto import ServerActionButtonVisibilityDto
from typing import Optional, Set
from typing_extensions import Self

class ServerListDto(BaseModel):
    """
    ServerListDto
    """ # noqa: E501
    id: Optional[StrictInt]
    name: Optional[StrictStr]
    project_name: Optional[StrictStr] = Field(alias="projectName")
    organization_name: Optional[StrictStr] = Field(alias="organizationName")
    organization_id: Optional[StrictInt] = Field(alias="organizationId")
    project_id: Optional[StrictInt] = Field(alias="projectId")
    ip_address: Optional[StrictStr] = Field(alias="ipAddress")
    disk_size: Union[StrictFloat, StrictInt] = Field(alias="diskSize")
    kubernetes_health: Optional[StrictStr] = Field(alias="kubernetesHealth")
    cpu: Optional[StrictInt]
    ram: Union[StrictFloat, StrictInt]
    role: CloudRole
    status: Optional[StrictStr]
    created_at: Optional[StrictStr] = Field(alias="createdAt")
    cloud_type: CloudType = Field(alias="cloudType")
    created_by: Optional[StrictStr] = Field(alias="createdBy")
    last_modified: Optional[StrictStr] = Field(alias="lastModified")
    last_modified_by: Optional[StrictStr] = Field(alias="lastModifiedBy")
    spot_price: Union[StrictFloat, StrictInt] = Field(alias="spotPrice")
    spot_instance: Optional[StrictBool] = Field(alias="spotInstance")
    shut_off: Optional[StrictBool] = Field(alias="shutOff")
    autoscaling_group: Optional[StrictStr] = Field(alias="autoscalingGroup")
    provider_id: Optional[StrictStr] = Field(alias="providerID")
    instance_id: Optional[StrictStr] = Field(alias="instanceId")
    aws_host_name: Optional[StrictStr] = Field(alias="awsHostName")
    availability_zone: Optional[StrictStr] = Field(alias="availabilityZone")
    hypervisor: Optional[StrictStr]
    hypervisor_id: Optional[StrictStr] = Field(alias="hypervisorId")
    proxmox_role: ProxmoxRole = Field(alias="proxmoxRole")
    proxmox_extra_disk_size: Optional[StrictInt] = Field(alias="proxmoxExtraDiskSize")
    action_buttons: Optional[ServerActionButtonVisibilityDto] = Field(default=None, alias="actionButtons")
    kubernetes_node_labels: List[KubernetesNodeLabelsDto] = Field(alias="kubernetesNodeLabels")
    replica_count: Optional[StrictInt] = Field(alias="replicaCount")
    wasm_enabled: Optional[StrictBool] = Field(alias="wasmEnabled")
    flavor: Optional[StrictStr]
    __properties: ClassVar[List[str]] = ["id", "name", "projectName", "organizationName", "organizationId", "projectId", "ipAddress", "diskSize", "kubernetesHealth", "cpu", "ram", "role", "status", "createdAt", "cloudType", "createdBy", "lastModified", "lastModifiedBy", "spotPrice", "spotInstance", "shutOff", "autoscalingGroup", "providerID", "instanceId", "awsHostName", "availabilityZone", "hypervisor", "hypervisorId", "proxmoxRole", "proxmoxExtraDiskSize", "actionButtons", "kubernetesNodeLabels", "replicaCount", "wasmEnabled", "flavor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerListDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action_buttons
        if self.action_buttons:
            _dict['actionButtons'] = self.action_buttons.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in kubernetes_node_labels (list)
        _items = []
        if self.kubernetes_node_labels:
            for _item_kubernetes_node_labels in self.kubernetes_node_labels:
                if _item_kubernetes_node_labels:
                    _items.append(_item_kubernetes_node_labels.to_dict())
            _dict['kubernetesNodeLabels'] = _items
        # set to None if ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.ip_address is None and "ip_address" in self.model_fields_set:
            _dict['ipAddress'] = None

        # set to None if last_modified (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified is None and "last_modified" in self.model_fields_set:
            _dict['lastModified'] = None

        # set to None if last_modified_by (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_by is None and "last_modified_by" in self.model_fields_set:
            _dict['lastModifiedBy'] = None

        # set to None if autoscaling_group (nullable) is None
        # and model_fields_set contains the field
        if self.autoscaling_group is None and "autoscaling_group" in self.model_fields_set:
            _dict['autoscalingGroup'] = None

        # set to None if provider_id (nullable) is None
        # and model_fields_set contains the field
        if self.provider_id is None and "provider_id" in self.model_fields_set:
            _dict['providerID'] = None

        # set to None if instance_id (nullable) is None
        # and model_fields_set contains the field
        if self.instance_id is None and "instance_id" in self.model_fields_set:
            _dict['instanceId'] = None

        # set to None if aws_host_name (nullable) is None
        # and model_fields_set contains the field
        if self.aws_host_name is None and "aws_host_name" in self.model_fields_set:
            _dict['awsHostName'] = None

        # set to None if availability_zone (nullable) is None
        # and model_fields_set contains the field
        if self.availability_zone is None and "availability_zone" in self.model_fields_set:
            _dict['availabilityZone'] = None

        # set to None if hypervisor (nullable) is None
        # and model_fields_set contains the field
        if self.hypervisor is None and "hypervisor" in self.model_fields_set:
            _dict['hypervisor'] = None

        # set to None if hypervisor_id (nullable) is None
        # and model_fields_set contains the field
        if self.hypervisor_id is None and "hypervisor_id" in self.model_fields_set:
            _dict['hypervisorId'] = None

        # set to None if replica_count (nullable) is None
        # and model_fields_set contains the field
        if self.replica_count is None and "replica_count" in self.model_fields_set:
            _dict['replicaCount'] = None

        # set to None if flavor (nullable) is None
        # and model_fields_set contains the field
        if self.flavor is None and "flavor" in self.model_fields_set:
            _dict['flavor'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerListDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "projectName": obj.get("projectName"),
            "organizationName": obj.get("organizationName"),
            "organizationId": obj.get("organizationId"),
            "projectId": obj.get("projectId"),
            "ipAddress": obj.get("ipAddress"),
            "diskSize": obj.get("diskSize"),
            "kubernetesHealth": obj.get("kubernetesHealth"),
            "cpu": obj.get("cpu"),
            "ram": obj.get("ram"),
            "role": obj.get("role"),
            "status": obj.get("status"),
            "createdAt": obj.get("createdAt"),
            "cloudType": obj.get("cloudType"),
            "createdBy": obj.get("createdBy"),
            "lastModified": obj.get("lastModified"),
            "lastModifiedBy": obj.get("lastModifiedBy"),
            "spotPrice": obj.get("spotPrice"),
            "spotInstance": obj.get("spotInstance"),
            "shutOff": obj.get("shutOff"),
            "autoscalingGroup": obj.get("autoscalingGroup"),
            "providerID": obj.get("providerID"),
            "instanceId": obj.get("instanceId"),
            "awsHostName": obj.get("awsHostName"),
            "availabilityZone": obj.get("availabilityZone"),
            "hypervisor": obj.get("hypervisor"),
            "hypervisorId": obj.get("hypervisorId"),
            "proxmoxRole": obj.get("proxmoxRole"),
            "proxmoxExtraDiskSize": obj.get("proxmoxExtraDiskSize"),
            "actionButtons": ServerActionButtonVisibilityDto.from_dict(obj["actionButtons"]) if obj.get("actionButtons") is not None else None,
            "kubernetesNodeLabels": [KubernetesNodeLabelsDto.from_dict(_item) for _item in obj["kubernetesNodeLabels"]] if obj.get("kubernetesNodeLabels") is not None else None,
            "replicaCount": obj.get("replicaCount"),
            "wasmEnabled": obj.get("wasmEnabled"),
            "flavor": obj.get("flavor")
        })
        return _obj


