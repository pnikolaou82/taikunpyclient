# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.common_availability_dto import CommonAvailabilityDto
from taikunpycore.models.common_dropdown_dto import CommonDropdownDto
from taikunpycore.models.common_string_based_dropdown_dto import CommonStringBasedDropdownDto
from typing import Optional, Set
from typing_extensions import Self

class EnumList(BaseModel):
    """
    EnumList
    """ # noqa: E501
    cloud_types: Optional[List[CommonDropdownDto]] = Field(alias="cloudTypes")
    project_statuses: Optional[List[CommonDropdownDto]] = Field(alias="projectStatuses")
    server_roles: Optional[List[CommonDropdownDto]] = Field(alias="serverRoles")
    server_statuses: Optional[List[CommonDropdownDto]] = Field(alias="serverStatuses")
    user_roles: Optional[List[CommonDropdownDto]] = Field(alias="userRoles")
    security_group_rules: Optional[List[CommonDropdownDto]] = Field(alias="securityGroupRules")
    prometheus_types: Optional[List[CommonDropdownDto]] = Field(alias="prometheusTypes")
    audit_logs: Optional[List[CommonDropdownDto]] = Field(alias="auditLogs")
    reboot_options: Optional[List[CommonDropdownDto]] = Field(alias="rebootOptions")
    availability: Optional[List[CommonAvailabilityDto]]
    slack_types: Optional[List[CommonDropdownDto]] = Field(alias="slackTypes")
    request_logs: Optional[List[CommonDropdownDto]] = Field(alias="requestLogs")
    azure_quotas: Optional[List[CommonDropdownDto]] = Field(alias="azureQuotas")
    showback_kinds: Optional[List[CommonDropdownDto]] = Field(alias="showbackKinds")
    alert_types: Optional[List[CommonDropdownDto]] = Field(alias="alertTypes")
    reminder_types: Optional[List[CommonDropdownDto]] = Field(alias="reminderTypes")
    aws_platforms: Optional[List[CommonStringBasedDropdownDto]] = Field(alias="awsPlatforms")
    cron_periods: Optional[List[CommonStringBasedDropdownDto]] = Field(alias="cronPeriods")
    validity_periods: Optional[List[CommonDropdownDto]] = Field(alias="validityPeriods")
    alerting_integration_types: Optional[List[CommonDropdownDto]] = Field(alias="alertingIntegrationTypes")
    google_image_types: Optional[List[CommonDropdownDto]] = Field(alias="googleImageTypes")
    standalone_vm_statuses: Optional[List[CommonDropdownDto]] = Field(alias="standaloneVmStatuses")
    openstack_continents: Optional[List[CommonStringBasedDropdownDto]] = Field(alias="openstackContinents")
    retention_periods: Optional[List[CommonStringBasedDropdownDto]] = Field(alias="retentionPeriods")
    ticket_priorities: Optional[List[CommonDropdownDto]] = Field(alias="ticketPriorities")
    proxmox_roles: Optional[List[CommonDropdownDto]] = Field(alias="proxmoxRoles")
    __properties: ClassVar[List[str]] = ["cloudTypes", "projectStatuses", "serverRoles", "serverStatuses", "userRoles", "securityGroupRules", "prometheusTypes", "auditLogs", "rebootOptions", "availability", "slackTypes", "requestLogs", "azureQuotas", "showbackKinds", "alertTypes", "reminderTypes", "awsPlatforms", "cronPeriods", "validityPeriods", "alertingIntegrationTypes", "googleImageTypes", "standaloneVmStatuses", "openstackContinents", "retentionPeriods", "ticketPriorities", "proxmoxRoles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnumList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cloud_types (list)
        _items = []
        if self.cloud_types:
            for _item_cloud_types in self.cloud_types:
                if _item_cloud_types:
                    _items.append(_item_cloud_types.to_dict())
            _dict['cloudTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in project_statuses (list)
        _items = []
        if self.project_statuses:
            for _item_project_statuses in self.project_statuses:
                if _item_project_statuses:
                    _items.append(_item_project_statuses.to_dict())
            _dict['projectStatuses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in server_roles (list)
        _items = []
        if self.server_roles:
            for _item_server_roles in self.server_roles:
                if _item_server_roles:
                    _items.append(_item_server_roles.to_dict())
            _dict['serverRoles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in server_statuses (list)
        _items = []
        if self.server_statuses:
            for _item_server_statuses in self.server_statuses:
                if _item_server_statuses:
                    _items.append(_item_server_statuses.to_dict())
            _dict['serverStatuses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user_roles (list)
        _items = []
        if self.user_roles:
            for _item_user_roles in self.user_roles:
                if _item_user_roles:
                    _items.append(_item_user_roles.to_dict())
            _dict['userRoles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in security_group_rules (list)
        _items = []
        if self.security_group_rules:
            for _item_security_group_rules in self.security_group_rules:
                if _item_security_group_rules:
                    _items.append(_item_security_group_rules.to_dict())
            _dict['securityGroupRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in prometheus_types (list)
        _items = []
        if self.prometheus_types:
            for _item_prometheus_types in self.prometheus_types:
                if _item_prometheus_types:
                    _items.append(_item_prometheus_types.to_dict())
            _dict['prometheusTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in audit_logs (list)
        _items = []
        if self.audit_logs:
            for _item_audit_logs in self.audit_logs:
                if _item_audit_logs:
                    _items.append(_item_audit_logs.to_dict())
            _dict['auditLogs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reboot_options (list)
        _items = []
        if self.reboot_options:
            for _item_reboot_options in self.reboot_options:
                if _item_reboot_options:
                    _items.append(_item_reboot_options.to_dict())
            _dict['rebootOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in availability (list)
        _items = []
        if self.availability:
            for _item_availability in self.availability:
                if _item_availability:
                    _items.append(_item_availability.to_dict())
            _dict['availability'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in slack_types (list)
        _items = []
        if self.slack_types:
            for _item_slack_types in self.slack_types:
                if _item_slack_types:
                    _items.append(_item_slack_types.to_dict())
            _dict['slackTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in request_logs (list)
        _items = []
        if self.request_logs:
            for _item_request_logs in self.request_logs:
                if _item_request_logs:
                    _items.append(_item_request_logs.to_dict())
            _dict['requestLogs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in azure_quotas (list)
        _items = []
        if self.azure_quotas:
            for _item_azure_quotas in self.azure_quotas:
                if _item_azure_quotas:
                    _items.append(_item_azure_quotas.to_dict())
            _dict['azureQuotas'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in showback_kinds (list)
        _items = []
        if self.showback_kinds:
            for _item_showback_kinds in self.showback_kinds:
                if _item_showback_kinds:
                    _items.append(_item_showback_kinds.to_dict())
            _dict['showbackKinds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in alert_types (list)
        _items = []
        if self.alert_types:
            for _item_alert_types in self.alert_types:
                if _item_alert_types:
                    _items.append(_item_alert_types.to_dict())
            _dict['alertTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reminder_types (list)
        _items = []
        if self.reminder_types:
            for _item_reminder_types in self.reminder_types:
                if _item_reminder_types:
                    _items.append(_item_reminder_types.to_dict())
            _dict['reminderTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in aws_platforms (list)
        _items = []
        if self.aws_platforms:
            for _item_aws_platforms in self.aws_platforms:
                if _item_aws_platforms:
                    _items.append(_item_aws_platforms.to_dict())
            _dict['awsPlatforms'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cron_periods (list)
        _items = []
        if self.cron_periods:
            for _item_cron_periods in self.cron_periods:
                if _item_cron_periods:
                    _items.append(_item_cron_periods.to_dict())
            _dict['cronPeriods'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in validity_periods (list)
        _items = []
        if self.validity_periods:
            for _item_validity_periods in self.validity_periods:
                if _item_validity_periods:
                    _items.append(_item_validity_periods.to_dict())
            _dict['validityPeriods'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in alerting_integration_types (list)
        _items = []
        if self.alerting_integration_types:
            for _item_alerting_integration_types in self.alerting_integration_types:
                if _item_alerting_integration_types:
                    _items.append(_item_alerting_integration_types.to_dict())
            _dict['alertingIntegrationTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in google_image_types (list)
        _items = []
        if self.google_image_types:
            for _item_google_image_types in self.google_image_types:
                if _item_google_image_types:
                    _items.append(_item_google_image_types.to_dict())
            _dict['googleImageTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in standalone_vm_statuses (list)
        _items = []
        if self.standalone_vm_statuses:
            for _item_standalone_vm_statuses in self.standalone_vm_statuses:
                if _item_standalone_vm_statuses:
                    _items.append(_item_standalone_vm_statuses.to_dict())
            _dict['standaloneVmStatuses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in openstack_continents (list)
        _items = []
        if self.openstack_continents:
            for _item_openstack_continents in self.openstack_continents:
                if _item_openstack_continents:
                    _items.append(_item_openstack_continents.to_dict())
            _dict['openstackContinents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in retention_periods (list)
        _items = []
        if self.retention_periods:
            for _item_retention_periods in self.retention_periods:
                if _item_retention_periods:
                    _items.append(_item_retention_periods.to_dict())
            _dict['retentionPeriods'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ticket_priorities (list)
        _items = []
        if self.ticket_priorities:
            for _item_ticket_priorities in self.ticket_priorities:
                if _item_ticket_priorities:
                    _items.append(_item_ticket_priorities.to_dict())
            _dict['ticketPriorities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in proxmox_roles (list)
        _items = []
        if self.proxmox_roles:
            for _item_proxmox_roles in self.proxmox_roles:
                if _item_proxmox_roles:
                    _items.append(_item_proxmox_roles.to_dict())
            _dict['proxmoxRoles'] = _items
        # set to None if cloud_types (nullable) is None
        # and model_fields_set contains the field
        if self.cloud_types is None and "cloud_types" in self.model_fields_set:
            _dict['cloudTypes'] = None

        # set to None if project_statuses (nullable) is None
        # and model_fields_set contains the field
        if self.project_statuses is None and "project_statuses" in self.model_fields_set:
            _dict['projectStatuses'] = None

        # set to None if server_roles (nullable) is None
        # and model_fields_set contains the field
        if self.server_roles is None and "server_roles" in self.model_fields_set:
            _dict['serverRoles'] = None

        # set to None if server_statuses (nullable) is None
        # and model_fields_set contains the field
        if self.server_statuses is None and "server_statuses" in self.model_fields_set:
            _dict['serverStatuses'] = None

        # set to None if user_roles (nullable) is None
        # and model_fields_set contains the field
        if self.user_roles is None and "user_roles" in self.model_fields_set:
            _dict['userRoles'] = None

        # set to None if security_group_rules (nullable) is None
        # and model_fields_set contains the field
        if self.security_group_rules is None and "security_group_rules" in self.model_fields_set:
            _dict['securityGroupRules'] = None

        # set to None if prometheus_types (nullable) is None
        # and model_fields_set contains the field
        if self.prometheus_types is None and "prometheus_types" in self.model_fields_set:
            _dict['prometheusTypes'] = None

        # set to None if audit_logs (nullable) is None
        # and model_fields_set contains the field
        if self.audit_logs is None and "audit_logs" in self.model_fields_set:
            _dict['auditLogs'] = None

        # set to None if reboot_options (nullable) is None
        # and model_fields_set contains the field
        if self.reboot_options is None and "reboot_options" in self.model_fields_set:
            _dict['rebootOptions'] = None

        # set to None if availability (nullable) is None
        # and model_fields_set contains the field
        if self.availability is None and "availability" in self.model_fields_set:
            _dict['availability'] = None

        # set to None if slack_types (nullable) is None
        # and model_fields_set contains the field
        if self.slack_types is None and "slack_types" in self.model_fields_set:
            _dict['slackTypes'] = None

        # set to None if request_logs (nullable) is None
        # and model_fields_set contains the field
        if self.request_logs is None and "request_logs" in self.model_fields_set:
            _dict['requestLogs'] = None

        # set to None if azure_quotas (nullable) is None
        # and model_fields_set contains the field
        if self.azure_quotas is None and "azure_quotas" in self.model_fields_set:
            _dict['azureQuotas'] = None

        # set to None if showback_kinds (nullable) is None
        # and model_fields_set contains the field
        if self.showback_kinds is None and "showback_kinds" in self.model_fields_set:
            _dict['showbackKinds'] = None

        # set to None if alert_types (nullable) is None
        # and model_fields_set contains the field
        if self.alert_types is None and "alert_types" in self.model_fields_set:
            _dict['alertTypes'] = None

        # set to None if reminder_types (nullable) is None
        # and model_fields_set contains the field
        if self.reminder_types is None and "reminder_types" in self.model_fields_set:
            _dict['reminderTypes'] = None

        # set to None if aws_platforms (nullable) is None
        # and model_fields_set contains the field
        if self.aws_platforms is None and "aws_platforms" in self.model_fields_set:
            _dict['awsPlatforms'] = None

        # set to None if cron_periods (nullable) is None
        # and model_fields_set contains the field
        if self.cron_periods is None and "cron_periods" in self.model_fields_set:
            _dict['cronPeriods'] = None

        # set to None if validity_periods (nullable) is None
        # and model_fields_set contains the field
        if self.validity_periods is None and "validity_periods" in self.model_fields_set:
            _dict['validityPeriods'] = None

        # set to None if alerting_integration_types (nullable) is None
        # and model_fields_set contains the field
        if self.alerting_integration_types is None and "alerting_integration_types" in self.model_fields_set:
            _dict['alertingIntegrationTypes'] = None

        # set to None if google_image_types (nullable) is None
        # and model_fields_set contains the field
        if self.google_image_types is None and "google_image_types" in self.model_fields_set:
            _dict['googleImageTypes'] = None

        # set to None if standalone_vm_statuses (nullable) is None
        # and model_fields_set contains the field
        if self.standalone_vm_statuses is None and "standalone_vm_statuses" in self.model_fields_set:
            _dict['standaloneVmStatuses'] = None

        # set to None if openstack_continents (nullable) is None
        # and model_fields_set contains the field
        if self.openstack_continents is None and "openstack_continents" in self.model_fields_set:
            _dict['openstackContinents'] = None

        # set to None if retention_periods (nullable) is None
        # and model_fields_set contains the field
        if self.retention_periods is None and "retention_periods" in self.model_fields_set:
            _dict['retentionPeriods'] = None

        # set to None if ticket_priorities (nullable) is None
        # and model_fields_set contains the field
        if self.ticket_priorities is None and "ticket_priorities" in self.model_fields_set:
            _dict['ticketPriorities'] = None

        # set to None if proxmox_roles (nullable) is None
        # and model_fields_set contains the field
        if self.proxmox_roles is None and "proxmox_roles" in self.model_fields_set:
            _dict['proxmoxRoles'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnumList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudTypes": [CommonDropdownDto.from_dict(_item) for _item in obj["cloudTypes"]] if obj.get("cloudTypes") is not None else None,
            "projectStatuses": [CommonDropdownDto.from_dict(_item) for _item in obj["projectStatuses"]] if obj.get("projectStatuses") is not None else None,
            "serverRoles": [CommonDropdownDto.from_dict(_item) for _item in obj["serverRoles"]] if obj.get("serverRoles") is not None else None,
            "serverStatuses": [CommonDropdownDto.from_dict(_item) for _item in obj["serverStatuses"]] if obj.get("serverStatuses") is not None else None,
            "userRoles": [CommonDropdownDto.from_dict(_item) for _item in obj["userRoles"]] if obj.get("userRoles") is not None else None,
            "securityGroupRules": [CommonDropdownDto.from_dict(_item) for _item in obj["securityGroupRules"]] if obj.get("securityGroupRules") is not None else None,
            "prometheusTypes": [CommonDropdownDto.from_dict(_item) for _item in obj["prometheusTypes"]] if obj.get("prometheusTypes") is not None else None,
            "auditLogs": [CommonDropdownDto.from_dict(_item) for _item in obj["auditLogs"]] if obj.get("auditLogs") is not None else None,
            "rebootOptions": [CommonDropdownDto.from_dict(_item) for _item in obj["rebootOptions"]] if obj.get("rebootOptions") is not None else None,
            "availability": [CommonAvailabilityDto.from_dict(_item) for _item in obj["availability"]] if obj.get("availability") is not None else None,
            "slackTypes": [CommonDropdownDto.from_dict(_item) for _item in obj["slackTypes"]] if obj.get("slackTypes") is not None else None,
            "requestLogs": [CommonDropdownDto.from_dict(_item) for _item in obj["requestLogs"]] if obj.get("requestLogs") is not None else None,
            "azureQuotas": [CommonDropdownDto.from_dict(_item) for _item in obj["azureQuotas"]] if obj.get("azureQuotas") is not None else None,
            "showbackKinds": [CommonDropdownDto.from_dict(_item) for _item in obj["showbackKinds"]] if obj.get("showbackKinds") is not None else None,
            "alertTypes": [CommonDropdownDto.from_dict(_item) for _item in obj["alertTypes"]] if obj.get("alertTypes") is not None else None,
            "reminderTypes": [CommonDropdownDto.from_dict(_item) for _item in obj["reminderTypes"]] if obj.get("reminderTypes") is not None else None,
            "awsPlatforms": [CommonStringBasedDropdownDto.from_dict(_item) for _item in obj["awsPlatforms"]] if obj.get("awsPlatforms") is not None else None,
            "cronPeriods": [CommonStringBasedDropdownDto.from_dict(_item) for _item in obj["cronPeriods"]] if obj.get("cronPeriods") is not None else None,
            "validityPeriods": [CommonDropdownDto.from_dict(_item) for _item in obj["validityPeriods"]] if obj.get("validityPeriods") is not None else None,
            "alertingIntegrationTypes": [CommonDropdownDto.from_dict(_item) for _item in obj["alertingIntegrationTypes"]] if obj.get("alertingIntegrationTypes") is not None else None,
            "googleImageTypes": [CommonDropdownDto.from_dict(_item) for _item in obj["googleImageTypes"]] if obj.get("googleImageTypes") is not None else None,
            "standaloneVmStatuses": [CommonDropdownDto.from_dict(_item) for _item in obj["standaloneVmStatuses"]] if obj.get("standaloneVmStatuses") is not None else None,
            "openstackContinents": [CommonStringBasedDropdownDto.from_dict(_item) for _item in obj["openstackContinents"]] if obj.get("openstackContinents") is not None else None,
            "retentionPeriods": [CommonStringBasedDropdownDto.from_dict(_item) for _item in obj["retentionPeriods"]] if obj.get("retentionPeriods") is not None else None,
            "ticketPriorities": [CommonDropdownDto.from_dict(_item) for _item in obj["ticketPriorities"]] if obj.get("ticketPriorities") is not None else None,
            "proxmoxRoles": [CommonDropdownDto.from_dict(_item) for _item in obj["proxmoxRoles"]] if obj.get("proxmoxRoles") is not None else None
        })
        return _obj


