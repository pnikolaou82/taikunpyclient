# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ZededaInterfaceCommand(BaseModel):
    """
    ZededaInterfaceCommand
    """ # noqa: E501
    api_url: Optional[StrictStr] = Field(default=None, alias="apiUrl")
    api_token: Optional[StrictStr] = Field(default=None, alias="apiToken")
    project: Optional[StrictStr] = None
    edge_node: Optional[StrictStr] = Field(default=None, alias="edgeNode")
    __properties: ClassVar[List[str]] = ["apiUrl", "apiToken", "project", "edgeNode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ZededaInterfaceCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if api_url (nullable) is None
        # and model_fields_set contains the field
        if self.api_url is None and "api_url" in self.model_fields_set:
            _dict['apiUrl'] = None

        # set to None if api_token (nullable) is None
        # and model_fields_set contains the field
        if self.api_token is None and "api_token" in self.model_fields_set:
            _dict['apiToken'] = None

        # set to None if project (nullable) is None
        # and model_fields_set contains the field
        if self.project is None and "project" in self.model_fields_set:
            _dict['project'] = None

        # set to None if edge_node (nullable) is None
        # and model_fields_set contains the field
        if self.edge_node is None and "edge_node" in self.model_fields_set:
            _dict['edgeNode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ZededaInterfaceCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiUrl": obj.get("apiUrl"),
            "apiToken": obj.get("apiToken"),
            "project": obj.get("project"),
            "edgeNode": obj.get("edgeNode")
        })
        return _obj


