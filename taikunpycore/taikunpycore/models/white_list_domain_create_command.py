# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.white_list_domain_create_dto import WhiteListDomainCreateDto
from typing import Optional, Set
from typing_extensions import Self

class WhiteListDomainCreateCommand(BaseModel):
    """
    WhiteListDomainCreateCommand
    """ # noqa: E501
    white_list_domains: Optional[List[WhiteListDomainCreateDto]] = Field(default=None, alias="whiteListDomains")
    partner_id: Optional[StrictInt] = Field(default=None, alias="partnerId")
    __properties: ClassVar[List[str]] = ["whiteListDomains", "partnerId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WhiteListDomainCreateCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in white_list_domains (list)
        _items = []
        if self.white_list_domains:
            for _item_white_list_domains in self.white_list_domains:
                if _item_white_list_domains:
                    _items.append(_item_white_list_domains.to_dict())
            _dict['whiteListDomains'] = _items
        # set to None if white_list_domains (nullable) is None
        # and model_fields_set contains the field
        if self.white_list_domains is None and "white_list_domains" in self.model_fields_set:
            _dict['whiteListDomains'] = None

        # set to None if partner_id (nullable) is None
        # and model_fields_set contains the field
        if self.partner_id is None and "partner_id" in self.model_fields_set:
            _dict['partnerId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WhiteListDomainCreateCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "whiteListDomains": [WhiteListDomainCreateDto.from_dict(_item) for _item in obj["whiteListDomains"]] if obj.get("whiteListDomains") is not None else None,
            "partnerId": obj.get("partnerId")
        })
        return _obj


