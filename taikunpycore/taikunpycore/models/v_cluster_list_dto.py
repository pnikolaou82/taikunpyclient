# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.button_status_dto import ButtonStatusDto
from taikunpycore.models.cloud_type import CloudType
from taikunpycore.models.project_health import ProjectHealth
from taikunpycore.models.project_status import ProjectStatus
from typing import Optional, Set
from typing_extensions import Self

class VClusterListDto(BaseModel):
    """
    VClusterListDto
    """ # noqa: E501
    id: Optional[StrictInt]
    name: Optional[StrictStr]
    is_virtual_cluster: Optional[StrictBool] = Field(alias="isVirtualCluster")
    is_locked: Optional[StrictBool] = Field(alias="isLocked")
    has_kube_config_file: Optional[StrictBool] = Field(alias="hasKubeConfigFile")
    is_maintenance_mode_enabled: Optional[StrictBool] = Field(alias="isMaintenanceModeEnabled")
    organization_name: Optional[StrictStr] = Field(alias="organizationName")
    organization_id: Optional[StrictInt] = Field(alias="organizationId")
    kubernetes_version: Optional[StrictStr] = Field(alias="kubernetesVersion")
    created_at: Optional[StrictStr] = Field(alias="createdAt")
    created_by: Optional[StrictStr] = Field(alias="createdBy")
    last_modified: Optional[StrictStr] = Field(alias="lastModified")
    last_modified_by: Optional[StrictStr] = Field(alias="lastModifiedBy")
    alerts_count: Optional[StrictInt] = Field(alias="alertsCount")
    expired_at: Optional[StrictStr] = Field(alias="expiredAt")
    delete_on_expiration: Optional[StrictBool] = Field(alias="deleteOnExpiration")
    wasm_enabled: Optional[StrictBool] = Field(alias="wasmEnabled")
    alerting_profile_id: Optional[StrictInt] = Field(alias="alertingProfileId")
    alerting_profile_name: Optional[StrictStr] = Field(alias="alertingProfileName")
    access_ip: Optional[StrictStr] = Field(alias="accessIp")
    cloud_type: CloudType = Field(alias="cloudType")
    status: ProjectStatus
    health: ProjectHealth
    lock_button: ButtonStatusDto = Field(alias="lockButton")
    unlock_button: ButtonStatusDto = Field(alias="unlockButton")
    delete_button: ButtonStatusDto = Field(alias="deleteButton")
    kube_info_button: ButtonStatusDto = Field(alias="kubeInfoButton")
    set_expiration_date_button: ButtonStatusDto = Field(alias="setExpirationDateButton")
    reset_status_button: ButtonStatusDto = Field(alias="resetStatusButton")
    __properties: ClassVar[List[str]] = ["id", "name", "isVirtualCluster", "isLocked", "hasKubeConfigFile", "isMaintenanceModeEnabled", "organizationName", "organizationId", "kubernetesVersion", "createdAt", "createdBy", "lastModified", "lastModifiedBy", "alertsCount", "expiredAt", "deleteOnExpiration", "wasmEnabled", "alertingProfileId", "alertingProfileName", "accessIp", "cloudType", "status", "health", "lockButton", "unlockButton", "deleteButton", "kubeInfoButton", "setExpirationDateButton", "resetStatusButton"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VClusterListDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of lock_button
        if self.lock_button:
            _dict['lockButton'] = self.lock_button.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unlock_button
        if self.unlock_button:
            _dict['unlockButton'] = self.unlock_button.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_button
        if self.delete_button:
            _dict['deleteButton'] = self.delete_button.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kube_info_button
        if self.kube_info_button:
            _dict['kubeInfoButton'] = self.kube_info_button.to_dict()
        # override the default output from pydantic by calling `to_dict()` of set_expiration_date_button
        if self.set_expiration_date_button:
            _dict['setExpirationDateButton'] = self.set_expiration_date_button.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reset_status_button
        if self.reset_status_button:
            _dict['resetStatusButton'] = self.reset_status_button.to_dict()
        # set to None if alerting_profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.alerting_profile_id is None and "alerting_profile_id" in self.model_fields_set:
            _dict['alertingProfileId'] = None

        # set to None if alerting_profile_name (nullable) is None
        # and model_fields_set contains the field
        if self.alerting_profile_name is None and "alerting_profile_name" in self.model_fields_set:
            _dict['alertingProfileName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VClusterListDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "isVirtualCluster": obj.get("isVirtualCluster"),
            "isLocked": obj.get("isLocked"),
            "hasKubeConfigFile": obj.get("hasKubeConfigFile"),
            "isMaintenanceModeEnabled": obj.get("isMaintenanceModeEnabled"),
            "organizationName": obj.get("organizationName"),
            "organizationId": obj.get("organizationId"),
            "kubernetesVersion": obj.get("kubernetesVersion"),
            "createdAt": obj.get("createdAt"),
            "createdBy": obj.get("createdBy"),
            "lastModified": obj.get("lastModified"),
            "lastModifiedBy": obj.get("lastModifiedBy"),
            "alertsCount": obj.get("alertsCount"),
            "expiredAt": obj.get("expiredAt"),
            "deleteOnExpiration": obj.get("deleteOnExpiration"),
            "wasmEnabled": obj.get("wasmEnabled"),
            "alertingProfileId": obj.get("alertingProfileId"),
            "alertingProfileName": obj.get("alertingProfileName"),
            "accessIp": obj.get("accessIp"),
            "cloudType": obj.get("cloudType"),
            "status": obj.get("status"),
            "health": obj.get("health"),
            "lockButton": ButtonStatusDto.from_dict(obj["lockButton"]) if obj.get("lockButton") is not None else None,
            "unlockButton": ButtonStatusDto.from_dict(obj["unlockButton"]) if obj.get("unlockButton") is not None else None,
            "deleteButton": ButtonStatusDto.from_dict(obj["deleteButton"]) if obj.get("deleteButton") is not None else None,
            "kubeInfoButton": ButtonStatusDto.from_dict(obj["kubeInfoButton"]) if obj.get("kubeInfoButton") is not None else None,
            "setExpirationDateButton": ButtonStatusDto.from_dict(obj["setExpirationDateButton"]) if obj.get("setExpirationDateButton") is not None else None,
            "resetStatusButton": ButtonStatusDto.from_dict(obj["resetStatusButton"]) if obj.get("resetStatusButton") is not None else None
        })
        return _obj


