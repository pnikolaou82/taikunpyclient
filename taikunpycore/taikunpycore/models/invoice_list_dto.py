# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class InvoiceListDto(BaseModel):
    """
    InvoiceListDto
    """ # noqa: E501
    id: Optional[StrictInt]
    name: Optional[StrictStr]
    start_date: Optional[StrictStr] = Field(alias="startDate")
    end_date: Optional[StrictStr] = Field(alias="endDate")
    required_payment_action: Optional[StrictBool] = Field(alias="requiredPaymentAction")
    is_paid: Optional[StrictBool] = Field(alias="isPaid")
    invoice_id: Optional[StrictStr] = Field(alias="invoiceId")
    subscription_type: Optional[StrictStr] = Field(alias="subscriptionType")
    subscription_name: Optional[StrictStr] = Field(alias="subscriptionName")
    price: Union[StrictFloat, StrictInt]
    organization_id: Optional[StrictInt] = Field(alias="organizationId")
    organization_name: Optional[StrictStr] = Field(alias="organizationName")
    invoice_number: Optional[StrictStr] = Field(alias="invoiceNumber")
    organization_subscription_id: Optional[StrictInt] = Field(alias="organizationSubscriptionId")
    __properties: ClassVar[List[str]] = ["id", "name", "startDate", "endDate", "requiredPaymentAction", "isPaid", "invoiceId", "subscriptionType", "subscriptionName", "price", "organizationId", "organizationName", "invoiceNumber", "organizationSubscriptionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceListDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['startDate'] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['endDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceListDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "requiredPaymentAction": obj.get("requiredPaymentAction"),
            "isPaid": obj.get("isPaid"),
            "invoiceId": obj.get("invoiceId"),
            "subscriptionType": obj.get("subscriptionType"),
            "subscriptionName": obj.get("subscriptionName"),
            "price": obj.get("price"),
            "organizationId": obj.get("organizationId"),
            "organizationName": obj.get("organizationName"),
            "invoiceNumber": obj.get("invoiceNumber"),
            "organizationSubscriptionId": obj.get("organizationSubscriptionId")
        })
        return _obj


