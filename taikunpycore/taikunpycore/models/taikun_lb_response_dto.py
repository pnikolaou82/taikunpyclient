# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TaikunLbResponseDto(BaseModel):
    """
    TaikunLbResponseDto
    """ # noqa: E501
    id: Optional[StrictInt]
    public_ip: Optional[StrictStr] = Field(alias="publicIp")
    virtual_lb_ip_first: Optional[StrictStr] = Field(alias="virtualLbIpFirst")
    virtual_lb_ip_second: Optional[StrictStr] = Field(alias="virtualLbIpSecond")
    private_ip_first: Optional[StrictStr] = Field(alias="privateIpFirst")
    private_ip_second: Optional[StrictStr] = Field(alias="privateIpSecond")
    virtual_router_id: Optional[StrictStr] = Field(alias="virtualRouterId")
    hypervisor_first: Optional[StrictStr] = Field(alias="hypervisorFirst")
    hypervisor_second: Optional[StrictStr] = Field(alias="hypervisorSecond")
    svc_name: Optional[StrictStr] = Field(alias="svcName")
    svc_namespace: Optional[StrictStr] = Field(alias="svcNamespace")
    project_name: Optional[StrictStr] = Field(alias="projectName")
    __properties: ClassVar[List[str]] = ["id", "publicIp", "virtualLbIpFirst", "virtualLbIpSecond", "privateIpFirst", "privateIpSecond", "virtualRouterId", "hypervisorFirst", "hypervisorSecond", "svcName", "svcNamespace", "projectName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaikunLbResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if public_ip (nullable) is None
        # and model_fields_set contains the field
        if self.public_ip is None and "public_ip" in self.model_fields_set:
            _dict['publicIp'] = None

        # set to None if virtual_lb_ip_first (nullable) is None
        # and model_fields_set contains the field
        if self.virtual_lb_ip_first is None and "virtual_lb_ip_first" in self.model_fields_set:
            _dict['virtualLbIpFirst'] = None

        # set to None if virtual_lb_ip_second (nullable) is None
        # and model_fields_set contains the field
        if self.virtual_lb_ip_second is None and "virtual_lb_ip_second" in self.model_fields_set:
            _dict['virtualLbIpSecond'] = None

        # set to None if private_ip_first (nullable) is None
        # and model_fields_set contains the field
        if self.private_ip_first is None and "private_ip_first" in self.model_fields_set:
            _dict['privateIpFirst'] = None

        # set to None if private_ip_second (nullable) is None
        # and model_fields_set contains the field
        if self.private_ip_second is None and "private_ip_second" in self.model_fields_set:
            _dict['privateIpSecond'] = None

        # set to None if virtual_router_id (nullable) is None
        # and model_fields_set contains the field
        if self.virtual_router_id is None and "virtual_router_id" in self.model_fields_set:
            _dict['virtualRouterId'] = None

        # set to None if hypervisor_first (nullable) is None
        # and model_fields_set contains the field
        if self.hypervisor_first is None and "hypervisor_first" in self.model_fields_set:
            _dict['hypervisorFirst'] = None

        # set to None if hypervisor_second (nullable) is None
        # and model_fields_set contains the field
        if self.hypervisor_second is None and "hypervisor_second" in self.model_fields_set:
            _dict['hypervisorSecond'] = None

        # set to None if svc_name (nullable) is None
        # and model_fields_set contains the field
        if self.svc_name is None and "svc_name" in self.model_fields_set:
            _dict['svcName'] = None

        # set to None if svc_namespace (nullable) is None
        # and model_fields_set contains the field
        if self.svc_namespace is None and "svc_namespace" in self.model_fields_set:
            _dict['svcNamespace'] = None

        # set to None if project_name (nullable) is None
        # and model_fields_set contains the field
        if self.project_name is None and "project_name" in self.model_fields_set:
            _dict['projectName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaikunLbResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "publicIp": obj.get("publicIp"),
            "virtualLbIpFirst": obj.get("virtualLbIpFirst"),
            "virtualLbIpSecond": obj.get("virtualLbIpSecond"),
            "privateIpFirst": obj.get("privateIpFirst"),
            "privateIpSecond": obj.get("privateIpSecond"),
            "virtualRouterId": obj.get("virtualRouterId"),
            "hypervisorFirst": obj.get("hypervisorFirst"),
            "hypervisorSecond": obj.get("hypervisorSecond"),
            "svcName": obj.get("svcName"),
            "svcNamespace": obj.get("svcNamespace"),
            "projectName": obj.get("projectName")
        })
        return _obj


