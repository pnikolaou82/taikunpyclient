# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.repository import Repository
from taikunpycore.models.security_report_summary import SecurityReportSummary
from typing import Optional, Set
from typing_extensions import Self

class AvailablePackagesDto(BaseModel):
    """
    AvailablePackagesDto
    """ # noqa: E501
    package_id: Optional[StrictStr] = Field(default=None, alias="packageId")
    catalog_id: Optional[StrictInt] = Field(default=None, alias="catalogId")
    catalog_app_id: Optional[StrictInt] = Field(default=None, alias="catalogAppId")
    installed_instance_count: Optional[StrictInt] = Field(default=None, alias="installedInstanceCount")
    name: Optional[StrictStr] = None
    normalized_name: Optional[StrictStr] = Field(default=None, alias="normalizedName")
    logo_image_id: Optional[StrictStr] = Field(default=None, alias="logoImageId")
    stars: Optional[StrictInt] = None
    description: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    app_version: Optional[StrictStr] = Field(default=None, alias="appVersion")
    deprecated: Optional[StrictBool] = None
    signed: Optional[StrictBool] = None
    is_locked: Optional[StrictBool] = Field(default=None, alias="isLocked")
    security_report_summary: Optional[SecurityReportSummary] = Field(default=None, alias="securityReportSummary")
    ts: Optional[StrictStr] = None
    repository: Optional[Repository] = None
    is_added: Optional[StrictBool] = Field(default=None, alias="isAdded")
    __properties: ClassVar[List[str]] = ["packageId", "catalogId", "catalogAppId", "installedInstanceCount", "name", "normalizedName", "logoImageId", "stars", "description", "version", "appVersion", "deprecated", "signed", "isLocked", "securityReportSummary", "ts", "repository", "isAdded"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AvailablePackagesDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of security_report_summary
        if self.security_report_summary:
            _dict['securityReportSummary'] = self.security_report_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repository
        if self.repository:
            _dict['repository'] = self.repository.to_dict()
        # set to None if package_id (nullable) is None
        # and model_fields_set contains the field
        if self.package_id is None and "package_id" in self.model_fields_set:
            _dict['packageId'] = None

        # set to None if catalog_app_id (nullable) is None
        # and model_fields_set contains the field
        if self.catalog_app_id is None and "catalog_app_id" in self.model_fields_set:
            _dict['catalogAppId'] = None

        # set to None if installed_instance_count (nullable) is None
        # and model_fields_set contains the field
        if self.installed_instance_count is None and "installed_instance_count" in self.model_fields_set:
            _dict['installedInstanceCount'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if normalized_name (nullable) is None
        # and model_fields_set contains the field
        if self.normalized_name is None and "normalized_name" in self.model_fields_set:
            _dict['normalizedName'] = None

        # set to None if logo_image_id (nullable) is None
        # and model_fields_set contains the field
        if self.logo_image_id is None and "logo_image_id" in self.model_fields_set:
            _dict['logoImageId'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if app_version (nullable) is None
        # and model_fields_set contains the field
        if self.app_version is None and "app_version" in self.model_fields_set:
            _dict['appVersion'] = None

        # set to None if ts (nullable) is None
        # and model_fields_set contains the field
        if self.ts is None and "ts" in self.model_fields_set:
            _dict['ts'] = None

        # set to None if is_added (nullable) is None
        # and model_fields_set contains the field
        if self.is_added is None and "is_added" in self.model_fields_set:
            _dict['isAdded'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AvailablePackagesDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "packageId": obj.get("packageId"),
            "catalogId": obj.get("catalogId"),
            "catalogAppId": obj.get("catalogAppId"),
            "installedInstanceCount": obj.get("installedInstanceCount"),
            "name": obj.get("name"),
            "normalizedName": obj.get("normalizedName"),
            "logoImageId": obj.get("logoImageId"),
            "stars": obj.get("stars"),
            "description": obj.get("description"),
            "version": obj.get("version"),
            "appVersion": obj.get("appVersion"),
            "deprecated": obj.get("deprecated"),
            "signed": obj.get("signed"),
            "isLocked": obj.get("isLocked"),
            "securityReportSummary": SecurityReportSummary.from_dict(obj["securityReportSummary"]) if obj.get("securityReportSummary") is not None else None,
            "ts": obj.get("ts"),
            "repository": Repository.from_dict(obj["repository"]) if obj.get("repository") is not None else None,
            "isAdded": obj.get("isAdded")
        })
        return _obj


