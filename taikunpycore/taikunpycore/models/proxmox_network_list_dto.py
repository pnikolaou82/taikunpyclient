# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProxmoxNetworkListDto(BaseModel):
    """
    ProxmoxNetworkListDto
    """ # noqa: E501
    bridge: Optional[StrictStr]
    gateway: Optional[StrictStr]
    ip_address: Optional[StrictStr] = Field(alias="ipAddress")
    net_mask: Optional[StrictInt] = Field(alias="netMask")
    begin_allocation_range: Optional[StrictStr] = Field(alias="beginAllocationRange")
    end_allocation_range: Optional[StrictStr] = Field(alias="endAllocationRange")
    is_private: Optional[StrictBool] = Field(alias="isPrivate")
    is_virtual_lb_network: Optional[StrictBool] = Field(alias="isVirtualLbNetwork")
    __properties: ClassVar[List[str]] = ["bridge", "gateway", "ipAddress", "netMask", "beginAllocationRange", "endAllocationRange", "isPrivate", "isVirtualLbNetwork"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProxmoxNetworkListDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if bridge (nullable) is None
        # and model_fields_set contains the field
        if self.bridge is None and "bridge" in self.model_fields_set:
            _dict['bridge'] = None

        # set to None if gateway (nullable) is None
        # and model_fields_set contains the field
        if self.gateway is None and "gateway" in self.model_fields_set:
            _dict['gateway'] = None

        # set to None if ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.ip_address is None and "ip_address" in self.model_fields_set:
            _dict['ipAddress'] = None

        # set to None if begin_allocation_range (nullable) is None
        # and model_fields_set contains the field
        if self.begin_allocation_range is None and "begin_allocation_range" in self.model_fields_set:
            _dict['beginAllocationRange'] = None

        # set to None if end_allocation_range (nullable) is None
        # and model_fields_set contains the field
        if self.end_allocation_range is None and "end_allocation_range" in self.model_fields_set:
            _dict['endAllocationRange'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProxmoxNetworkListDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bridge": obj.get("bridge"),
            "gateway": obj.get("gateway"),
            "ipAddress": obj.get("ipAddress"),
            "netMask": obj.get("netMask"),
            "beginAllocationRange": obj.get("beginAllocationRange"),
            "endAllocationRange": obj.get("endAllocationRange"),
            "isPrivate": obj.get("isPrivate"),
            "isVirtualLbNetwork": obj.get("isVirtualLbNetwork")
        })
        return _obj


