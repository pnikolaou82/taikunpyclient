# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ArtifactRepositoryDto(BaseModel):
    """
    ArtifactRepositoryDto
    """ # noqa: E501
    repository_id: Optional[StrictStr] = Field(alias="repositoryId")
    app_repo_id: Optional[StrictInt] = Field(alias="appRepoId")
    name: Optional[StrictStr]
    display_name: Optional[StrictStr] = Field(alias="displayName")
    url: Optional[StrictStr]
    organization_name: Optional[StrictStr] = Field(alias="organizationName")
    disabled: Optional[StrictBool]
    verified_publisher: Optional[StrictBool] = Field(alias="verifiedPublisher")
    official: Optional[StrictBool]
    is_bound: Optional[StrictBool] = Field(alias="isBound")
    is_private: Optional[StrictBool] = Field(default=None, alias="isPrivate")
    is_taikun: Optional[StrictBool] = Field(alias="isTaikun")
    has_catalog_app: Optional[StrictBool] = Field(alias="hasCatalogApp")
    __properties: ClassVar[List[str]] = ["repositoryId", "appRepoId", "name", "displayName", "url", "organizationName", "disabled", "verifiedPublisher", "official", "isBound", "isPrivate", "isTaikun", "hasCatalogApp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArtifactRepositoryDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if repository_id (nullable) is None
        # and model_fields_set contains the field
        if self.repository_id is None and "repository_id" in self.model_fields_set:
            _dict['repositoryId'] = None

        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArtifactRepositoryDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "repositoryId": obj.get("repositoryId"),
            "appRepoId": obj.get("appRepoId"),
            "name": obj.get("name"),
            "displayName": obj.get("displayName"),
            "url": obj.get("url"),
            "organizationName": obj.get("organizationName"),
            "disabled": obj.get("disabled"),
            "verifiedPublisher": obj.get("verifiedPublisher"),
            "official": obj.get("official"),
            "isBound": obj.get("isBound"),
            "isPrivate": obj.get("isPrivate"),
            "isTaikun": obj.get("isTaikun"),
            "hasCatalogApp": obj.get("hasCatalogApp")
        })
        return _obj


