# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from taikunpycore.models.partner_details_for_organizations_dto import PartnerDetailsForOrganizationsDto
from taikunpycore.models.prometheus_entity import PrometheusEntity
from typing import Optional, Set
from typing_extensions import Self

class OrganizationDetailsDto(BaseModel):
    """
    OrganizationDetailsDto
    """ # noqa: E501
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    full_name: Optional[StrictStr] = Field(default=None, alias="fullName")
    email: Optional[StrictStr] = None
    billing_email: Optional[StrictStr] = Field(default=None, alias="billingEmail")
    phone: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    vat_number: Optional[StrictStr] = Field(default=None, alias="vatNumber")
    address: Optional[StrictStr] = None
    is_eligible_update_subscription: Optional[StrictBool] = Field(default=None, alias="isEligibleUpdateSubscription")
    is_locked: Optional[StrictBool] = Field(default=None, alias="isLocked")
    is_read_only: Optional[StrictBool] = Field(default=None, alias="isReadOnly")
    is_new: Optional[StrictBool] = Field(default=None, alias="isNew")
    trial_ended: Optional[StrictBool] = Field(default=None, alias="trialEnded")
    users: Optional[StrictInt] = None
    projects: Optional[StrictInt] = None
    servers: Optional[StrictInt] = None
    cloud_credentials: Optional[StrictInt] = Field(default=None, alias="cloudCredentials")
    created_at: Optional[StrictStr] = Field(default=None, alias="createdAt")
    partner_id: Optional[StrictInt] = Field(default=None, alias="partnerId")
    partner_name: Optional[StrictStr] = Field(default=None, alias="partnerName")
    partner: Optional[PartnerDetailsForOrganizationsDto] = None
    discount_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="discountRate")
    bound_rules: Optional[List[PrometheusEntity]] = Field(default=None, alias="boundRules")
    __properties: ClassVar[List[str]] = ["id", "name", "fullName", "email", "billingEmail", "phone", "country", "city", "vatNumber", "address", "isEligibleUpdateSubscription", "isLocked", "isReadOnly", "isNew", "trialEnded", "users", "projects", "servers", "cloudCredentials", "createdAt", "partnerId", "partnerName", "partner", "discountRate", "boundRules"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationDetailsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of partner
        if self.partner:
            _dict['partner'] = self.partner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in bound_rules (list)
        _items = []
        if self.bound_rules:
            for _item_bound_rules in self.bound_rules:
                if _item_bound_rules:
                    _items.append(_item_bound_rules.to_dict())
            _dict['boundRules'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['fullName'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if billing_email (nullable) is None
        # and model_fields_set contains the field
        if self.billing_email is None and "billing_email" in self.model_fields_set:
            _dict['billingEmail'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if vat_number (nullable) is None
        # and model_fields_set contains the field
        if self.vat_number is None and "vat_number" in self.model_fields_set:
            _dict['vatNumber'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['createdAt'] = None

        # set to None if partner_id (nullable) is None
        # and model_fields_set contains the field
        if self.partner_id is None and "partner_id" in self.model_fields_set:
            _dict['partnerId'] = None

        # set to None if partner_name (nullable) is None
        # and model_fields_set contains the field
        if self.partner_name is None and "partner_name" in self.model_fields_set:
            _dict['partnerName'] = None

        # set to None if bound_rules (nullable) is None
        # and model_fields_set contains the field
        if self.bound_rules is None and "bound_rules" in self.model_fields_set:
            _dict['boundRules'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationDetailsDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "fullName": obj.get("fullName"),
            "email": obj.get("email"),
            "billingEmail": obj.get("billingEmail"),
            "phone": obj.get("phone"),
            "country": obj.get("country"),
            "city": obj.get("city"),
            "vatNumber": obj.get("vatNumber"),
            "address": obj.get("address"),
            "isEligibleUpdateSubscription": obj.get("isEligibleUpdateSubscription"),
            "isLocked": obj.get("isLocked"),
            "isReadOnly": obj.get("isReadOnly"),
            "isNew": obj.get("isNew"),
            "trialEnded": obj.get("trialEnded"),
            "users": obj.get("users"),
            "projects": obj.get("projects"),
            "servers": obj.get("servers"),
            "cloudCredentials": obj.get("cloudCredentials"),
            "createdAt": obj.get("createdAt"),
            "partnerId": obj.get("partnerId"),
            "partnerName": obj.get("partnerName"),
            "partner": PartnerDetailsForOrganizationsDto.from_dict(obj["partner"]) if obj.get("partner") is not None else None,
            "discountRate": obj.get("discountRate"),
            "boundRules": [PrometheusEntity.from_dict(_item) for _item in obj["boundRules"]] if obj.get("boundRules") is not None else None
        })
        return _obj


