# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.metadata import Metadata
from taikunpycore.models.project_infracost import ProjectInfracost
from taikunpycore.models.summary import Summary
from typing import Optional, Set
from typing_extensions import Self

class EstimatedInfracost(BaseModel):
    """
    EstimatedInfracost
    """ # noqa: E501
    version: Optional[StrictStr] = None
    metadata: Optional[Metadata] = None
    currency: Optional[StrictStr] = None
    projects: Optional[List[ProjectInfracost]] = None
    total_hourly_cost: Optional[StrictStr] = Field(default=None, alias="totalHourlyCost")
    total_monthly_cost: Optional[StrictStr] = Field(default=None, alias="totalMonthlyCost")
    total_monthly_usage_cost: Optional[StrictStr] = Field(default=None, alias="totalMonthlyUsageCost")
    past_total_hourly_cost: Optional[StrictStr] = Field(default=None, alias="pastTotalHourlyCost")
    past_total_monthly_cost: Optional[StrictStr] = Field(default=None, alias="pastTotalMonthlyCost")
    past_total_monthly_usage_cost: Optional[StrictStr] = Field(default=None, alias="pastTotalMonthlyUsageCost")
    diff_total_hourly_cost: Optional[StrictStr] = Field(default=None, alias="diffTotalHourlyCost")
    diff_total_monthly_cost: Optional[StrictStr] = Field(default=None, alias="diffTotalMonthlyCost")
    diff_total_monthly_usage_cost: Optional[StrictStr] = Field(default=None, alias="diffTotalMonthlyUsageCost")
    time_generated: Optional[StrictStr] = Field(default=None, alias="timeGenerated")
    summary: Optional[Summary] = None
    __properties: ClassVar[List[str]] = ["version", "metadata", "currency", "projects", "totalHourlyCost", "totalMonthlyCost", "totalMonthlyUsageCost", "pastTotalHourlyCost", "pastTotalMonthlyCost", "pastTotalMonthlyUsageCost", "diffTotalHourlyCost", "diffTotalMonthlyCost", "diffTotalMonthlyUsageCost", "timeGenerated", "summary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EstimatedInfracost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in projects (list)
        _items = []
        if self.projects:
            for _item_projects in self.projects:
                if _item_projects:
                    _items.append(_item_projects.to_dict())
            _dict['projects'] = _items
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if projects (nullable) is None
        # and model_fields_set contains the field
        if self.projects is None and "projects" in self.model_fields_set:
            _dict['projects'] = None

        # set to None if total_hourly_cost (nullable) is None
        # and model_fields_set contains the field
        if self.total_hourly_cost is None and "total_hourly_cost" in self.model_fields_set:
            _dict['totalHourlyCost'] = None

        # set to None if total_monthly_cost (nullable) is None
        # and model_fields_set contains the field
        if self.total_monthly_cost is None and "total_monthly_cost" in self.model_fields_set:
            _dict['totalMonthlyCost'] = None

        # set to None if total_monthly_usage_cost (nullable) is None
        # and model_fields_set contains the field
        if self.total_monthly_usage_cost is None and "total_monthly_usage_cost" in self.model_fields_set:
            _dict['totalMonthlyUsageCost'] = None

        # set to None if past_total_hourly_cost (nullable) is None
        # and model_fields_set contains the field
        if self.past_total_hourly_cost is None and "past_total_hourly_cost" in self.model_fields_set:
            _dict['pastTotalHourlyCost'] = None

        # set to None if past_total_monthly_cost (nullable) is None
        # and model_fields_set contains the field
        if self.past_total_monthly_cost is None and "past_total_monthly_cost" in self.model_fields_set:
            _dict['pastTotalMonthlyCost'] = None

        # set to None if past_total_monthly_usage_cost (nullable) is None
        # and model_fields_set contains the field
        if self.past_total_monthly_usage_cost is None and "past_total_monthly_usage_cost" in self.model_fields_set:
            _dict['pastTotalMonthlyUsageCost'] = None

        # set to None if diff_total_hourly_cost (nullable) is None
        # and model_fields_set contains the field
        if self.diff_total_hourly_cost is None and "diff_total_hourly_cost" in self.model_fields_set:
            _dict['diffTotalHourlyCost'] = None

        # set to None if diff_total_monthly_cost (nullable) is None
        # and model_fields_set contains the field
        if self.diff_total_monthly_cost is None and "diff_total_monthly_cost" in self.model_fields_set:
            _dict['diffTotalMonthlyCost'] = None

        # set to None if diff_total_monthly_usage_cost (nullable) is None
        # and model_fields_set contains the field
        if self.diff_total_monthly_usage_cost is None and "diff_total_monthly_usage_cost" in self.model_fields_set:
            _dict['diffTotalMonthlyUsageCost'] = None

        # set to None if time_generated (nullable) is None
        # and model_fields_set contains the field
        if self.time_generated is None and "time_generated" in self.model_fields_set:
            _dict['timeGenerated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EstimatedInfracost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "version": obj.get("version"),
            "metadata": Metadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "currency": obj.get("currency"),
            "projects": [ProjectInfracost.from_dict(_item) for _item in obj["projects"]] if obj.get("projects") is not None else None,
            "totalHourlyCost": obj.get("totalHourlyCost"),
            "totalMonthlyCost": obj.get("totalMonthlyCost"),
            "totalMonthlyUsageCost": obj.get("totalMonthlyUsageCost"),
            "pastTotalHourlyCost": obj.get("pastTotalHourlyCost"),
            "pastTotalMonthlyCost": obj.get("pastTotalMonthlyCost"),
            "pastTotalMonthlyUsageCost": obj.get("pastTotalMonthlyUsageCost"),
            "diffTotalHourlyCost": obj.get("diffTotalHourlyCost"),
            "diffTotalMonthlyCost": obj.get("diffTotalMonthlyCost"),
            "diffTotalMonthlyUsageCost": obj.get("diffTotalMonthlyUsageCost"),
            "timeGenerated": obj.get("timeGenerated"),
            "summary": Summary.from_dict(obj["summary"]) if obj.get("summary") is not None else None
        })
        return _obj


