# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class KubeConfigForUserDto(BaseModel):
    """
    KubeConfigForUserDto
    """ # noqa: E501
    id: Optional[StrictInt]
    user_id: Optional[StrictStr] = Field(alias="userId")
    display_name: Optional[StrictStr] = Field(alias="displayName")
    project_id: Optional[StrictInt] = Field(alias="projectId")
    organization_id: Optional[StrictInt] = Field(alias="organizationId")
    partner_id: Optional[StrictInt] = Field(alias="partnerId")
    project_name: Optional[StrictStr] = Field(alias="projectName")
    is_accessible_for_all: Optional[StrictBool] = Field(alias="isAccessibleForAll")
    is_accessible_for_manager: Optional[StrictBool] = Field(alias="isAccessibleForManager")
    kube_config_role_name: Optional[StrictStr] = Field(alias="kubeConfigRoleName")
    created_by: Optional[StrictStr] = Field(alias="createdBy")
    created_at: Optional[StrictStr] = Field(alias="createdAt")
    namespace: Optional[StrictStr]
    expiration_date: Optional[StrictStr] = Field(alias="expirationDate")
    can_download: Optional[StrictBool] = Field(alias="canDownload")
    can_access_terminal: Optional[StrictBool] = Field(alias="canAccessTerminal")
    can_delete: Optional[StrictBool] = Field(alias="canDelete")
    __properties: ClassVar[List[str]] = ["id", "userId", "displayName", "projectId", "organizationId", "partnerId", "projectName", "isAccessibleForAll", "isAccessibleForManager", "kubeConfigRoleName", "createdBy", "createdAt", "namespace", "expirationDate", "canDownload", "canAccessTerminal", "canDelete"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KubeConfigForUserDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['userId'] = None

        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['displayName'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['createdAt'] = None

        # set to None if namespace (nullable) is None
        # and model_fields_set contains the field
        if self.namespace is None and "namespace" in self.model_fields_set:
            _dict['namespace'] = None

        # set to None if expiration_date (nullable) is None
        # and model_fields_set contains the field
        if self.expiration_date is None and "expiration_date" in self.model_fields_set:
            _dict['expirationDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KubeConfigForUserDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "userId": obj.get("userId"),
            "displayName": obj.get("displayName"),
            "projectId": obj.get("projectId"),
            "organizationId": obj.get("organizationId"),
            "partnerId": obj.get("partnerId"),
            "projectName": obj.get("projectName"),
            "isAccessibleForAll": obj.get("isAccessibleForAll"),
            "isAccessibleForManager": obj.get("isAccessibleForManager"),
            "kubeConfigRoleName": obj.get("kubeConfigRoleName"),
            "createdBy": obj.get("createdBy"),
            "createdAt": obj.get("createdAt"),
            "namespace": obj.get("namespace"),
            "expirationDate": obj.get("expirationDate"),
            "canDownload": obj.get("canDownload"),
            "canAccessTerminal": obj.get("canAccessTerminal"),
            "canDelete": obj.get("canDelete")
        })
        return _obj


