# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class KubernetesEventCreateDto(BaseModel):
    """
    KubernetesEventCreateDto
    """ # noqa: E501
    type: Optional[StrictStr] = None
    reason: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    metadata: Optional[Any] = None
    source: Optional[Any] = None
    involved_object: Optional[Any] = Field(default=None, alias="involvedObject")
    first_time_stamp: Optional[datetime] = Field(default=None, alias="firstTimeStamp")
    last_time_stamp: Optional[datetime] = Field(default=None, alias="lastTimeStamp")
    count: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["type", "reason", "message", "metadata", "source", "involvedObject", "firstTimeStamp", "lastTimeStamp", "count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KubernetesEventCreateDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if reason (nullable) is None
        # and model_fields_set contains the field
        if self.reason is None and "reason" in self.model_fields_set:
            _dict['reason'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['source'] = None

        # set to None if involved_object (nullable) is None
        # and model_fields_set contains the field
        if self.involved_object is None and "involved_object" in self.model_fields_set:
            _dict['involvedObject'] = None

        # set to None if first_time_stamp (nullable) is None
        # and model_fields_set contains the field
        if self.first_time_stamp is None and "first_time_stamp" in self.model_fields_set:
            _dict['firstTimeStamp'] = None

        # set to None if last_time_stamp (nullable) is None
        # and model_fields_set contains the field
        if self.last_time_stamp is None and "last_time_stamp" in self.model_fields_set:
            _dict['lastTimeStamp'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KubernetesEventCreateDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "reason": obj.get("reason"),
            "message": obj.get("message"),
            "metadata": obj.get("metadata"),
            "source": obj.get("source"),
            "involvedObject": obj.get("involvedObject"),
            "firstTimeStamp": obj.get("firstTimeStamp"),
            "lastTimeStamp": obj.get("lastTimeStamp"),
            "count": obj.get("count")
        })
        return _obj


