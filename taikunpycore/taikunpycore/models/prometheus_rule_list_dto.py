# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from taikunpycore.models.operation_credentials_for_organization_entity import OperationCredentialsForOrganizationEntity
from taikunpycore.models.partner_entity import PartnerEntity
from taikunpycore.models.prometheus_label_list_dto import PrometheusLabelListDto
from taikunpycore.models.prometheus_organization_discount_dto import PrometheusOrganizationDiscountDto
from taikunpycore.models.prometheus_type import PrometheusType
from typing import Optional, Set
from typing_extensions import Self

class PrometheusRuleListDto(BaseModel):
    """
    PrometheusRuleListDto
    """ # noqa: E501
    id: Optional[StrictInt]
    name: Optional[StrictStr]
    password: Optional[StrictStr]
    user_name: Optional[StrictStr] = Field(alias="userName")
    url: Optional[StrictStr]
    metric_name: Optional[StrictStr] = Field(alias="metricName")
    labels: Optional[List[PrometheusLabelListDto]]
    bound_organizations: Optional[List[PrometheusOrganizationDiscountDto]] = Field(alias="boundOrganizations")
    type: PrometheusType
    price: Union[StrictFloat, StrictInt]
    billing_start_date: Optional[StrictStr] = Field(alias="billingStartDate")
    created_at: Optional[StrictStr] = Field(alias="createdAt")
    partner: PartnerEntity
    operation_credential: OperationCredentialsForOrganizationEntity = Field(alias="operationCredential")
    created_by: Optional[StrictStr] = Field(alias="createdBy")
    last_modified: Optional[StrictStr] = Field(alias="lastModified")
    last_modified_by: Optional[StrictStr] = Field(alias="lastModifiedBy")
    __properties: ClassVar[List[str]] = ["id", "name", "password", "userName", "url", "metricName", "labels", "boundOrganizations", "type", "price", "billingStartDate", "createdAt", "partner", "operationCredential", "createdBy", "lastModified", "lastModifiedBy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrometheusRuleListDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bound_organizations (list)
        _items = []
        if self.bound_organizations:
            for _item_bound_organizations in self.bound_organizations:
                if _item_bound_organizations:
                    _items.append(_item_bound_organizations.to_dict())
            _dict['boundOrganizations'] = _items
        # override the default output from pydantic by calling `to_dict()` of partner
        if self.partner:
            _dict['partner'] = self.partner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation_credential
        if self.operation_credential:
            _dict['operationCredential'] = self.operation_credential.to_dict()
        # set to None if metric_name (nullable) is None
        # and model_fields_set contains the field
        if self.metric_name is None and "metric_name" in self.model_fields_set:
            _dict['metricName'] = None

        # set to None if labels (nullable) is None
        # and model_fields_set contains the field
        if self.labels is None and "labels" in self.model_fields_set:
            _dict['labels'] = None

        # set to None if bound_organizations (nullable) is None
        # and model_fields_set contains the field
        if self.bound_organizations is None and "bound_organizations" in self.model_fields_set:
            _dict['boundOrganizations'] = None

        # set to None if billing_start_date (nullable) is None
        # and model_fields_set contains the field
        if self.billing_start_date is None and "billing_start_date" in self.model_fields_set:
            _dict['billingStartDate'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['createdAt'] = None

        # set to None if last_modified (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified is None and "last_modified" in self.model_fields_set:
            _dict['lastModified'] = None

        # set to None if last_modified_by (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_by is None and "last_modified_by" in self.model_fields_set:
            _dict['lastModifiedBy'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrometheusRuleListDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "password": obj.get("password"),
            "userName": obj.get("userName"),
            "url": obj.get("url"),
            "metricName": obj.get("metricName"),
            "labels": [PrometheusLabelListDto.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "boundOrganizations": [PrometheusOrganizationDiscountDto.from_dict(_item) for _item in obj["boundOrganizations"]] if obj.get("boundOrganizations") is not None else None,
            "type": obj.get("type"),
            "price": obj.get("price"),
            "billingStartDate": obj.get("billingStartDate"),
            "createdAt": obj.get("createdAt"),
            "partner": PartnerEntity.from_dict(obj["partner"]) if obj.get("partner") is not None else None,
            "operationCredential": OperationCredentialsForOrganizationEntity.from_dict(obj["operationCredential"]) if obj.get("operationCredential") is not None else None,
            "createdBy": obj.get("createdBy"),
            "lastModified": obj.get("lastModified"),
            "lastModifiedBy": obj.get("lastModifiedBy")
        })
        return _obj


