# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from taikunpycore.models.button_status_dto import ButtonStatusDto
from typing import Optional, Set
from typing_extensions import Self

class ImportedAsFullyManagedVisibility(BaseModel):
    """
    ImportedAsFullyManagedVisibility
    """ # noqa: E501
    lock: ButtonStatusDto
    unlock: ButtonStatusDto
    add_v_cluster: ButtonStatusDto = Field(alias="addVCluster")
    attach_alerting_profile: ButtonStatusDto = Field(alias="attachAlertingProfile")
    detach_alerting_profile: ButtonStatusDto = Field(alias="detachAlertingProfile")
    enable_monitoring: ButtonStatusDto = Field(alias="enableMonitoring")
    disable_monitoring: ButtonStatusDto = Field(alias="disableMonitoring")
    enable_ai: ButtonStatusDto = Field(alias="enableAi")
    disable_ai: ButtonStatusDto = Field(alias="disableAi")
    enable_opa: ButtonStatusDto = Field(alias="enableOpa")
    disable_opa: ButtonStatusDto = Field(alias="disableOpa")
    enable_backup: ButtonStatusDto = Field(alias="enableBackup")
    disable_backup: ButtonStatusDto = Field(alias="disableBackup")
    ai_assistant: ButtonStatusDto = Field(alias="aiAssistant")
    __properties: ClassVar[List[str]] = ["lock", "unlock", "addVCluster", "attachAlertingProfile", "detachAlertingProfile", "enableMonitoring", "disableMonitoring", "enableAi", "disableAi", "enableOpa", "disableOpa", "enableBackup", "disableBackup", "aiAssistant"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportedAsFullyManagedVisibility from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of lock
        if self.lock:
            _dict['lock'] = self.lock.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unlock
        if self.unlock:
            _dict['unlock'] = self.unlock.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_v_cluster
        if self.add_v_cluster:
            _dict['addVCluster'] = self.add_v_cluster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attach_alerting_profile
        if self.attach_alerting_profile:
            _dict['attachAlertingProfile'] = self.attach_alerting_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of detach_alerting_profile
        if self.detach_alerting_profile:
            _dict['detachAlertingProfile'] = self.detach_alerting_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enable_monitoring
        if self.enable_monitoring:
            _dict['enableMonitoring'] = self.enable_monitoring.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disable_monitoring
        if self.disable_monitoring:
            _dict['disableMonitoring'] = self.disable_monitoring.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enable_ai
        if self.enable_ai:
            _dict['enableAi'] = self.enable_ai.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disable_ai
        if self.disable_ai:
            _dict['disableAi'] = self.disable_ai.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enable_opa
        if self.enable_opa:
            _dict['enableOpa'] = self.enable_opa.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disable_opa
        if self.disable_opa:
            _dict['disableOpa'] = self.disable_opa.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enable_backup
        if self.enable_backup:
            _dict['enableBackup'] = self.enable_backup.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disable_backup
        if self.disable_backup:
            _dict['disableBackup'] = self.disable_backup.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ai_assistant
        if self.ai_assistant:
            _dict['aiAssistant'] = self.ai_assistant.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportedAsFullyManagedVisibility from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lock": ButtonStatusDto.from_dict(obj["lock"]) if obj.get("lock") is not None else None,
            "unlock": ButtonStatusDto.from_dict(obj["unlock"]) if obj.get("unlock") is not None else None,
            "addVCluster": ButtonStatusDto.from_dict(obj["addVCluster"]) if obj.get("addVCluster") is not None else None,
            "attachAlertingProfile": ButtonStatusDto.from_dict(obj["attachAlertingProfile"]) if obj.get("attachAlertingProfile") is not None else None,
            "detachAlertingProfile": ButtonStatusDto.from_dict(obj["detachAlertingProfile"]) if obj.get("detachAlertingProfile") is not None else None,
            "enableMonitoring": ButtonStatusDto.from_dict(obj["enableMonitoring"]) if obj.get("enableMonitoring") is not None else None,
            "disableMonitoring": ButtonStatusDto.from_dict(obj["disableMonitoring"]) if obj.get("disableMonitoring") is not None else None,
            "enableAi": ButtonStatusDto.from_dict(obj["enableAi"]) if obj.get("enableAi") is not None else None,
            "disableAi": ButtonStatusDto.from_dict(obj["disableAi"]) if obj.get("disableAi") is not None else None,
            "enableOpa": ButtonStatusDto.from_dict(obj["enableOpa"]) if obj.get("enableOpa") is not None else None,
            "disableOpa": ButtonStatusDto.from_dict(obj["disableOpa"]) if obj.get("disableOpa") is not None else None,
            "enableBackup": ButtonStatusDto.from_dict(obj["enableBackup"]) if obj.get("enableBackup") is not None else None,
            "disableBackup": ButtonStatusDto.from_dict(obj["disableBackup"]) if obj.get("disableBackup") is not None else None,
            "aiAssistant": ButtonStatusDto.from_dict(obj["aiAssistant"]) if obj.get("aiAssistant") is not None else None
        })
        return _obj


