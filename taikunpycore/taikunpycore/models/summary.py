# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Summary(BaseModel):
    """
    Summary
    """ # noqa: E501
    total_detected_resources: Optional[StrictInt] = Field(default=None, alias="totalDetectedResources")
    total_supported_resources: Optional[StrictInt] = Field(default=None, alias="totalSupportedResources")
    total_unsupported_resources: Optional[StrictInt] = Field(default=None, alias="totalUnsupportedResources")
    total_usage_based_resources: Optional[StrictInt] = Field(default=None, alias="totalUsageBasedResources")
    total_no_price_resources: Optional[StrictInt] = Field(default=None, alias="totalNoPriceResources")
    unsupported_resource_counts: Optional[Dict[str, StrictInt]] = Field(default=None, alias="unsupportedResourceCounts")
    no_price_resource_counts: Optional[Dict[str, StrictInt]] = Field(default=None, alias="noPriceResourceCounts")
    __properties: ClassVar[List[str]] = ["totalDetectedResources", "totalSupportedResources", "totalUnsupportedResources", "totalUsageBasedResources", "totalNoPriceResources", "unsupportedResourceCounts", "noPriceResourceCounts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Summary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if unsupported_resource_counts (nullable) is None
        # and model_fields_set contains the field
        if self.unsupported_resource_counts is None and "unsupported_resource_counts" in self.model_fields_set:
            _dict['unsupportedResourceCounts'] = None

        # set to None if no_price_resource_counts (nullable) is None
        # and model_fields_set contains the field
        if self.no_price_resource_counts is None and "no_price_resource_counts" in self.model_fields_set:
            _dict['noPriceResourceCounts'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Summary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "totalDetectedResources": obj.get("totalDetectedResources"),
            "totalSupportedResources": obj.get("totalSupportedResources"),
            "totalUnsupportedResources": obj.get("totalUnsupportedResources"),
            "totalUsageBasedResources": obj.get("totalUsageBasedResources"),
            "totalNoPriceResources": obj.get("totalNoPriceResources"),
            "unsupportedResourceCounts": obj.get("unsupportedResourceCounts"),
            "noPriceResourceCounts": obj.get("noPriceResourceCounts")
        })
        return _obj


