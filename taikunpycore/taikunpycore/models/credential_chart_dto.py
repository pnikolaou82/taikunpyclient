# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CredentialChartDto(BaseModel):
    """
    CredentialChartDto
    """ # noqa: E501
    aws: Optional[StrictInt] = None
    azure: Optional[StrictInt] = None
    openstack: Optional[StrictInt] = None
    google: Optional[StrictInt] = None
    tanzu: Optional[StrictInt] = None
    proxmox: Optional[StrictInt] = None
    openshift: Optional[StrictInt] = None
    vsphere: Optional[StrictInt] = None
    zadara: Optional[StrictInt] = None
    zededa: Optional[StrictInt] = None
    generic_k8_s: Optional[StrictInt] = Field(default=None, alias="genericK8S")
    total_count: Optional[StrictInt] = Field(default=None, alias="totalCount")
    __properties: ClassVar[List[str]] = ["aws", "azure", "openstack", "google", "tanzu", "proxmox", "openshift", "vsphere", "zadara", "zededa", "genericK8S", "totalCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CredentialChartDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CredentialChartDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aws": obj.get("aws"),
            "azure": obj.get("azure"),
            "openstack": obj.get("openstack"),
            "google": obj.get("google"),
            "tanzu": obj.get("tanzu"),
            "proxmox": obj.get("proxmox"),
            "openshift": obj.get("openshift"),
            "vsphere": obj.get("vsphere"),
            "zadara": obj.get("zadara"),
            "zededa": obj.get("zededa"),
            "genericK8S": obj.get("genericK8S"),
            "totalCount": obj.get("totalCount")
        })
        return _obj


