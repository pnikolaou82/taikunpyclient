# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.kubernetes_alert_dto_for_poller import KubernetesAlertDtoForPoller
from taikunpycore.models.monitoring_credentials_list_dto import MonitoringCredentialsListDto
from typing import Optional, Set
from typing_extensions import Self

class ProjectListForAlert(BaseModel):
    """
    ProjectListForAlert
    """ # noqa: E501
    id: Optional[StrictInt]
    name: Optional[StrictStr]
    token: Optional[StrictStr]
    status: Optional[StrictStr]
    organization_id: Optional[StrictInt] = Field(alias="organizationId")
    health: Optional[StrictStr]
    is_kubernetes: Optional[StrictBool] = Field(alias="isKubernetes")
    is_locked: Optional[StrictBool] = Field(alias="isLocked")
    is_monitoring_enabled: Optional[StrictBool] = Field(alias="isMonitoringEnabled")
    has_kube_config_file: Optional[StrictBool] = Field(alias="hasKubeConfigFile")
    monitoring_credential: MonitoringCredentialsListDto = Field(alias="monitoringCredential")
    kubernetes_alerts: Optional[List[KubernetesAlertDtoForPoller]] = Field(alias="kubernetesAlerts")
    kubernetes_current_version: Optional[StrictStr] = Field(alias="kubernetesCurrentVersion")
    total_servers_count: Optional[StrictInt] = Field(alias="totalServersCount")
    __properties: ClassVar[List[str]] = ["id", "name", "token", "status", "organizationId", "health", "isKubernetes", "isLocked", "isMonitoringEnabled", "hasKubeConfigFile", "monitoringCredential", "kubernetesAlerts", "kubernetesCurrentVersion", "totalServersCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectListForAlert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of monitoring_credential
        if self.monitoring_credential:
            _dict['monitoringCredential'] = self.monitoring_credential.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in kubernetes_alerts (list)
        _items = []
        if self.kubernetes_alerts:
            for _item_kubernetes_alerts in self.kubernetes_alerts:
                if _item_kubernetes_alerts:
                    _items.append(_item_kubernetes_alerts.to_dict())
            _dict['kubernetesAlerts'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if token (nullable) is None
        # and model_fields_set contains the field
        if self.token is None and "token" in self.model_fields_set:
            _dict['token'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if health (nullable) is None
        # and model_fields_set contains the field
        if self.health is None and "health" in self.model_fields_set:
            _dict['health'] = None

        # set to None if kubernetes_alerts (nullable) is None
        # and model_fields_set contains the field
        if self.kubernetes_alerts is None and "kubernetes_alerts" in self.model_fields_set:
            _dict['kubernetesAlerts'] = None

        # set to None if kubernetes_current_version (nullable) is None
        # and model_fields_set contains the field
        if self.kubernetes_current_version is None and "kubernetes_current_version" in self.model_fields_set:
            _dict['kubernetesCurrentVersion'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectListForAlert from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "token": obj.get("token"),
            "status": obj.get("status"),
            "organizationId": obj.get("organizationId"),
            "health": obj.get("health"),
            "isKubernetes": obj.get("isKubernetes"),
            "isLocked": obj.get("isLocked"),
            "isMonitoringEnabled": obj.get("isMonitoringEnabled"),
            "hasKubeConfigFile": obj.get("hasKubeConfigFile"),
            "monitoringCredential": MonitoringCredentialsListDto.from_dict(obj["monitoringCredential"]) if obj.get("monitoringCredential") is not None else None,
            "kubernetesAlerts": [KubernetesAlertDtoForPoller.from_dict(_item) for _item in obj["kubernetesAlerts"]] if obj.get("kubernetesAlerts") is not None else None,
            "kubernetesCurrentVersion": obj.get("kubernetesCurrentVersion"),
            "totalServersCount": obj.get("totalServersCount")
        })
        return _obj


