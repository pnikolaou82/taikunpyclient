# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AlertLabels(BaseModel):
    """
    AlertLabels
    """ # noqa: E501
    alertname: Optional[StrictStr] = None
    condition: Optional[StrictStr] = None
    container: Optional[StrictStr] = None
    endpoint: Optional[StrictStr] = None
    instance: Optional[StrictStr] = None
    job: Optional[StrictStr] = None
    namespace: Optional[StrictStr] = None
    node: Optional[StrictStr] = None
    pod: Optional[StrictStr] = None
    service: Optional[StrictStr] = None
    severity: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    daemonset: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["alertname", "condition", "container", "endpoint", "instance", "job", "namespace", "node", "pod", "service", "severity", "status", "daemonset"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertLabels from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if alertname (nullable) is None
        # and model_fields_set contains the field
        if self.alertname is None and "alertname" in self.model_fields_set:
            _dict['alertname'] = None

        # set to None if condition (nullable) is None
        # and model_fields_set contains the field
        if self.condition is None and "condition" in self.model_fields_set:
            _dict['condition'] = None

        # set to None if container (nullable) is None
        # and model_fields_set contains the field
        if self.container is None and "container" in self.model_fields_set:
            _dict['container'] = None

        # set to None if endpoint (nullable) is None
        # and model_fields_set contains the field
        if self.endpoint is None and "endpoint" in self.model_fields_set:
            _dict['endpoint'] = None

        # set to None if instance (nullable) is None
        # and model_fields_set contains the field
        if self.instance is None and "instance" in self.model_fields_set:
            _dict['instance'] = None

        # set to None if job (nullable) is None
        # and model_fields_set contains the field
        if self.job is None and "job" in self.model_fields_set:
            _dict['job'] = None

        # set to None if namespace (nullable) is None
        # and model_fields_set contains the field
        if self.namespace is None and "namespace" in self.model_fields_set:
            _dict['namespace'] = None

        # set to None if node (nullable) is None
        # and model_fields_set contains the field
        if self.node is None and "node" in self.model_fields_set:
            _dict['node'] = None

        # set to None if pod (nullable) is None
        # and model_fields_set contains the field
        if self.pod is None and "pod" in self.model_fields_set:
            _dict['pod'] = None

        # set to None if service (nullable) is None
        # and model_fields_set contains the field
        if self.service is None and "service" in self.model_fields_set:
            _dict['service'] = None

        # set to None if severity (nullable) is None
        # and model_fields_set contains the field
        if self.severity is None and "severity" in self.model_fields_set:
            _dict['severity'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if daemonset (nullable) is None
        # and model_fields_set contains the field
        if self.daemonset is None and "daemonset" in self.model_fields_set:
            _dict['daemonset'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertLabels from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertname": obj.get("alertname"),
            "condition": obj.get("condition"),
            "container": obj.get("container"),
            "endpoint": obj.get("endpoint"),
            "instance": obj.get("instance"),
            "job": obj.get("job"),
            "namespace": obj.get("namespace"),
            "node": obj.get("node"),
            "pod": obj.get("pod"),
            "service": obj.get("service"),
            "severity": obj.get("severity"),
            "status": obj.get("status"),
            "daemonset": obj.get("daemonset")
        })
        return _obj


