# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from taikunpycore.models.prometheus_label_list_dto import PrometheusLabelListDto
from taikunpycore.models.prometheus_type import PrometheusType
from typing import Optional, Set
from typing_extensions import Self

class RuleCreateCommand(BaseModel):
    """
    RuleCreateCommand
    """ # noqa: E501
    name: Optional[StrictStr] = None
    metric_name: Optional[StrictStr] = Field(default=None, alias="metricName")
    labels: Optional[List[PrometheusLabelListDto]] = None
    type: Optional[PrometheusType] = None
    price: Optional[Union[StrictFloat, StrictInt]] = None
    partner_id: Optional[StrictInt] = Field(default=None, alias="partnerId")
    operation_credential_id: Optional[StrictInt] = Field(default=None, alias="operationCredentialId")
    organization_id: Optional[List[StrictInt]] = Field(default=None, alias="organizationId")
    rule_discount_rate: Optional[StrictInt] = Field(default=None, alias="ruleDiscountRate")
    __properties: ClassVar[List[str]] = ["name", "metricName", "labels", "type", "price", "partnerId", "operationCredentialId", "organizationId", "ruleDiscountRate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuleCreateCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if metric_name (nullable) is None
        # and model_fields_set contains the field
        if self.metric_name is None and "metric_name" in self.model_fields_set:
            _dict['metricName'] = None

        # set to None if labels (nullable) is None
        # and model_fields_set contains the field
        if self.labels is None and "labels" in self.model_fields_set:
            _dict['labels'] = None

        # set to None if partner_id (nullable) is None
        # and model_fields_set contains the field
        if self.partner_id is None and "partner_id" in self.model_fields_set:
            _dict['partnerId'] = None

        # set to None if organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.organization_id is None and "organization_id" in self.model_fields_set:
            _dict['organizationId'] = None

        # set to None if rule_discount_rate (nullable) is None
        # and model_fields_set contains the field
        if self.rule_discount_rate is None and "rule_discount_rate" in self.model_fields_set:
            _dict['ruleDiscountRate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuleCreateCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "metricName": obj.get("metricName"),
            "labels": [PrometheusLabelListDto.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "type": obj.get("type"),
            "price": obj.get("price"),
            "partnerId": obj.get("partnerId"),
            "operationCredentialId": obj.get("operationCredentialId"),
            "organizationId": obj.get("organizationId"),
            "ruleDiscountRate": obj.get("ruleDiscountRate")
        })
        return _obj


