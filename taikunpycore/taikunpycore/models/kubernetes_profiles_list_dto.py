# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.cni import CNI
from taikunpycore.models.common_dropdown_dto import CommonDropdownDto
from taikunpycore.models.proxmox_storage import ProxmoxStorage
from typing import Optional, Set
from typing_extensions import Self

class KubernetesProfilesListDto(BaseModel):
    """
    KubernetesProfilesListDto
    """ # noqa: E501
    id: Optional[StrictInt]
    name: Optional[StrictStr]
    organization_id: Optional[StrictInt] = Field(alias="organizationId")
    organization_name: Optional[StrictStr] = Field(alias="organizationName")
    cni: CNI
    octavia_enabled: Optional[StrictBool] = Field(alias="octaviaEnabled")
    expose_node_port_on_bastion: Optional[StrictBool] = Field(alias="exposeNodePortOnBastion")
    is_locked: Optional[StrictBool] = Field(alias="isLocked")
    taikun_lb_enabled: Optional[StrictBool] = Field(alias="taikunLBEnabled")
    allow_scheduling_on_master: Optional[StrictBool] = Field(alias="allowSchedulingOnMaster")
    unique_cluster_name: Optional[StrictBool] = Field(alias="uniqueClusterName")
    projects: List[CommonDropdownDto]
    created_by: Optional[StrictStr] = Field(alias="createdBy")
    created_at: Optional[StrictStr] = Field(alias="createdAt")
    last_modified: Optional[StrictStr] = Field(alias="lastModified")
    last_modified_by: Optional[StrictStr] = Field(alias="lastModifiedBy")
    proxmox_storage: ProxmoxStorage = Field(alias="proxmoxStorage")
    nvidia_gpu_operator_enabled: Optional[StrictBool] = Field(alias="nvidiaGpuOperatorEnabled")
    wasm_enabled: Optional[StrictBool] = Field(alias="wasmEnabled")
    __properties: ClassVar[List[str]] = ["id", "name", "organizationId", "organizationName", "cni", "octaviaEnabled", "exposeNodePortOnBastion", "isLocked", "taikunLBEnabled", "allowSchedulingOnMaster", "uniqueClusterName", "projects", "createdBy", "createdAt", "lastModified", "lastModifiedBy", "proxmoxStorage", "nvidiaGpuOperatorEnabled", "wasmEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KubernetesProfilesListDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in projects (list)
        _items = []
        if self.projects:
            for _item_projects in self.projects:
                if _item_projects:
                    _items.append(_item_projects.to_dict())
            _dict['projects'] = _items
        # set to None if organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.organization_id is None and "organization_id" in self.model_fields_set:
            _dict['organizationId'] = None

        # set to None if created_by (nullable) is None
        # and model_fields_set contains the field
        if self.created_by is None and "created_by" in self.model_fields_set:
            _dict['createdBy'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['createdAt'] = None

        # set to None if last_modified (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified is None and "last_modified" in self.model_fields_set:
            _dict['lastModified'] = None

        # set to None if last_modified_by (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_by is None and "last_modified_by" in self.model_fields_set:
            _dict['lastModifiedBy'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KubernetesProfilesListDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "organizationId": obj.get("organizationId"),
            "organizationName": obj.get("organizationName"),
            "cni": obj.get("cni"),
            "octaviaEnabled": obj.get("octaviaEnabled"),
            "exposeNodePortOnBastion": obj.get("exposeNodePortOnBastion"),
            "isLocked": obj.get("isLocked"),
            "taikunLBEnabled": obj.get("taikunLBEnabled"),
            "allowSchedulingOnMaster": obj.get("allowSchedulingOnMaster"),
            "uniqueClusterName": obj.get("uniqueClusterName"),
            "projects": [CommonDropdownDto.from_dict(_item) for _item in obj["projects"]] if obj.get("projects") is not None else None,
            "createdBy": obj.get("createdBy"),
            "createdAt": obj.get("createdAt"),
            "lastModified": obj.get("lastModified"),
            "lastModifiedBy": obj.get("lastModifiedBy"),
            "proxmoxStorage": obj.get("proxmoxStorage"),
            "nvidiaGpuOperatorEnabled": obj.get("nvidiaGpuOperatorEnabled"),
            "wasmEnabled": obj.get("wasmEnabled")
        })
        return _obj


