# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AllTicketsDto(BaseModel):
    """
    AllTicketsDto
    """ # noqa: E501
    id: Optional[StrictStr]
    name: Optional[StrictStr]
    status: Optional[StrictStr]
    created_at: Optional[StrictStr] = Field(alias="createdAt")
    organization_id: Optional[StrictInt] = Field(alias="organizationId")
    organization_name: Optional[StrictStr] = Field(alias="organizationName")
    created_by: Optional[StrictStr] = Field(alias="createdBy")
    current_status_date: Optional[StrictStr] = Field(alias="currentStatusDate")
    last_modifier: Optional[StrictStr] = Field(alias="lastModifier")
    number: Optional[StrictInt]
    partner_logo: Optional[StrictStr] = Field(alias="partnerLogo")
    description: Optional[StrictStr]
    partner_name: Optional[StrictStr] = Field(alias="partnerName")
    user_id: Optional[StrictStr] = Field(alias="userId")
    __properties: ClassVar[List[str]] = ["id", "name", "status", "createdAt", "organizationId", "organizationName", "createdBy", "currentStatusDate", "lastModifier", "number", "partnerLogo", "description", "partnerName", "userId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AllTicketsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if current_status_date (nullable) is None
        # and model_fields_set contains the field
        if self.current_status_date is None and "current_status_date" in self.model_fields_set:
            _dict['currentStatusDate'] = None

        # set to None if last_modifier (nullable) is None
        # and model_fields_set contains the field
        if self.last_modifier is None and "last_modifier" in self.model_fields_set:
            _dict['lastModifier'] = None

        # set to None if partner_logo (nullable) is None
        # and model_fields_set contains the field
        if self.partner_logo is None and "partner_logo" in self.model_fields_set:
            _dict['partnerLogo'] = None

        # set to None if partner_name (nullable) is None
        # and model_fields_set contains the field
        if self.partner_name is None and "partner_name" in self.model_fields_set:
            _dict['partnerName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AllTicketsDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "createdAt": obj.get("createdAt"),
            "organizationId": obj.get("organizationId"),
            "organizationName": obj.get("organizationName"),
            "createdBy": obj.get("createdBy"),
            "currentStatusDate": obj.get("currentStatusDate"),
            "lastModifier": obj.get("lastModifier"),
            "number": obj.get("number"),
            "partnerLogo": obj.get("partnerLogo"),
            "description": obj.get("description"),
            "partnerName": obj.get("partnerName"),
            "userId": obj.get("userId")
        })
        return _obj


