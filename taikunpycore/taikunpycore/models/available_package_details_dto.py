# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.common_dropdown_dto import CommonDropdownDto
from taikunpycore.models.security_report_summary_dto import SecurityReportSummaryDto
from typing import Optional, Set
from typing_extensions import Self

class AvailablePackageDetailsDto(BaseModel):
    """
    AvailablePackageDetailsDto
    """ # noqa: E501
    name: Optional[StrictStr] = None
    app_repo_name: Optional[StrictStr] = Field(default=None, alias="appRepoName")
    app_repo_organization_name: Optional[StrictStr] = Field(default=None, alias="appRepoOrganizationName")
    app_repo_id: Optional[StrictStr] = Field(default=None, alias="appRepoId")
    package_id: Optional[StrictStr] = Field(default=None, alias="packageId")
    logo_id: Optional[StrictStr] = Field(default=None, alias="logoId")
    description: Optional[StrictStr] = None
    readme: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    security_report: Optional[SecurityReportSummaryDto] = Field(default=None, alias="securityReport")
    app_version: Optional[StrictStr] = Field(default=None, alias="appVersion")
    stars: Optional[StrictInt] = None
    verified_publisher: Optional[StrictBool] = Field(default=None, alias="verifiedPublisher")
    official: Optional[StrictBool] = None
    bound_catalogs: Optional[List[CommonDropdownDto]] = Field(default=None, alias="boundCatalogs")
    has_json_schema: Optional[StrictBool] = Field(default=None, alias="hasJsonSchema")
    __properties: ClassVar[List[str]] = ["name", "appRepoName", "appRepoOrganizationName", "appRepoId", "packageId", "logoId", "description", "readme", "version", "securityReport", "appVersion", "stars", "verifiedPublisher", "official", "boundCatalogs", "hasJsonSchema"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AvailablePackageDetailsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of security_report
        if self.security_report:
            _dict['securityReport'] = self.security_report.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in bound_catalogs (list)
        _items = []
        if self.bound_catalogs:
            for _item_bound_catalogs in self.bound_catalogs:
                if _item_bound_catalogs:
                    _items.append(_item_bound_catalogs.to_dict())
            _dict['boundCatalogs'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if app_repo_name (nullable) is None
        # and model_fields_set contains the field
        if self.app_repo_name is None and "app_repo_name" in self.model_fields_set:
            _dict['appRepoName'] = None

        # set to None if app_repo_organization_name (nullable) is None
        # and model_fields_set contains the field
        if self.app_repo_organization_name is None and "app_repo_organization_name" in self.model_fields_set:
            _dict['appRepoOrganizationName'] = None

        # set to None if app_repo_id (nullable) is None
        # and model_fields_set contains the field
        if self.app_repo_id is None and "app_repo_id" in self.model_fields_set:
            _dict['appRepoId'] = None

        # set to None if package_id (nullable) is None
        # and model_fields_set contains the field
        if self.package_id is None and "package_id" in self.model_fields_set:
            _dict['packageId'] = None

        # set to None if logo_id (nullable) is None
        # and model_fields_set contains the field
        if self.logo_id is None and "logo_id" in self.model_fields_set:
            _dict['logoId'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if readme (nullable) is None
        # and model_fields_set contains the field
        if self.readme is None and "readme" in self.model_fields_set:
            _dict['readme'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if app_version (nullable) is None
        # and model_fields_set contains the field
        if self.app_version is None and "app_version" in self.model_fields_set:
            _dict['appVersion'] = None

        # set to None if bound_catalogs (nullable) is None
        # and model_fields_set contains the field
        if self.bound_catalogs is None and "bound_catalogs" in self.model_fields_set:
            _dict['boundCatalogs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AvailablePackageDetailsDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "appRepoName": obj.get("appRepoName"),
            "appRepoOrganizationName": obj.get("appRepoOrganizationName"),
            "appRepoId": obj.get("appRepoId"),
            "packageId": obj.get("packageId"),
            "logoId": obj.get("logoId"),
            "description": obj.get("description"),
            "readme": obj.get("readme"),
            "version": obj.get("version"),
            "securityReport": SecurityReportSummaryDto.from_dict(obj["securityReport"]) if obj.get("securityReport") is not None else None,
            "appVersion": obj.get("appVersion"),
            "stars": obj.get("stars"),
            "verifiedPublisher": obj.get("verifiedPublisher"),
            "official": obj.get("official"),
            "boundCatalogs": [CommonDropdownDto.from_dict(_item) for _item in obj["boundCatalogs"]] if obj.get("boundCatalogs") is not None else None,
            "hasJsonSchema": obj.get("hasJsonSchema")
        })
        return _obj


