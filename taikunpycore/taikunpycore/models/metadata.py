# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Metadata(BaseModel):
    """
    Metadata
    """ # noqa: E501
    infracost_command: Optional[StrictStr] = Field(default=None, alias="infracostCommand")
    vcs_branch: Optional[StrictStr] = Field(default=None, alias="vcsBranch")
    vcs_commit_sha: Optional[StrictStr] = Field(default=None, alias="vcsCommitSha")
    vcs_commit_author_name: Optional[StrictStr] = Field(default=None, alias="vcsCommitAuthorName")
    vcs_commit_author_email: Optional[StrictStr] = Field(default=None, alias="vcsCommitAuthorEmail")
    vcs_commit_timestamp: Optional[StrictStr] = Field(default=None, alias="vcsCommitTimestamp")
    vcs_commit_message: Optional[StrictStr] = Field(default=None, alias="vcsCommitMessage")
    vcs_repository_url: Optional[StrictStr] = Field(default=None, alias="vcsRepositoryUrl")
    usage_api_enabled: Optional[StrictBool] = Field(default=None, alias="usageApiEnabled")
    __properties: ClassVar[List[str]] = ["infracostCommand", "vcsBranch", "vcsCommitSha", "vcsCommitAuthorName", "vcsCommitAuthorEmail", "vcsCommitTimestamp", "vcsCommitMessage", "vcsRepositoryUrl", "usageApiEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Metadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if infracost_command (nullable) is None
        # and model_fields_set contains the field
        if self.infracost_command is None and "infracost_command" in self.model_fields_set:
            _dict['infracostCommand'] = None

        # set to None if vcs_branch (nullable) is None
        # and model_fields_set contains the field
        if self.vcs_branch is None and "vcs_branch" in self.model_fields_set:
            _dict['vcsBranch'] = None

        # set to None if vcs_commit_sha (nullable) is None
        # and model_fields_set contains the field
        if self.vcs_commit_sha is None and "vcs_commit_sha" in self.model_fields_set:
            _dict['vcsCommitSha'] = None

        # set to None if vcs_commit_author_name (nullable) is None
        # and model_fields_set contains the field
        if self.vcs_commit_author_name is None and "vcs_commit_author_name" in self.model_fields_set:
            _dict['vcsCommitAuthorName'] = None

        # set to None if vcs_commit_author_email (nullable) is None
        # and model_fields_set contains the field
        if self.vcs_commit_author_email is None and "vcs_commit_author_email" in self.model_fields_set:
            _dict['vcsCommitAuthorEmail'] = None

        # set to None if vcs_commit_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.vcs_commit_timestamp is None and "vcs_commit_timestamp" in self.model_fields_set:
            _dict['vcsCommitTimestamp'] = None

        # set to None if vcs_commit_message (nullable) is None
        # and model_fields_set contains the field
        if self.vcs_commit_message is None and "vcs_commit_message" in self.model_fields_set:
            _dict['vcsCommitMessage'] = None

        # set to None if vcs_repository_url (nullable) is None
        # and model_fields_set contains the field
        if self.vcs_repository_url is None and "vcs_repository_url" in self.model_fields_set:
            _dict['vcsRepositoryUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Metadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "infracostCommand": obj.get("infracostCommand"),
            "vcsBranch": obj.get("vcsBranch"),
            "vcsCommitSha": obj.get("vcsCommitSha"),
            "vcsCommitAuthorName": obj.get("vcsCommitAuthorName"),
            "vcsCommitAuthorEmail": obj.get("vcsCommitAuthorEmail"),
            "vcsCommitTimestamp": obj.get("vcsCommitTimestamp"),
            "vcsCommitMessage": obj.get("vcsCommitMessage"),
            "vcsRepositoryUrl": obj.get("vcsRepositoryUrl"),
            "usageApiEnabled": obj.get("usageApiEnabled")
        })
        return _obj


