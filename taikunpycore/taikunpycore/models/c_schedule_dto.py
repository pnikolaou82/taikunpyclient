# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class CScheduleDto(BaseModel):
    """
    CScheduleDto
    """ # noqa: E501
    status: Optional[Status] = None
    metadata_name: Optional[StrictStr] = Field(alias="metadataName")
    namespace: Optional[StrictStr]
    created_at: Optional[datetime] = Field(alias="createdAt")
    schedule: Optional[StrictStr]
    ttl: Optional[StrictStr]
    last_backup: Optional[datetime] = Field(alias="lastBackup")
    phase: Optional[StrictStr]
    excluded_namespaces: Optional[List[StrictStr]] = Field(alias="excludedNamespaces")
    included_namespaces: Optional[List[StrictStr]] = Field(alias="includedNamespaces")
    __properties: ClassVar[List[str]] = ["status", "metadataName", "namespace", "createdAt", "schedule", "ttl", "lastBackup", "phase", "excludedNamespaces", "includedNamespaces"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CScheduleDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # set to None if metadata_name (nullable) is None
        # and model_fields_set contains the field
        if self.metadata_name is None and "metadata_name" in self.model_fields_set:
            _dict['metadataName'] = None

        # set to None if namespace (nullable) is None
        # and model_fields_set contains the field
        if self.namespace is None and "namespace" in self.model_fields_set:
            _dict['namespace'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['createdAt'] = None

        # set to None if schedule (nullable) is None
        # and model_fields_set contains the field
        if self.schedule is None and "schedule" in self.model_fields_set:
            _dict['schedule'] = None

        # set to None if ttl (nullable) is None
        # and model_fields_set contains the field
        if self.ttl is None and "ttl" in self.model_fields_set:
            _dict['ttl'] = None

        # set to None if last_backup (nullable) is None
        # and model_fields_set contains the field
        if self.last_backup is None and "last_backup" in self.model_fields_set:
            _dict['lastBackup'] = None

        # set to None if phase (nullable) is None
        # and model_fields_set contains the field
        if self.phase is None and "phase" in self.model_fields_set:
            _dict['phase'] = None

        # set to None if excluded_namespaces (nullable) is None
        # and model_fields_set contains the field
        if self.excluded_namespaces is None and "excluded_namespaces" in self.model_fields_set:
            _dict['excludedNamespaces'] = None

        # set to None if included_namespaces (nullable) is None
        # and model_fields_set contains the field
        if self.included_namespaces is None and "included_namespaces" in self.model_fields_set:
            _dict['includedNamespaces'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CScheduleDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": Status.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "metadataName": obj.get("metadataName"),
            "namespace": obj.get("namespace"),
            "createdAt": obj.get("createdAt"),
            "schedule": obj.get("schedule"),
            "ttl": obj.get("ttl"),
            "lastBackup": obj.get("lastBackup"),
            "phase": obj.get("phase"),
            "excludedNamespaces": obj.get("excludedNamespaces"),
            "includedNamespaces": obj.get("includedNamespaces")
        })
        return _obj


