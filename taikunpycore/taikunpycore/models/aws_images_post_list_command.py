# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AwsImagesPostListCommand(BaseModel):
    """
    AwsImagesPostListCommand
    """ # noqa: E501
    cloud_id: Optional[StrictInt] = Field(default=None, alias="cloudId")
    limit: Optional[StrictInt] = None
    offset: Optional[StrictInt] = None
    sort_by: Optional[StrictStr] = Field(default=None, alias="sortBy")
    sort_direction: Optional[StrictStr] = Field(default=None, alias="sortDirection")
    search: Optional[StrictStr] = None
    latest: Optional[StrictBool] = None
    owners: Optional[List[StrictStr]] = None
    project_id: Optional[StrictInt] = Field(default=None, alias="projectId")
    __properties: ClassVar[List[str]] = ["cloudId", "limit", "offset", "sortBy", "sortDirection", "search", "latest", "owners", "projectId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AwsImagesPostListCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if limit (nullable) is None
        # and model_fields_set contains the field
        if self.limit is None and "limit" in self.model_fields_set:
            _dict['limit'] = None

        # set to None if offset (nullable) is None
        # and model_fields_set contains the field
        if self.offset is None and "offset" in self.model_fields_set:
            _dict['offset'] = None

        # set to None if sort_by (nullable) is None
        # and model_fields_set contains the field
        if self.sort_by is None and "sort_by" in self.model_fields_set:
            _dict['sortBy'] = None

        # set to None if sort_direction (nullable) is None
        # and model_fields_set contains the field
        if self.sort_direction is None and "sort_direction" in self.model_fields_set:
            _dict['sortDirection'] = None

        # set to None if search (nullable) is None
        # and model_fields_set contains the field
        if self.search is None and "search" in self.model_fields_set:
            _dict['search'] = None

        # set to None if owners (nullable) is None
        # and model_fields_set contains the field
        if self.owners is None and "owners" in self.model_fields_set:
            _dict['owners'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['projectId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AwsImagesPostListCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudId": obj.get("cloudId"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "sortBy": obj.get("sortBy"),
            "sortDirection": obj.get("sortDirection"),
            "search": obj.get("search"),
            "latest": obj.get("latest"),
            "owners": obj.get("owners"),
            "projectId": obj.get("projectId")
        })
        return _obj


