# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.cost_component import CostComponent
from taikunpycore.models.subresource import Subresource
from typing import Optional, Set
from typing_extensions import Self

class Resource(BaseModel):
    """
    Resource
    """ # noqa: E501
    name: Optional[StrictStr] = None
    resource_type: Optional[StrictStr] = Field(default=None, alias="resourceType")
    tags: Optional[Dict[str, Optional[StrictStr]]] = None
    metadata: Optional[Dict[str, Any]] = None
    hourly_cost: Optional[StrictStr] = Field(default=None, alias="hourlyCost")
    monthly_cost: Optional[StrictStr] = Field(default=None, alias="monthlyCost")
    monthly_usage_cost: Optional[StrictStr] = Field(default=None, alias="monthlyUsageCost")
    cost_components: Optional[List[CostComponent]] = Field(default=None, alias="costComponents")
    subresources: Optional[List[Subresource]] = None
    __properties: ClassVar[List[str]] = ["name", "resourceType", "tags", "metadata", "hourlyCost", "monthlyCost", "monthlyUsageCost", "costComponents", "subresources"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Resource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cost_components (list)
        _items = []
        if self.cost_components:
            for _item_cost_components in self.cost_components:
                if _item_cost_components:
                    _items.append(_item_cost_components.to_dict())
            _dict['costComponents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subresources (list)
        _items = []
        if self.subresources:
            for _item_subresources in self.subresources:
                if _item_subresources:
                    _items.append(_item_subresources.to_dict())
            _dict['subresources'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if resource_type (nullable) is None
        # and model_fields_set contains the field
        if self.resource_type is None and "resource_type" in self.model_fields_set:
            _dict['resourceType'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if hourly_cost (nullable) is None
        # and model_fields_set contains the field
        if self.hourly_cost is None and "hourly_cost" in self.model_fields_set:
            _dict['hourlyCost'] = None

        # set to None if monthly_cost (nullable) is None
        # and model_fields_set contains the field
        if self.monthly_cost is None and "monthly_cost" in self.model_fields_set:
            _dict['monthlyCost'] = None

        # set to None if monthly_usage_cost (nullable) is None
        # and model_fields_set contains the field
        if self.monthly_usage_cost is None and "monthly_usage_cost" in self.model_fields_set:
            _dict['monthlyUsageCost'] = None

        # set to None if cost_components (nullable) is None
        # and model_fields_set contains the field
        if self.cost_components is None and "cost_components" in self.model_fields_set:
            _dict['costComponents'] = None

        # set to None if subresources (nullable) is None
        # and model_fields_set contains the field
        if self.subresources is None and "subresources" in self.model_fields_set:
            _dict['subresources'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Resource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "resourceType": obj.get("resourceType"),
            "tags": obj.get("tags"),
            "metadata": obj.get("metadata"),
            "hourlyCost": obj.get("hourlyCost"),
            "monthlyCost": obj.get("monthlyCost"),
            "monthlyUsageCost": obj.get("monthlyUsageCost"),
            "costComponents": [CostComponent.from_dict(_item) for _item in obj["costComponents"]] if obj.get("costComponents") is not None else None,
            "subresources": [Subresource.from_dict(_item) for _item in obj["subresources"]] if obj.get("subresources") is not None else None
        })
        return _obj


