# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StorageClassDto(BaseModel):
    """
    StorageClassDto
    """ # noqa: E501
    metadata_name: Optional[StrictStr] = Field(alias="metadataName")
    age: Optional[StrictStr]
    provisioner: Optional[StrictStr]
    reclaim_policy: Optional[StrictStr] = Field(alias="reclaimPolicy")
    volume_binding_mode: Optional[StrictStr] = Field(alias="volumeBindingMode")
    allow_volume_expansion: Optional[StrictBool] = Field(alias="allowVolumeExpansion")
    __properties: ClassVar[List[str]] = ["metadataName", "age", "provisioner", "reclaimPolicy", "volumeBindingMode", "allowVolumeExpansion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StorageClassDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if age (nullable) is None
        # and model_fields_set contains the field
        if self.age is None and "age" in self.model_fields_set:
            _dict['age'] = None

        # set to None if provisioner (nullable) is None
        # and model_fields_set contains the field
        if self.provisioner is None and "provisioner" in self.model_fields_set:
            _dict['provisioner'] = None

        # set to None if reclaim_policy (nullable) is None
        # and model_fields_set contains the field
        if self.reclaim_policy is None and "reclaim_policy" in self.model_fields_set:
            _dict['reclaimPolicy'] = None

        # set to None if volume_binding_mode (nullable) is None
        # and model_fields_set contains the field
        if self.volume_binding_mode is None and "volume_binding_mode" in self.model_fields_set:
            _dict['volumeBindingMode'] = None

        # set to None if allow_volume_expansion (nullable) is None
        # and model_fields_set contains the field
        if self.allow_volume_expansion is None and "allow_volume_expansion" in self.model_fields_set:
            _dict['allowVolumeExpansion'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StorageClassDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metadataName": obj.get("metadataName"),
            "age": obj.get("age"),
            "provisioner": obj.get("provisioner"),
            "reclaimPolicy": obj.get("reclaimPolicy"),
            "volumeBindingMode": obj.get("volumeBindingMode"),
            "allowVolumeExpansion": obj.get("allowVolumeExpansion")
        })
        return _obj


