# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from taikunpycore.models.cloud_type import CloudType
from typing import Optional, Set
from typing_extensions import Self

class BoundFlavorsForProjectsListDto(BaseModel):
    """
    BoundFlavorsForProjectsListDto
    """ # noqa: E501
    id: Optional[StrictInt]
    name: Optional[StrictStr]
    cpu: Optional[StrictInt]
    ram: Union[StrictFloat, StrictInt]
    project_id: Optional[StrictInt] = Field(alias="projectId")
    project_name: Optional[StrictStr] = Field(alias="projectName")
    max_data_disk_count: Optional[StrictInt] = Field(alias="maxDataDiskCount")
    exists_linux_spot_price: Optional[StrictBool] = Field(alias="existsLinuxSpotPrice")
    exists_windows_spot_price: Optional[StrictBool] = Field(alias="existsWindowsSpotPrice")
    linux_spot_price: Optional[StrictStr] = Field(alias="linuxSpotPrice")
    linux_price: Optional[StrictStr] = Field(alias="linuxPrice")
    windows_spot_price: Optional[StrictStr] = Field(alias="windowsSpotPrice")
    windows_price: Optional[StrictStr] = Field(alias="windowsPrice")
    cloud_type: CloudType = Field(alias="cloudType")
    __properties: ClassVar[List[str]] = ["id", "name", "cpu", "ram", "projectId", "projectName", "maxDataDiskCount", "existsLinuxSpotPrice", "existsWindowsSpotPrice", "linuxSpotPrice", "linuxPrice", "windowsSpotPrice", "windowsPrice", "cloudType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoundFlavorsForProjectsListDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['projectId'] = None

        # set to None if max_data_disk_count (nullable) is None
        # and model_fields_set contains the field
        if self.max_data_disk_count is None and "max_data_disk_count" in self.model_fields_set:
            _dict['maxDataDiskCount'] = None

        # set to None if linux_spot_price (nullable) is None
        # and model_fields_set contains the field
        if self.linux_spot_price is None and "linux_spot_price" in self.model_fields_set:
            _dict['linuxSpotPrice'] = None

        # set to None if linux_price (nullable) is None
        # and model_fields_set contains the field
        if self.linux_price is None and "linux_price" in self.model_fields_set:
            _dict['linuxPrice'] = None

        # set to None if windows_spot_price (nullable) is None
        # and model_fields_set contains the field
        if self.windows_spot_price is None and "windows_spot_price" in self.model_fields_set:
            _dict['windowsSpotPrice'] = None

        # set to None if windows_price (nullable) is None
        # and model_fields_set contains the field
        if self.windows_price is None and "windows_price" in self.model_fields_set:
            _dict['windowsPrice'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoundFlavorsForProjectsListDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "cpu": obj.get("cpu"),
            "ram": obj.get("ram"),
            "projectId": obj.get("projectId"),
            "projectName": obj.get("projectName"),
            "maxDataDiskCount": obj.get("maxDataDiskCount"),
            "existsLinuxSpotPrice": obj.get("existsLinuxSpotPrice"),
            "existsWindowsSpotPrice": obj.get("existsWindowsSpotPrice"),
            "linuxSpotPrice": obj.get("linuxSpotPrice"),
            "linuxPrice": obj.get("linuxPrice"),
            "windowsSpotPrice": obj.get("windowsSpotPrice"),
            "windowsPrice": obj.get("windowsPrice"),
            "cloudType": obj.get("cloudType")
        })
        return _obj


