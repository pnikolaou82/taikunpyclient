# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from taikunpycore.models.server_template_dto import ServerTemplateDto
from typing import Optional, Set
from typing_extensions import Self

class CreateProjectCommand(BaseModel):
    """
    CreateProjectCommand
    """ # noqa: E501
    name: Optional[StrictStr] = None
    kubernetes_version: Optional[StrictStr] = Field(default=None, alias="kubernetesVersion")
    organization_id: Optional[StrictInt] = Field(default=None, alias="organizationId")
    cloud_credential_id: Optional[StrictInt] = Field(default=None, alias="cloudCredentialId")
    s3_credential_id: Optional[StrictInt] = Field(default=None, alias="s3CredentialId")
    access_profile_id: Optional[StrictInt] = Field(default=None, alias="accessProfileId")
    opa_profile_id: Optional[StrictInt] = Field(default=None, alias="opaProfileId")
    kubernetes_profile_id: Optional[StrictInt] = Field(default=None, alias="kubernetesProfileId")
    is_kubernetes: Optional[StrictBool] = Field(default=None, alias="isKubernetes")
    is_auto_upgrade: Optional[StrictBool] = Field(default=None, alias="isAutoUpgrade")
    is_backup_enabled: Optional[StrictBool] = Field(default=None, alias="isBackupEnabled")
    is_monitoring_enabled: Optional[StrictBool] = Field(default=None, alias="isMonitoringEnabled")
    ai_enabled: Optional[StrictBool] = Field(default=None, alias="aiEnabled")
    ai_credential_id: Optional[StrictInt] = Field(default=None, alias="aiCredentialId")
    flavors: Optional[List[StrictStr]] = None
    users: Optional[List[StrictStr]] = None
    alerting_profile_id: Optional[StrictInt] = Field(default=None, alias="alertingProfileId")
    taikun_lb_flavor: Optional[StrictStr] = Field(default=None, alias="taikunLBFlavor")
    router_id_start_range: Optional[StrictInt] = Field(default=None, alias="routerIdStartRange")
    router_id_end_range: Optional[StrictInt] = Field(default=None, alias="routerIdEndRange")
    expired_at: Optional[datetime] = Field(default=None, alias="expiredAt")
    delete_on_expiration: Optional[StrictBool] = Field(default=None, alias="deleteOnExpiration")
    allow_full_spot_kubernetes: Optional[StrictBool] = Field(default=None, alias="allowFullSpotKubernetes")
    allow_spot_workers: Optional[StrictBool] = Field(default=None, alias="allowSpotWorkers")
    allow_spot_vms: Optional[StrictBool] = Field(default=None, alias="allowSpotVMs")
    max_spot_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxSpotPrice")
    autoscaling_enabled: Optional[StrictBool] = Field(default=None, alias="autoscalingEnabled")
    autoscaling_group_name: Optional[StrictStr] = Field(default=None, alias="autoscalingGroupName")
    min_size: Optional[StrictInt] = Field(default=None, alias="minSize")
    max_size: Optional[StrictInt] = Field(default=None, alias="maxSize")
    disk_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="diskSize")
    autoscaling_flavor: Optional[StrictStr] = Field(default=None, alias="autoscalingFlavor")
    autoscaling_spot_enabled: Optional[StrictBool] = Field(default=None, alias="autoscalingSpotEnabled")
    cidr: Optional[StrictStr] = None
    net_mask: Optional[StrictInt] = Field(default=None, alias="netMask")
    save_as_template: Optional[StrictBool] = Field(default=None, alias="saveAsTemplate")
    template_name: Optional[StrictStr] = Field(default=None, alias="templateName")
    server_templates: Optional[List[ServerTemplateDto]] = Field(default=None, alias="serverTemplates")
    __properties: ClassVar[List[str]] = ["name", "kubernetesVersion", "organizationId", "cloudCredentialId", "s3CredentialId", "accessProfileId", "opaProfileId", "kubernetesProfileId", "isKubernetes", "isAutoUpgrade", "isBackupEnabled", "isMonitoringEnabled", "aiEnabled", "aiCredentialId", "flavors", "users", "alertingProfileId", "taikunLBFlavor", "routerIdStartRange", "routerIdEndRange", "expiredAt", "deleteOnExpiration", "allowFullSpotKubernetes", "allowSpotWorkers", "allowSpotVMs", "maxSpotPrice", "autoscalingEnabled", "autoscalingGroupName", "minSize", "maxSize", "diskSize", "autoscalingFlavor", "autoscalingSpotEnabled", "cidr", "netMask", "saveAsTemplate", "templateName", "serverTemplates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateProjectCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in server_templates (list)
        _items = []
        if self.server_templates:
            for _item_server_templates in self.server_templates:
                if _item_server_templates:
                    _items.append(_item_server_templates.to_dict())
            _dict['serverTemplates'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if kubernetes_version (nullable) is None
        # and model_fields_set contains the field
        if self.kubernetes_version is None and "kubernetes_version" in self.model_fields_set:
            _dict['kubernetesVersion'] = None

        # set to None if organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.organization_id is None and "organization_id" in self.model_fields_set:
            _dict['organizationId'] = None

        # set to None if s3_credential_id (nullable) is None
        # and model_fields_set contains the field
        if self.s3_credential_id is None and "s3_credential_id" in self.model_fields_set:
            _dict['s3CredentialId'] = None

        # set to None if access_profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.access_profile_id is None and "access_profile_id" in self.model_fields_set:
            _dict['accessProfileId'] = None

        # set to None if opa_profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.opa_profile_id is None and "opa_profile_id" in self.model_fields_set:
            _dict['opaProfileId'] = None

        # set to None if kubernetes_profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.kubernetes_profile_id is None and "kubernetes_profile_id" in self.model_fields_set:
            _dict['kubernetesProfileId'] = None

        # set to None if ai_credential_id (nullable) is None
        # and model_fields_set contains the field
        if self.ai_credential_id is None and "ai_credential_id" in self.model_fields_set:
            _dict['aiCredentialId'] = None

        # set to None if flavors (nullable) is None
        # and model_fields_set contains the field
        if self.flavors is None and "flavors" in self.model_fields_set:
            _dict['flavors'] = None

        # set to None if users (nullable) is None
        # and model_fields_set contains the field
        if self.users is None and "users" in self.model_fields_set:
            _dict['users'] = None

        # set to None if alerting_profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.alerting_profile_id is None and "alerting_profile_id" in self.model_fields_set:
            _dict['alertingProfileId'] = None

        # set to None if taikun_lb_flavor (nullable) is None
        # and model_fields_set contains the field
        if self.taikun_lb_flavor is None and "taikun_lb_flavor" in self.model_fields_set:
            _dict['taikunLBFlavor'] = None

        # set to None if router_id_start_range (nullable) is None
        # and model_fields_set contains the field
        if self.router_id_start_range is None and "router_id_start_range" in self.model_fields_set:
            _dict['routerIdStartRange'] = None

        # set to None if router_id_end_range (nullable) is None
        # and model_fields_set contains the field
        if self.router_id_end_range is None and "router_id_end_range" in self.model_fields_set:
            _dict['routerIdEndRange'] = None

        # set to None if expired_at (nullable) is None
        # and model_fields_set contains the field
        if self.expired_at is None and "expired_at" in self.model_fields_set:
            _dict['expiredAt'] = None

        # set to None if max_spot_price (nullable) is None
        # and model_fields_set contains the field
        if self.max_spot_price is None and "max_spot_price" in self.model_fields_set:
            _dict['maxSpotPrice'] = None

        # set to None if autoscaling_group_name (nullable) is None
        # and model_fields_set contains the field
        if self.autoscaling_group_name is None and "autoscaling_group_name" in self.model_fields_set:
            _dict['autoscalingGroupName'] = None

        # set to None if autoscaling_flavor (nullable) is None
        # and model_fields_set contains the field
        if self.autoscaling_flavor is None and "autoscaling_flavor" in self.model_fields_set:
            _dict['autoscalingFlavor'] = None

        # set to None if cidr (nullable) is None
        # and model_fields_set contains the field
        if self.cidr is None and "cidr" in self.model_fields_set:
            _dict['cidr'] = None

        # set to None if net_mask (nullable) is None
        # and model_fields_set contains the field
        if self.net_mask is None and "net_mask" in self.model_fields_set:
            _dict['netMask'] = None

        # set to None if template_name (nullable) is None
        # and model_fields_set contains the field
        if self.template_name is None and "template_name" in self.model_fields_set:
            _dict['templateName'] = None

        # set to None if server_templates (nullable) is None
        # and model_fields_set contains the field
        if self.server_templates is None and "server_templates" in self.model_fields_set:
            _dict['serverTemplates'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateProjectCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "kubernetesVersion": obj.get("kubernetesVersion"),
            "organizationId": obj.get("organizationId"),
            "cloudCredentialId": obj.get("cloudCredentialId"),
            "s3CredentialId": obj.get("s3CredentialId"),
            "accessProfileId": obj.get("accessProfileId"),
            "opaProfileId": obj.get("opaProfileId"),
            "kubernetesProfileId": obj.get("kubernetesProfileId"),
            "isKubernetes": obj.get("isKubernetes"),
            "isAutoUpgrade": obj.get("isAutoUpgrade"),
            "isBackupEnabled": obj.get("isBackupEnabled"),
            "isMonitoringEnabled": obj.get("isMonitoringEnabled"),
            "aiEnabled": obj.get("aiEnabled"),
            "aiCredentialId": obj.get("aiCredentialId"),
            "flavors": obj.get("flavors"),
            "users": obj.get("users"),
            "alertingProfileId": obj.get("alertingProfileId"),
            "taikunLBFlavor": obj.get("taikunLBFlavor"),
            "routerIdStartRange": obj.get("routerIdStartRange"),
            "routerIdEndRange": obj.get("routerIdEndRange"),
            "expiredAt": obj.get("expiredAt"),
            "deleteOnExpiration": obj.get("deleteOnExpiration"),
            "allowFullSpotKubernetes": obj.get("allowFullSpotKubernetes"),
            "allowSpotWorkers": obj.get("allowSpotWorkers"),
            "allowSpotVMs": obj.get("allowSpotVMs"),
            "maxSpotPrice": obj.get("maxSpotPrice"),
            "autoscalingEnabled": obj.get("autoscalingEnabled"),
            "autoscalingGroupName": obj.get("autoscalingGroupName"),
            "minSize": obj.get("minSize"),
            "maxSize": obj.get("maxSize"),
            "diskSize": obj.get("diskSize"),
            "autoscalingFlavor": obj.get("autoscalingFlavor"),
            "autoscalingSpotEnabled": obj.get("autoscalingSpotEnabled"),
            "cidr": obj.get("cidr"),
            "netMask": obj.get("netMask"),
            "saveAsTemplate": obj.get("saveAsTemplate"),
            "templateName": obj.get("templateName"),
            "serverTemplates": [ServerTemplateDto.from_dict(_item) for _item in obj["serverTemplates"]] if obj.get("serverTemplates") is not None else None
        })
        return _obj


