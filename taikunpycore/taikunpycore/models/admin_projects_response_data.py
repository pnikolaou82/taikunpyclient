# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.cloud_type import CloudType
from taikunpycore.models.project_status import ProjectStatus
from typing import Optional, Set
from typing_extensions import Self

class AdminProjectsResponseData(BaseModel):
    """
    AdminProjectsResponseData
    """ # noqa: E501
    id: Optional[StrictInt]
    name: Optional[StrictStr]
    organization_name: Optional[StrictStr] = Field(alias="organizationName")
    is_locked: Optional[StrictBool] = Field(alias="isLocked")
    kubernetes_current_version: Optional[StrictStr] = Field(alias="kubernetesCurrentVersion")
    kubespray_current_version: Optional[StrictStr] = Field(alias="kubesprayCurrentVersion")
    status: ProjectStatus
    servers_count: Optional[StrictInt] = Field(alias="serversCount")
    tcu: Optional[StrictInt]
    created_at: Optional[StrictStr] = Field(alias="createdAt")
    cloud_type: CloudType = Field(alias="cloudType")
    __properties: ClassVar[List[str]] = ["id", "name", "organizationName", "isLocked", "kubernetesCurrentVersion", "kubesprayCurrentVersion", "status", "serversCount", "tcu", "createdAt", "cloudType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminProjectsResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if organization_name (nullable) is None
        # and model_fields_set contains the field
        if self.organization_name is None and "organization_name" in self.model_fields_set:
            _dict['organizationName'] = None

        # set to None if kubernetes_current_version (nullable) is None
        # and model_fields_set contains the field
        if self.kubernetes_current_version is None and "kubernetes_current_version" in self.model_fields_set:
            _dict['kubernetesCurrentVersion'] = None

        # set to None if kubespray_current_version (nullable) is None
        # and model_fields_set contains the field
        if self.kubespray_current_version is None and "kubespray_current_version" in self.model_fields_set:
            _dict['kubesprayCurrentVersion'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['createdAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminProjectsResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "organizationName": obj.get("organizationName"),
            "isLocked": obj.get("isLocked"),
            "kubernetesCurrentVersion": obj.get("kubernetesCurrentVersion"),
            "kubesprayCurrentVersion": obj.get("kubesprayCurrentVersion"),
            "status": obj.get("status"),
            "serversCount": obj.get("serversCount"),
            "tcu": obj.get("tcu"),
            "createdAt": obj.get("createdAt"),
            "cloudType": obj.get("cloudType")
        })
        return _obj


