# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from taikunpycore.models.cloud_type import CloudType
from taikunpycore.models.project_health import ProjectHealth
from taikunpycore.models.project_status import ProjectStatus
from taikunpycore.models.proxmox_storage import ProxmoxStorage
from typing import Optional, Set
from typing_extensions import Self

class ProjectDetailsForServersDto(BaseModel):
    """
    ProjectDetailsForServersDto
    """ # noqa: E501
    alerts_count: Optional[StrictInt] = Field(alias="alertsCount")
    worker: Optional[StrictInt]
    bastion: Optional[StrictInt]
    status: ProjectStatus
    name: Optional[StrictStr]
    access_ip: Optional[StrictStr] = Field(alias="accessIp")
    id: Optional[StrictInt]
    master_ready: Optional[StrictInt] = Field(alias="masterReady")
    cloud_type: CloudType = Field(alias="cloudType")
    cloud_name: Optional[StrictStr] = Field(alias="cloudName")
    cloud_id: Optional[StrictInt] = Field(alias="cloudId")
    quota_id: Optional[StrictInt] = Field(alias="quotaId")
    organization_name: Optional[StrictStr] = Field(alias="organizationName")
    organization_id: Optional[StrictInt] = Field(alias="organizationId")
    kubernetes_version: Optional[StrictStr] = Field(alias="kubernetesVersion")
    is_backup_enabled: Optional[StrictBool] = Field(alias="isBackupEnabled")
    ai_enabled: Optional[StrictBool] = Field(alias="aiEnabled")
    is_locked: Optional[StrictBool] = Field(alias="isLocked")
    is_auto_upgrade: Optional[StrictBool] = Field(alias="isAutoUpgrade")
    is_monitoring_enabled: Optional[StrictBool] = Field(alias="isMonitoringEnabled")
    is_opa_enabled: Optional[StrictBool] = Field(alias="isOpaEnabled")
    has_kube_config_file: Optional[StrictBool] = Field(alias="hasKubeConfigFile")
    has_selected_flavors: Optional[StrictBool] = Field(alias="hasSelectedFlavors")
    is_maintenance_mode_enabled: Optional[StrictBool] = Field(alias="isMaintenanceModeEnabled")
    is_project_maintenance_mode_enabled: Optional[StrictBool] = Field(alias="isProjectMaintenanceModeEnabled")
    is_deprecated: Optional[StrictBool] = Field(alias="isDeprecated")
    cpu_limit: Optional[StrictInt] = Field(alias="cpuLimit")
    ram_limit: Optional[StrictInt] = Field(alias="ramLimit")
    disk_size_limit: Optional[StrictInt] = Field(alias="diskSizeLimit")
    used_cpu: Optional[StrictInt] = Field(alias="usedCpu")
    used_ram: Optional[StrictInt] = Field(alias="usedRam")
    used_disk_size: Optional[StrictInt] = Field(alias="usedDiskSize")
    vm_cpu_limit: Optional[StrictInt] = Field(alias="vmCpuLimit")
    vm_ram_limit: Optional[StrictInt] = Field(alias="vmRamLimit")
    vm_volume_size_limit: Optional[StrictInt] = Field(alias="vmVolumeSizeLimit")
    vm_used_cpu: Optional[StrictInt] = Field(alias="vmUsedCpu")
    vm_used_ram: Optional[StrictInt] = Field(alias="vmUsedRam")
    vm_used_volume_size: Optional[StrictInt] = Field(alias="vmUsedVolumeSize")
    access_profile_name: Optional[StrictStr] = Field(alias="accessProfileName")
    access_profile_id: Optional[StrictInt] = Field(alias="accessProfileId")
    kubernetes_profile_name: Optional[StrictStr] = Field(alias="kubernetesProfileName")
    kubernetes_profile_id: Optional[StrictInt] = Field(alias="kubernetesProfileId")
    alerting_profile_name: Optional[StrictStr] = Field(alias="alertingProfileName")
    health: ProjectHealth
    alerting_profile_id: Optional[StrictInt] = Field(alias="alertingProfileId")
    s3_credential_id: Optional[StrictInt] = Field(alias="s3CredentialId")
    ai_credential_id: Optional[StrictInt] = Field(alias="aiCredentialId")
    expired_at: Optional[StrictStr] = Field(alias="expiredAt")
    certification_expired_at: Optional[StrictStr] = Field(alias="certificationExpiredAt")
    opa_profile_id: Optional[StrictInt] = Field(alias="opaProfileId")
    opa_profile_name: Optional[StrictStr] = Field(alias="opaProfileName")
    allow_full_spot_kubernetes: Optional[StrictBool] = Field(alias="allowFullSpotKubernetes")
    allow_spot_workers: Optional[StrictBool] = Field(alias="allowSpotWorkers")
    allow_spot_vms: Optional[StrictBool] = Field(alias="allowSpotVMs")
    total_hourly_cost: Union[StrictFloat, StrictInt] = Field(alias="totalHourlyCost")
    autoscaling_group_name: Optional[StrictStr] = Field(alias="autoscalingGroupName")
    min_size: Optional[StrictInt] = Field(alias="minSize")
    max_size: Optional[StrictInt] = Field(alias="maxSize")
    disk_size: Optional[Union[StrictFloat, StrictInt]] = Field(alias="diskSize")
    flavor: Optional[StrictStr]
    spot_enabled: Optional[StrictBool] = Field(alias="spotEnabled")
    is_autoscaling_enabled: Optional[StrictBool] = Field(alias="isAutoscalingEnabled")
    is_autoscaling_spot_enabled: Optional[StrictBool] = Field(alias="isAutoscalingSpotEnabled")
    has_nfs_server: Optional[StrictBool] = Field(alias="hasNfsServer")
    wasm_enabled: Optional[StrictBool] = Field(alias="wasmEnabled")
    availability_zones: List[StrictStr] = Field(alias="availabilityZones")
    hypervisors: List[StrictStr]
    proxmox_storage: ProxmoxStorage = Field(alias="proxmoxStorage")
    is_drs_enabled: Optional[StrictBool] = Field(alias="isDrsEnabled")
    max_spot_price: Optional[Union[StrictFloat, StrictInt]] = Field(alias="maxSpotPrice")
    __properties: ClassVar[List[str]] = ["alertsCount", "worker", "bastion", "status", "name", "accessIp", "id", "masterReady", "cloudType", "cloudName", "cloudId", "quotaId", "organizationName", "organizationId", "kubernetesVersion", "isBackupEnabled", "aiEnabled", "isLocked", "isAutoUpgrade", "isMonitoringEnabled", "isOpaEnabled", "hasKubeConfigFile", "hasSelectedFlavors", "isMaintenanceModeEnabled", "isProjectMaintenanceModeEnabled", "isDeprecated", "cpuLimit", "ramLimit", "diskSizeLimit", "usedCpu", "usedRam", "usedDiskSize", "vmCpuLimit", "vmRamLimit", "vmVolumeSizeLimit", "vmUsedCpu", "vmUsedRam", "vmUsedVolumeSize", "accessProfileName", "accessProfileId", "kubernetesProfileName", "kubernetesProfileId", "alertingProfileName", "health", "alertingProfileId", "s3CredentialId", "aiCredentialId", "expiredAt", "certificationExpiredAt", "opaProfileId", "opaProfileName", "allowFullSpotKubernetes", "allowSpotWorkers", "allowSpotVMs", "totalHourlyCost", "autoscalingGroupName", "minSize", "maxSize", "diskSize", "flavor", "spotEnabled", "isAutoscalingEnabled", "isAutoscalingSpotEnabled", "hasNfsServer", "wasmEnabled", "availabilityZones", "hypervisors", "proxmoxStorage", "isDrsEnabled", "maxSpotPrice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectDetailsForServersDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if access_profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.access_profile_id is None and "access_profile_id" in self.model_fields_set:
            _dict['accessProfileId'] = None

        # set to None if kubernetes_profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.kubernetes_profile_id is None and "kubernetes_profile_id" in self.model_fields_set:
            _dict['kubernetesProfileId'] = None

        # set to None if alerting_profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.alerting_profile_id is None and "alerting_profile_id" in self.model_fields_set:
            _dict['alertingProfileId'] = None

        # set to None if s3_credential_id (nullable) is None
        # and model_fields_set contains the field
        if self.s3_credential_id is None and "s3_credential_id" in self.model_fields_set:
            _dict['s3CredentialId'] = None

        # set to None if ai_credential_id (nullable) is None
        # and model_fields_set contains the field
        if self.ai_credential_id is None and "ai_credential_id" in self.model_fields_set:
            _dict['aiCredentialId'] = None

        # set to None if opa_profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.opa_profile_id is None and "opa_profile_id" in self.model_fields_set:
            _dict['opaProfileId'] = None

        # set to None if min_size (nullable) is None
        # and model_fields_set contains the field
        if self.min_size is None and "min_size" in self.model_fields_set:
            _dict['minSize'] = None

        # set to None if max_size (nullable) is None
        # and model_fields_set contains the field
        if self.max_size is None and "max_size" in self.model_fields_set:
            _dict['maxSize'] = None

        # set to None if disk_size (nullable) is None
        # and model_fields_set contains the field
        if self.disk_size is None and "disk_size" in self.model_fields_set:
            _dict['diskSize'] = None

        # set to None if flavor (nullable) is None
        # and model_fields_set contains the field
        if self.flavor is None and "flavor" in self.model_fields_set:
            _dict['flavor'] = None

        # set to None if spot_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.spot_enabled is None and "spot_enabled" in self.model_fields_set:
            _dict['spotEnabled'] = None

        # set to None if max_spot_price (nullable) is None
        # and model_fields_set contains the field
        if self.max_spot_price is None and "max_spot_price" in self.model_fields_set:
            _dict['maxSpotPrice'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectDetailsForServersDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertsCount": obj.get("alertsCount"),
            "worker": obj.get("worker"),
            "bastion": obj.get("bastion"),
            "status": obj.get("status"),
            "name": obj.get("name"),
            "accessIp": obj.get("accessIp"),
            "id": obj.get("id"),
            "masterReady": obj.get("masterReady"),
            "cloudType": obj.get("cloudType"),
            "cloudName": obj.get("cloudName"),
            "cloudId": obj.get("cloudId"),
            "quotaId": obj.get("quotaId"),
            "organizationName": obj.get("organizationName"),
            "organizationId": obj.get("organizationId"),
            "kubernetesVersion": obj.get("kubernetesVersion"),
            "isBackupEnabled": obj.get("isBackupEnabled"),
            "aiEnabled": obj.get("aiEnabled"),
            "isLocked": obj.get("isLocked"),
            "isAutoUpgrade": obj.get("isAutoUpgrade"),
            "isMonitoringEnabled": obj.get("isMonitoringEnabled"),
            "isOpaEnabled": obj.get("isOpaEnabled"),
            "hasKubeConfigFile": obj.get("hasKubeConfigFile"),
            "hasSelectedFlavors": obj.get("hasSelectedFlavors"),
            "isMaintenanceModeEnabled": obj.get("isMaintenanceModeEnabled"),
            "isProjectMaintenanceModeEnabled": obj.get("isProjectMaintenanceModeEnabled"),
            "isDeprecated": obj.get("isDeprecated"),
            "cpuLimit": obj.get("cpuLimit"),
            "ramLimit": obj.get("ramLimit"),
            "diskSizeLimit": obj.get("diskSizeLimit"),
            "usedCpu": obj.get("usedCpu"),
            "usedRam": obj.get("usedRam"),
            "usedDiskSize": obj.get("usedDiskSize"),
            "vmCpuLimit": obj.get("vmCpuLimit"),
            "vmRamLimit": obj.get("vmRamLimit"),
            "vmVolumeSizeLimit": obj.get("vmVolumeSizeLimit"),
            "vmUsedCpu": obj.get("vmUsedCpu"),
            "vmUsedRam": obj.get("vmUsedRam"),
            "vmUsedVolumeSize": obj.get("vmUsedVolumeSize"),
            "accessProfileName": obj.get("accessProfileName"),
            "accessProfileId": obj.get("accessProfileId"),
            "kubernetesProfileName": obj.get("kubernetesProfileName"),
            "kubernetesProfileId": obj.get("kubernetesProfileId"),
            "alertingProfileName": obj.get("alertingProfileName"),
            "health": obj.get("health"),
            "alertingProfileId": obj.get("alertingProfileId"),
            "s3CredentialId": obj.get("s3CredentialId"),
            "aiCredentialId": obj.get("aiCredentialId"),
            "expiredAt": obj.get("expiredAt"),
            "certificationExpiredAt": obj.get("certificationExpiredAt"),
            "opaProfileId": obj.get("opaProfileId"),
            "opaProfileName": obj.get("opaProfileName"),
            "allowFullSpotKubernetes": obj.get("allowFullSpotKubernetes"),
            "allowSpotWorkers": obj.get("allowSpotWorkers"),
            "allowSpotVMs": obj.get("allowSpotVMs"),
            "totalHourlyCost": obj.get("totalHourlyCost"),
            "autoscalingGroupName": obj.get("autoscalingGroupName"),
            "minSize": obj.get("minSize"),
            "maxSize": obj.get("maxSize"),
            "diskSize": obj.get("diskSize"),
            "flavor": obj.get("flavor"),
            "spotEnabled": obj.get("spotEnabled"),
            "isAutoscalingEnabled": obj.get("isAutoscalingEnabled"),
            "isAutoscalingSpotEnabled": obj.get("isAutoscalingSpotEnabled"),
            "hasNfsServer": obj.get("hasNfsServer"),
            "wasmEnabled": obj.get("wasmEnabled"),
            "availabilityZones": obj.get("availabilityZones"),
            "hypervisors": obj.get("hypervisors"),
            "proxmoxStorage": obj.get("proxmoxStorage"),
            "isDrsEnabled": obj.get("isDrsEnabled"),
            "maxSpotPrice": obj.get("maxSpotPrice")
        })
        return _obj


