# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.cloud_type import CloudType
from taikunpycore.models.import_cluster_type import ImportClusterType
from taikunpycore.models.project_health import ProjectHealth
from taikunpycore.models.project_status import ProjectStatus
from typing import Optional, Set
from typing_extensions import Self

class ImportedClusterDetailsDto(BaseModel):
    """
    ImportedClusterDetailsDto
    """ # noqa: E501
    id: Optional[StrictInt]
    name: Optional[StrictStr]
    is_locked: Optional[StrictBool] = Field(alias="isLocked")
    access_ip: Optional[StrictStr] = Field(alias="accessIp")
    kubernetes_version: Optional[StrictStr] = Field(alias="kubernetesVersion")
    import_cluster_type: ImportClusterType = Field(alias="importClusterType")
    organization_id: Optional[StrictInt] = Field(alias="organizationId")
    organization_name: Optional[StrictStr] = Field(alias="organizationName")
    cloud_credential_name: Optional[StrictStr] = Field(default=None, alias="cloudCredentialName")
    cloud_credential_id: Optional[StrictInt] = Field(default=None, alias="cloudCredentialId")
    health: ProjectHealth
    cloud_type: Optional[CloudType] = Field(default=None, alias="cloudType")
    status: ProjectStatus
    is_monitoring_enabled: Optional[StrictBool] = Field(alias="isMonitoringEnabled")
    alerting_profile_id: Optional[StrictInt] = Field(alias="alertingProfileId")
    alerting_profile_name: Optional[StrictStr] = Field(alias="alertingProfileName")
    is_opa_enabled: Optional[StrictBool] = Field(alias="isOpaEnabled")
    opa_profile_id: Optional[StrictInt] = Field(alias="opaProfileId")
    is_backup_enabled: Optional[StrictBool] = Field(alias="isBackupEnabled")
    s3_credential_id: Optional[StrictInt] = Field(alias="s3CredentialId")
    ai_enabled: Optional[StrictBool] = Field(alias="aiEnabled")
    ai_credential_id: Optional[StrictInt] = Field(alias="aiCredentialId")
    expired_at: Optional[StrictStr] = Field(alias="expiredAt")
    alerts_count: Optional[StrictInt] = Field(alias="alertsCount")
    __properties: ClassVar[List[str]] = ["id", "name", "isLocked", "accessIp", "kubernetesVersion", "importClusterType", "organizationId", "organizationName", "cloudCredentialName", "cloudCredentialId", "health", "cloudType", "status", "isMonitoringEnabled", "alertingProfileId", "alertingProfileName", "isOpaEnabled", "opaProfileId", "isBackupEnabled", "s3CredentialId", "aiEnabled", "aiCredentialId", "expiredAt", "alertsCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportedClusterDetailsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if access_ip (nullable) is None
        # and model_fields_set contains the field
        if self.access_ip is None and "access_ip" in self.model_fields_set:
            _dict['accessIp'] = None

        # set to None if kubernetes_version (nullable) is None
        # and model_fields_set contains the field
        if self.kubernetes_version is None and "kubernetes_version" in self.model_fields_set:
            _dict['kubernetesVersion'] = None

        # set to None if cloud_credential_name (nullable) is None
        # and model_fields_set contains the field
        if self.cloud_credential_name is None and "cloud_credential_name" in self.model_fields_set:
            _dict['cloudCredentialName'] = None

        # set to None if cloud_credential_id (nullable) is None
        # and model_fields_set contains the field
        if self.cloud_credential_id is None and "cloud_credential_id" in self.model_fields_set:
            _dict['cloudCredentialId'] = None

        # set to None if alerting_profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.alerting_profile_id is None and "alerting_profile_id" in self.model_fields_set:
            _dict['alertingProfileId'] = None

        # set to None if alerting_profile_name (nullable) is None
        # and model_fields_set contains the field
        if self.alerting_profile_name is None and "alerting_profile_name" in self.model_fields_set:
            _dict['alertingProfileName'] = None

        # set to None if opa_profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.opa_profile_id is None and "opa_profile_id" in self.model_fields_set:
            _dict['opaProfileId'] = None

        # set to None if s3_credential_id (nullable) is None
        # and model_fields_set contains the field
        if self.s3_credential_id is None and "s3_credential_id" in self.model_fields_set:
            _dict['s3CredentialId'] = None

        # set to None if ai_credential_id (nullable) is None
        # and model_fields_set contains the field
        if self.ai_credential_id is None and "ai_credential_id" in self.model_fields_set:
            _dict['aiCredentialId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportedClusterDetailsDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "isLocked": obj.get("isLocked"),
            "accessIp": obj.get("accessIp"),
            "kubernetesVersion": obj.get("kubernetesVersion"),
            "importClusterType": obj.get("importClusterType"),
            "organizationId": obj.get("organizationId"),
            "organizationName": obj.get("organizationName"),
            "cloudCredentialName": obj.get("cloudCredentialName"),
            "cloudCredentialId": obj.get("cloudCredentialId"),
            "health": obj.get("health"),
            "cloudType": obj.get("cloudType"),
            "status": obj.get("status"),
            "isMonitoringEnabled": obj.get("isMonitoringEnabled"),
            "alertingProfileId": obj.get("alertingProfileId"),
            "alertingProfileName": obj.get("alertingProfileName"),
            "isOpaEnabled": obj.get("isOpaEnabled"),
            "opaProfileId": obj.get("opaProfileId"),
            "isBackupEnabled": obj.get("isBackupEnabled"),
            "s3CredentialId": obj.get("s3CredentialId"),
            "aiEnabled": obj.get("aiEnabled"),
            "aiCredentialId": obj.get("aiCredentialId"),
            "expiredAt": obj.get("expiredAt"),
            "alertsCount": obj.get("alertsCount")
        })
        return _obj


