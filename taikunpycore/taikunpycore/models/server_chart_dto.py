# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from taikunpycore.models.server_common_record_dto import ServerCommonRecordDto
from taikunpycore.models.user_resource_chart_dto import UserResourceChartDto
from typing import Optional, Set
from typing_extensions import Self

class ServerChartDto(BaseModel):
    """
    ServerChartDto
    """ # noqa: E501
    aws: Optional[List[ServerCommonRecordDto]] = None
    azure: Optional[List[ServerCommonRecordDto]] = None
    openstack: Optional[List[ServerCommonRecordDto]] = None
    google: Optional[List[ServerCommonRecordDto]] = None
    tanzu: Optional[List[ServerCommonRecordDto]] = None
    proxmox: Optional[List[ServerCommonRecordDto]] = None
    vsphere: Optional[List[ServerCommonRecordDto]] = None
    zadara: Optional[List[ServerCommonRecordDto]] = None
    openshift: Optional[List[ServerCommonRecordDto]] = None
    zededa: Optional[List[ServerCommonRecordDto]] = None
    generic_k8_s: Optional[List[ServerCommonRecordDto]] = Field(default=None, alias="genericK8S")
    failed: Optional[List[ServerCommonRecordDto]] = None
    succeeded: Optional[List[ServerCommonRecordDto]] = None
    waiting: Optional[List[ServerCommonRecordDto]] = None
    updating: Optional[List[ServerCommonRecordDto]] = None
    deleting: Optional[List[ServerCommonRecordDto]] = None
    purging: Optional[List[ServerCommonRecordDto]] = None
    total_count: Optional[StrictInt] = Field(default=None, alias="totalCount")
    total_cpu: Optional[StrictInt] = Field(default=None, alias="totalCpu")
    total_ram: Optional[StrictInt] = Field(default=None, alias="totalRam")
    total_disk_size: Optional[StrictInt] = Field(default=None, alias="totalDiskSize")
    total_failed_count: Optional[StrictInt] = Field(default=None, alias="totalFailedCount")
    total_succeeded_count: Optional[StrictInt] = Field(default=None, alias="totalSucceededCount")
    total_updating_count: Optional[StrictInt] = Field(default=None, alias="totalUpdatingCount")
    total_pending_count: Optional[StrictInt] = Field(default=None, alias="totalPendingCount")
    total_aws_count: Optional[StrictInt] = Field(default=None, alias="totalAwsCount")
    total_azure_count: Optional[StrictInt] = Field(default=None, alias="totalAzureCount")
    total_openstack_count: Optional[StrictInt] = Field(default=None, alias="totalOpenstackCount")
    total_google_count: Optional[StrictInt] = Field(default=None, alias="totalGoogleCount")
    total_tanzu_count: Optional[StrictInt] = Field(default=None, alias="totalTanzuCount")
    total_openshift_count: Optional[StrictInt] = Field(default=None, alias="totalOpenshiftCount")
    total_proxmox_count: Optional[StrictInt] = Field(default=None, alias="totalProxmoxCount")
    total_vsphere_count: Optional[StrictInt] = Field(default=None, alias="totalVsphereCount")
    total_zadara_count: Optional[StrictInt] = Field(default=None, alias="totalZadaraCount")
    total_zededa_count: Optional[StrictInt] = Field(default=None, alias="totalZededaCount")
    total_generic_k8_s_count: Optional[StrictInt] = Field(default=None, alias="totalGenericK8SCount")
    used_resources: Optional[List[UserResourceChartDto]] = Field(default=None, alias="usedResources")
    __properties: ClassVar[List[str]] = ["aws", "azure", "openstack", "google", "tanzu", "proxmox", "vsphere", "zadara", "openshift", "zededa", "genericK8S", "failed", "succeeded", "waiting", "updating", "deleting", "purging", "totalCount", "totalCpu", "totalRam", "totalDiskSize", "totalFailedCount", "totalSucceededCount", "totalUpdatingCount", "totalPendingCount", "totalAwsCount", "totalAzureCount", "totalOpenstackCount", "totalGoogleCount", "totalTanzuCount", "totalOpenshiftCount", "totalProxmoxCount", "totalVsphereCount", "totalZadaraCount", "totalZededaCount", "totalGenericK8SCount", "usedResources"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerChartDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in aws (list)
        _items = []
        if self.aws:
            for _item_aws in self.aws:
                if _item_aws:
                    _items.append(_item_aws.to_dict())
            _dict['aws'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in azure (list)
        _items = []
        if self.azure:
            for _item_azure in self.azure:
                if _item_azure:
                    _items.append(_item_azure.to_dict())
            _dict['azure'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in openstack (list)
        _items = []
        if self.openstack:
            for _item_openstack in self.openstack:
                if _item_openstack:
                    _items.append(_item_openstack.to_dict())
            _dict['openstack'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in google (list)
        _items = []
        if self.google:
            for _item_google in self.google:
                if _item_google:
                    _items.append(_item_google.to_dict())
            _dict['google'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tanzu (list)
        _items = []
        if self.tanzu:
            for _item_tanzu in self.tanzu:
                if _item_tanzu:
                    _items.append(_item_tanzu.to_dict())
            _dict['tanzu'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in proxmox (list)
        _items = []
        if self.proxmox:
            for _item_proxmox in self.proxmox:
                if _item_proxmox:
                    _items.append(_item_proxmox.to_dict())
            _dict['proxmox'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vsphere (list)
        _items = []
        if self.vsphere:
            for _item_vsphere in self.vsphere:
                if _item_vsphere:
                    _items.append(_item_vsphere.to_dict())
            _dict['vsphere'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in zadara (list)
        _items = []
        if self.zadara:
            for _item_zadara in self.zadara:
                if _item_zadara:
                    _items.append(_item_zadara.to_dict())
            _dict['zadara'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in openshift (list)
        _items = []
        if self.openshift:
            for _item_openshift in self.openshift:
                if _item_openshift:
                    _items.append(_item_openshift.to_dict())
            _dict['openshift'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in zededa (list)
        _items = []
        if self.zededa:
            for _item_zededa in self.zededa:
                if _item_zededa:
                    _items.append(_item_zededa.to_dict())
            _dict['zededa'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in generic_k8_s (list)
        _items = []
        if self.generic_k8_s:
            for _item_generic_k8_s in self.generic_k8_s:
                if _item_generic_k8_s:
                    _items.append(_item_generic_k8_s.to_dict())
            _dict['genericK8S'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in failed (list)
        _items = []
        if self.failed:
            for _item_failed in self.failed:
                if _item_failed:
                    _items.append(_item_failed.to_dict())
            _dict['failed'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in succeeded (list)
        _items = []
        if self.succeeded:
            for _item_succeeded in self.succeeded:
                if _item_succeeded:
                    _items.append(_item_succeeded.to_dict())
            _dict['succeeded'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in waiting (list)
        _items = []
        if self.waiting:
            for _item_waiting in self.waiting:
                if _item_waiting:
                    _items.append(_item_waiting.to_dict())
            _dict['waiting'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in updating (list)
        _items = []
        if self.updating:
            for _item_updating in self.updating:
                if _item_updating:
                    _items.append(_item_updating.to_dict())
            _dict['updating'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in deleting (list)
        _items = []
        if self.deleting:
            for _item_deleting in self.deleting:
                if _item_deleting:
                    _items.append(_item_deleting.to_dict())
            _dict['deleting'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in purging (list)
        _items = []
        if self.purging:
            for _item_purging in self.purging:
                if _item_purging:
                    _items.append(_item_purging.to_dict())
            _dict['purging'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in used_resources (list)
        _items = []
        if self.used_resources:
            for _item_used_resources in self.used_resources:
                if _item_used_resources:
                    _items.append(_item_used_resources.to_dict())
            _dict['usedResources'] = _items
        # set to None if aws (nullable) is None
        # and model_fields_set contains the field
        if self.aws is None and "aws" in self.model_fields_set:
            _dict['aws'] = None

        # set to None if azure (nullable) is None
        # and model_fields_set contains the field
        if self.azure is None and "azure" in self.model_fields_set:
            _dict['azure'] = None

        # set to None if openstack (nullable) is None
        # and model_fields_set contains the field
        if self.openstack is None and "openstack" in self.model_fields_set:
            _dict['openstack'] = None

        # set to None if google (nullable) is None
        # and model_fields_set contains the field
        if self.google is None and "google" in self.model_fields_set:
            _dict['google'] = None

        # set to None if tanzu (nullable) is None
        # and model_fields_set contains the field
        if self.tanzu is None and "tanzu" in self.model_fields_set:
            _dict['tanzu'] = None

        # set to None if proxmox (nullable) is None
        # and model_fields_set contains the field
        if self.proxmox is None and "proxmox" in self.model_fields_set:
            _dict['proxmox'] = None

        # set to None if vsphere (nullable) is None
        # and model_fields_set contains the field
        if self.vsphere is None and "vsphere" in self.model_fields_set:
            _dict['vsphere'] = None

        # set to None if zadara (nullable) is None
        # and model_fields_set contains the field
        if self.zadara is None and "zadara" in self.model_fields_set:
            _dict['zadara'] = None

        # set to None if openshift (nullable) is None
        # and model_fields_set contains the field
        if self.openshift is None and "openshift" in self.model_fields_set:
            _dict['openshift'] = None

        # set to None if zededa (nullable) is None
        # and model_fields_set contains the field
        if self.zededa is None and "zededa" in self.model_fields_set:
            _dict['zededa'] = None

        # set to None if generic_k8_s (nullable) is None
        # and model_fields_set contains the field
        if self.generic_k8_s is None and "generic_k8_s" in self.model_fields_set:
            _dict['genericK8S'] = None

        # set to None if failed (nullable) is None
        # and model_fields_set contains the field
        if self.failed is None and "failed" in self.model_fields_set:
            _dict['failed'] = None

        # set to None if succeeded (nullable) is None
        # and model_fields_set contains the field
        if self.succeeded is None and "succeeded" in self.model_fields_set:
            _dict['succeeded'] = None

        # set to None if waiting (nullable) is None
        # and model_fields_set contains the field
        if self.waiting is None and "waiting" in self.model_fields_set:
            _dict['waiting'] = None

        # set to None if updating (nullable) is None
        # and model_fields_set contains the field
        if self.updating is None and "updating" in self.model_fields_set:
            _dict['updating'] = None

        # set to None if deleting (nullable) is None
        # and model_fields_set contains the field
        if self.deleting is None and "deleting" in self.model_fields_set:
            _dict['deleting'] = None

        # set to None if purging (nullable) is None
        # and model_fields_set contains the field
        if self.purging is None and "purging" in self.model_fields_set:
            _dict['purging'] = None

        # set to None if used_resources (nullable) is None
        # and model_fields_set contains the field
        if self.used_resources is None and "used_resources" in self.model_fields_set:
            _dict['usedResources'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerChartDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aws": [ServerCommonRecordDto.from_dict(_item) for _item in obj["aws"]] if obj.get("aws") is not None else None,
            "azure": [ServerCommonRecordDto.from_dict(_item) for _item in obj["azure"]] if obj.get("azure") is not None else None,
            "openstack": [ServerCommonRecordDto.from_dict(_item) for _item in obj["openstack"]] if obj.get("openstack") is not None else None,
            "google": [ServerCommonRecordDto.from_dict(_item) for _item in obj["google"]] if obj.get("google") is not None else None,
            "tanzu": [ServerCommonRecordDto.from_dict(_item) for _item in obj["tanzu"]] if obj.get("tanzu") is not None else None,
            "proxmox": [ServerCommonRecordDto.from_dict(_item) for _item in obj["proxmox"]] if obj.get("proxmox") is not None else None,
            "vsphere": [ServerCommonRecordDto.from_dict(_item) for _item in obj["vsphere"]] if obj.get("vsphere") is not None else None,
            "zadara": [ServerCommonRecordDto.from_dict(_item) for _item in obj["zadara"]] if obj.get("zadara") is not None else None,
            "openshift": [ServerCommonRecordDto.from_dict(_item) for _item in obj["openshift"]] if obj.get("openshift") is not None else None,
            "zededa": [ServerCommonRecordDto.from_dict(_item) for _item in obj["zededa"]] if obj.get("zededa") is not None else None,
            "genericK8S": [ServerCommonRecordDto.from_dict(_item) for _item in obj["genericK8S"]] if obj.get("genericK8S") is not None else None,
            "failed": [ServerCommonRecordDto.from_dict(_item) for _item in obj["failed"]] if obj.get("failed") is not None else None,
            "succeeded": [ServerCommonRecordDto.from_dict(_item) for _item in obj["succeeded"]] if obj.get("succeeded") is not None else None,
            "waiting": [ServerCommonRecordDto.from_dict(_item) for _item in obj["waiting"]] if obj.get("waiting") is not None else None,
            "updating": [ServerCommonRecordDto.from_dict(_item) for _item in obj["updating"]] if obj.get("updating") is not None else None,
            "deleting": [ServerCommonRecordDto.from_dict(_item) for _item in obj["deleting"]] if obj.get("deleting") is not None else None,
            "purging": [ServerCommonRecordDto.from_dict(_item) for _item in obj["purging"]] if obj.get("purging") is not None else None,
            "totalCount": obj.get("totalCount"),
            "totalCpu": obj.get("totalCpu"),
            "totalRam": obj.get("totalRam"),
            "totalDiskSize": obj.get("totalDiskSize"),
            "totalFailedCount": obj.get("totalFailedCount"),
            "totalSucceededCount": obj.get("totalSucceededCount"),
            "totalUpdatingCount": obj.get("totalUpdatingCount"),
            "totalPendingCount": obj.get("totalPendingCount"),
            "totalAwsCount": obj.get("totalAwsCount"),
            "totalAzureCount": obj.get("totalAzureCount"),
            "totalOpenstackCount": obj.get("totalOpenstackCount"),
            "totalGoogleCount": obj.get("totalGoogleCount"),
            "totalTanzuCount": obj.get("totalTanzuCount"),
            "totalOpenshiftCount": obj.get("totalOpenshiftCount"),
            "totalProxmoxCount": obj.get("totalProxmoxCount"),
            "totalVsphereCount": obj.get("totalVsphereCount"),
            "totalZadaraCount": obj.get("totalZadaraCount"),
            "totalZededaCount": obj.get("totalZededaCount"),
            "totalGenericK8SCount": obj.get("totalGenericK8SCount"),
            "usedResources": [UserResourceChartDto.from_dict(_item) for _item in obj["usedResources"]] if obj.get("usedResources") is not None else None
        })
        return _obj


