# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateVirtualClusterCommand(BaseModel):
    """
    CreateVirtualClusterCommand
    """ # noqa: E501
    cloud_id: Optional[StrictInt] = Field(default=None, alias="cloudId")
    project_id: Optional[StrictInt] = Field(default=None, alias="projectId")
    name: Optional[StrictStr] = None
    expired_at: Optional[datetime] = Field(default=None, alias="expiredAt")
    delete_on_expiration: Optional[StrictBool] = Field(default=None, alias="deleteOnExpiration")
    alerting_profile_id: Optional[StrictInt] = Field(default=None, alias="alertingProfileId")
    expose_hostname: Optional[StrictStr] = Field(default=None, alias="exposeHostname")
    __properties: ClassVar[List[str]] = ["cloudId", "projectId", "name", "expiredAt", "deleteOnExpiration", "alertingProfileId", "exposeHostname"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateVirtualClusterCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if cloud_id (nullable) is None
        # and model_fields_set contains the field
        if self.cloud_id is None and "cloud_id" in self.model_fields_set:
            _dict['cloudId'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if expired_at (nullable) is None
        # and model_fields_set contains the field
        if self.expired_at is None and "expired_at" in self.model_fields_set:
            _dict['expiredAt'] = None

        # set to None if alerting_profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.alerting_profile_id is None and "alerting_profile_id" in self.model_fields_set:
            _dict['alertingProfileId'] = None

        # set to None if expose_hostname (nullable) is None
        # and model_fields_set contains the field
        if self.expose_hostname is None and "expose_hostname" in self.model_fields_set:
            _dict['exposeHostname'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateVirtualClusterCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudId": obj.get("cloudId"),
            "projectId": obj.get("projectId"),
            "name": obj.get("name"),
            "expiredAt": obj.get("expiredAt"),
            "deleteOnExpiration": obj.get("deleteOnExpiration"),
            "alertingProfileId": obj.get("alertingProfileId"),
            "exposeHostname": obj.get("exposeHostname")
        })
        return _obj


