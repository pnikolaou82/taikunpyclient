# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class OrganizationCreateCommand(BaseModel):
    """
    OrganizationCreateCommand
    """ # noqa: E501
    name: Optional[StrictStr] = None
    full_name: Optional[StrictStr] = Field(default=None, alias="fullName")
    phone: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    billing_email: Optional[StrictStr] = Field(default=None, alias="billingEmail")
    address: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    vat_number: Optional[StrictStr] = Field(default=None, alias="vatNumber")
    discount_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="discountRate")
    is_eligible_update_subscription: Optional[StrictBool] = Field(default=None, alias="isEligibleUpdateSubscription")
    admin_cloud_credential_id: Optional[StrictInt] = Field(default=None, alias="adminCloudCredentialId")
    __properties: ClassVar[List[str]] = ["name", "fullName", "phone", "email", "billingEmail", "address", "country", "city", "vatNumber", "discountRate", "isEligibleUpdateSubscription", "adminCloudCredentialId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationCreateCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['fullName'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if billing_email (nullable) is None
        # and model_fields_set contains the field
        if self.billing_email is None and "billing_email" in self.model_fields_set:
            _dict['billingEmail'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if vat_number (nullable) is None
        # and model_fields_set contains the field
        if self.vat_number is None and "vat_number" in self.model_fields_set:
            _dict['vatNumber'] = None

        # set to None if discount_rate (nullable) is None
        # and model_fields_set contains the field
        if self.discount_rate is None and "discount_rate" in self.model_fields_set:
            _dict['discountRate'] = None

        # set to None if admin_cloud_credential_id (nullable) is None
        # and model_fields_set contains the field
        if self.admin_cloud_credential_id is None and "admin_cloud_credential_id" in self.model_fields_set:
            _dict['adminCloudCredentialId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationCreateCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "fullName": obj.get("fullName"),
            "phone": obj.get("phone"),
            "email": obj.get("email"),
            "billingEmail": obj.get("billingEmail"),
            "address": obj.get("address"),
            "country": obj.get("country"),
            "city": obj.get("city"),
            "vatNumber": obj.get("vatNumber"),
            "discountRate": obj.get("discountRate"),
            "isEligibleUpdateSubscription": obj.get("isEligibleUpdateSubscription"),
            "adminCloudCredentialId": obj.get("adminCloudCredentialId")
        })
        return _obj


