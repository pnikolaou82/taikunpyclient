# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from taikunpycore.models.server_list_dto import ServerListDto

class TestServerListDto(unittest.TestCase):
    """ServerListDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServerListDto:
        """Test ServerListDto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServerListDto`
        """
        model = ServerListDto()
        if include_optional:
            return ServerListDto(
                id = 56,
                name = '',
                project_name = '',
                organization_name = '',
                organization_id = 56,
                project_id = 56,
                ip_address = '',
                disk_size = 1.337,
                kubernetes_health = '',
                cpu = 56,
                ram = 1.337,
                role = 'Bastion',
                status = '',
                created_at = '',
                cloud_type = 'NONE',
                created_by = '',
                last_modified = '',
                last_modified_by = '',
                spot_price = 1.337,
                spot_instance = True,
                shut_off = True,
                autoscaling_group = '',
                provider_id = '',
                instance_id = '',
                aws_host_name = '',
                availability_zone = '',
                hypervisor = '',
                hypervisor_id = '',
                proxmox_role = 'NONE',
                proxmox_extra_disk_size = 56,
                action_buttons = taikunpycore.models.server_action_button_visibility_dto.ServerActionButtonVisibilityDto(
                    status = True, 
                    reboot = True, 
                    console = True, ),
                kubernetes_node_labels = [
                    taikunpycore.models.kubernetes_node_labels_dto.KubernetesNodeLabelsDto(
                        key = '', 
                        value = '', )
                    ],
                replica_count = 56,
                wasm_enabled = True,
                flavor = ''
            )
        else:
            return ServerListDto(
                id = 56,
                name = '',
                project_name = '',
                organization_name = '',
                organization_id = 56,
                project_id = 56,
                ip_address = '',
                disk_size = 1.337,
                kubernetes_health = '',
                cpu = 56,
                ram = 1.337,
                role = 'Bastion',
                status = '',
                created_at = '',
                cloud_type = 'NONE',
                created_by = '',
                last_modified = '',
                last_modified_by = '',
                spot_price = 1.337,
                spot_instance = True,
                shut_off = True,
                autoscaling_group = '',
                provider_id = '',
                instance_id = '',
                aws_host_name = '',
                availability_zone = '',
                hypervisor = '',
                hypervisor_id = '',
                proxmox_role = 'NONE',
                proxmox_extra_disk_size = 56,
                kubernetes_node_labels = [
                    taikunpycore.models.kubernetes_node_labels_dto.KubernetesNodeLabelsDto(
                        key = '', 
                        value = '', )
                    ],
                replica_count = 56,
                wasm_enabled = True,
                flavor = '',
        )
        """

    def testServerListDto(self):
        """Test ServerListDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
