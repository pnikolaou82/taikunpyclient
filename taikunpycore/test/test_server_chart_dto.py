# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from taikunpycore.models.server_chart_dto import ServerChartDto

class TestServerChartDto(unittest.TestCase):
    """ServerChartDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServerChartDto:
        """Test ServerChartDto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServerChartDto`
        """
        model = ServerChartDto()
        if include_optional:
            return ServerChartDto(
                aws = [
                    taikunpycore.models.server_common_record_dto.ServerCommonRecordDto(
                        project_id = 56, 
                        project_name = '', 
                        names = [
                            ''
                            ], )
                    ],
                azure = [
                    taikunpycore.models.server_common_record_dto.ServerCommonRecordDto(
                        project_id = 56, 
                        project_name = '', 
                        names = [
                            ''
                            ], )
                    ],
                openstack = [
                    taikunpycore.models.server_common_record_dto.ServerCommonRecordDto(
                        project_id = 56, 
                        project_name = '', 
                        names = [
                            ''
                            ], )
                    ],
                google = [
                    taikunpycore.models.server_common_record_dto.ServerCommonRecordDto(
                        project_id = 56, 
                        project_name = '', 
                        names = [
                            ''
                            ], )
                    ],
                tanzu = [
                    taikunpycore.models.server_common_record_dto.ServerCommonRecordDto(
                        project_id = 56, 
                        project_name = '', 
                        names = [
                            ''
                            ], )
                    ],
                proxmox = [
                    taikunpycore.models.server_common_record_dto.ServerCommonRecordDto(
                        project_id = 56, 
                        project_name = '', 
                        names = [
                            ''
                            ], )
                    ],
                vsphere = [
                    taikunpycore.models.server_common_record_dto.ServerCommonRecordDto(
                        project_id = 56, 
                        project_name = '', 
                        names = [
                            ''
                            ], )
                    ],
                zadara = [
                    taikunpycore.models.server_common_record_dto.ServerCommonRecordDto(
                        project_id = 56, 
                        project_name = '', 
                        names = [
                            ''
                            ], )
                    ],
                openshift = [
                    taikunpycore.models.server_common_record_dto.ServerCommonRecordDto(
                        project_id = 56, 
                        project_name = '', 
                        names = [
                            ''
                            ], )
                    ],
                zededa = [
                    taikunpycore.models.server_common_record_dto.ServerCommonRecordDto(
                        project_id = 56, 
                        project_name = '', 
                        names = [
                            ''
                            ], )
                    ],
                generic_k8_s = [
                    taikunpycore.models.server_common_record_dto.ServerCommonRecordDto(
                        project_id = 56, 
                        project_name = '', 
                        names = [
                            ''
                            ], )
                    ],
                failed = [
                    taikunpycore.models.server_common_record_dto.ServerCommonRecordDto(
                        project_id = 56, 
                        project_name = '', 
                        names = [
                            ''
                            ], )
                    ],
                succeeded = [
                    taikunpycore.models.server_common_record_dto.ServerCommonRecordDto(
                        project_id = 56, 
                        project_name = '', 
                        names = [
                            ''
                            ], )
                    ],
                waiting = [
                    taikunpycore.models.server_common_record_dto.ServerCommonRecordDto(
                        project_id = 56, 
                        project_name = '', 
                        names = [
                            ''
                            ], )
                    ],
                updating = [
                    taikunpycore.models.server_common_record_dto.ServerCommonRecordDto(
                        project_id = 56, 
                        project_name = '', 
                        names = [
                            ''
                            ], )
                    ],
                deleting = [
                    taikunpycore.models.server_common_record_dto.ServerCommonRecordDto(
                        project_id = 56, 
                        project_name = '', 
                        names = [
                            ''
                            ], )
                    ],
                purging = [
                    taikunpycore.models.server_common_record_dto.ServerCommonRecordDto(
                        project_id = 56, 
                        project_name = '', 
                        names = [
                            ''
                            ], )
                    ],
                total_count = 56,
                total_cpu = 56,
                total_ram = 56,
                total_disk_size = 56,
                total_failed_count = 56,
                total_succeeded_count = 56,
                total_updating_count = 56,
                total_pending_count = 56,
                total_aws_count = 56,
                total_azure_count = 56,
                total_openstack_count = 56,
                total_google_count = 56,
                total_tanzu_count = 56,
                total_openshift_count = 56,
                total_proxmox_count = 56,
                total_vsphere_count = 56,
                total_zadara_count = 56,
                total_zededa_count = 56,
                total_generic_k8_s_count = 56,
                used_resources = [
                    taikunpycore.models.user_resource_chart_dto.UserResourceChartDto(
                        project_name = '', 
                        project_id = 56, 
                        disk_size = 56, 
                        ram = 56, 
                        cpu = 56, 
                        max_ram = 56, 
                        max_cpu = 56, 
                        max_disk_size = 56, )
                    ]
            )
        else:
            return ServerChartDto(
        )
        """

    def testServerChartDto(self):
        """Test ServerChartDto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
