# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from taikunpycore.models.private_subscription_list import PrivateSubscriptionList

class TestPrivateSubscriptionList(unittest.TestCase):
    """PrivateSubscriptionList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PrivateSubscriptionList:
        """Test PrivateSubscriptionList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PrivateSubscriptionList`
        """
        model = PrivateSubscriptionList()
        if include_optional:
            return PrivateSubscriptionList(
                data = [
                    taikunpycore.models.list_for_partners_dto.ListForPartnersDto(
                        id = 56, 
                        name = '', 
                        project_limit = 56, 
                        server_limit = 56, 
                        user_limit = 56, 
                        cloud_credential_limit = 56, 
                        monthly_price = 1.337, 
                        yearly_price = 1.337, 
                        tcu_price = 1.337, 
                        is_deprecated = True, 
                        currency = '', 
                        is_enterprise = True, 
                        partner = taikunpycore.models.partner_details_for_subscription.PartnerDetailsForSubscription(
                            name = '', 
                            logo = '', 
                            link = '', 
                            id = 56, ), 
                        exceeded_user = True, 
                        exceeded_project = True, 
                        exceeded_cloud_credential = True, 
                        exceeded_servers = True, 
                        is_active = True, 
                        is_yearly = True, 
                        trial_days = 56, 
                        description = '', 
                        is_demo = True, )
                    ],
                total_count = 56,
                is_eligible_to_switch = True,
                active_subscription_status = ''
            )
        else:
            return PrivateSubscriptionList(
                data = [
                    taikunpycore.models.list_for_partners_dto.ListForPartnersDto(
                        id = 56, 
                        name = '', 
                        project_limit = 56, 
                        server_limit = 56, 
                        user_limit = 56, 
                        cloud_credential_limit = 56, 
                        monthly_price = 1.337, 
                        yearly_price = 1.337, 
                        tcu_price = 1.337, 
                        is_deprecated = True, 
                        currency = '', 
                        is_enterprise = True, 
                        partner = taikunpycore.models.partner_details_for_subscription.PartnerDetailsForSubscription(
                            name = '', 
                            logo = '', 
                            link = '', 
                            id = 56, ), 
                        exceeded_user = True, 
                        exceeded_project = True, 
                        exceeded_cloud_credential = True, 
                        exceeded_servers = True, 
                        is_active = True, 
                        is_yearly = True, 
                        trial_days = 56, 
                        description = '', 
                        is_demo = True, )
                    ],
                total_count = 56,
                is_eligible_to_switch = True,
                active_subscription_status = '',
        )
        """

    def testPrivateSubscriptionList(self):
        """Test PrivateSubscriptionList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
