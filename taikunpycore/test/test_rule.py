# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from taikunpycore.models.rule import Rule

class TestRule(unittest.TestCase):
    """Rule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Rule:
        """Test Rule
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Rule`
        """
        model = Rule()
        if include_optional:
            return Rule(
                state = '',
                name = '',
                query = '',
                duration = 56,
                labels = taikunpycore.models.rule_labels.RuleLabels(
                    severity = '', ),
                annotations = taikunpycore.models.annotations.Annotations(
                    description = '', 
                    title = '', ),
                alerts = [
                    taikunpycore.models.alert.Alert(
                        labels = taikunpycore.models.alert_labels.AlertLabels(
                            alertname = '', 
                            condition = '', 
                            container = '', 
                            endpoint = '', 
                            instance = '', 
                            job = '', 
                            namespace = '', 
                            node = '', 
                            pod = '', 
                            service = '', 
                            severity = '', 
                            status = '', 
                            daemonset = '', ), 
                        annotations = taikunpycore.models.annotations.Annotations(
                            description = '', 
                            title = '', ), 
                        state = '', 
                        active_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        value = '', )
                    ],
                health = '',
                evaluation_time = 1.337,
                last_evaluation = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                type = ''
            )
        else:
            return Rule(
        )
        """

    def testRule(self):
        """Test Rule"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
