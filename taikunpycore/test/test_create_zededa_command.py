# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from taikunpycore.models.create_zededa_command import CreateZededaCommand

class TestCreateZededaCommand(unittest.TestCase):
    """CreateZededaCommand unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateZededaCommand:
        """Test CreateZededaCommand
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateZededaCommand`
        """
        model = CreateZededaCommand()
        if include_optional:
            return CreateZededaCommand(
                name = '',
                api_token = '',
                api_url = '',
                project = '',
                continent = '',
                organization_id = 56,
                edge_nodes = [
                    ''
                    ],
                public_network = taikunpycore.models.create_zededa_network_dto.CreateZededaNetworkDto(
                    interface = '', 
                    gateway = '', 
                    ip_address = '', 
                    net_mask = 56, 
                    vlan_id = 56, 
                    begin_allocation_range = '', 
                    end_allocation_range = '', ),
                private_network = taikunpycore.models.create_zededa_network_dto.CreateZededaNetworkDto(
                    interface = '', 
                    gateway = '', 
                    ip_address = '', 
                    net_mask = 56, 
                    vlan_id = 56, 
                    begin_allocation_range = '', 
                    end_allocation_range = '', )
            )
        else:
            return CreateZededaCommand(
        )
        """

    def testCreateZededaCommand(self):
        """Test CreateZededaCommand"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
