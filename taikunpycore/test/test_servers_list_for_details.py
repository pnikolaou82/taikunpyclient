# coding: utf-8

"""
    Taikun - WebApi

    This Api will be responsible for overall data distribution and authorization.

    The version of the OpenAPI document: v1
    Contact: noreply@taikun.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from taikunpycore.models.servers_list_for_details import ServersListForDetails

class TestServersListForDetails(unittest.TestCase):
    """ServersListForDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServersListForDetails:
        """Test ServersListForDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServersListForDetails`
        """
        model = ServersListForDetails()
        if include_optional:
            return ServersListForDetails(
                data = [
                    taikunpycore.models.server_list_dto.ServerListDto(
                        id = 56, 
                        name = '', 
                        project_name = '', 
                        organization_name = '', 
                        organization_id = 56, 
                        project_id = 56, 
                        ip_address = '', 
                        disk_size = 1.337, 
                        kubernetes_health = '', 
                        cpu = 56, 
                        ram = 1.337, 
                        role = 'Bastion', 
                        status = '', 
                        created_at = '', 
                        cloud_type = 'NONE', 
                        created_by = '', 
                        last_modified = '', 
                        last_modified_by = '', 
                        spot_price = 1.337, 
                        spot_instance = True, 
                        shut_off = True, 
                        autoscaling_group = '', 
                        provider_id = '', 
                        instance_id = '', 
                        aws_host_name = '', 
                        availability_zone = '', 
                        hypervisor = '', 
                        hypervisor_id = '', 
                        proxmox_role = 'NONE', 
                        proxmox_extra_disk_size = 56, 
                        action_buttons = taikunpycore.models.server_action_button_visibility_dto.ServerActionButtonVisibilityDto(
                            status = True, 
                            reboot = True, 
                            console = True, ), 
                        kubernetes_node_labels = [
                            taikunpycore.models.kubernetes_node_labels_dto.KubernetesNodeLabelsDto(
                                key = '', 
                                value = '', )
                            ], 
                        replica_count = 56, 
                        wasm_enabled = True, 
                        flavor = '', )
                    ],
                project = taikunpycore.models.project_details_for_servers_dto.ProjectDetailsForServersDto(
                    alerts_count = 56, 
                    worker = 56, 
                    bastion = 56, 
                    status = 'Null', 
                    name = '', 
                    access_ip = '', 
                    id = 56, 
                    master_ready = 56, 
                    cloud_type = 'NONE', 
                    cloud_name = '', 
                    cloud_id = 56, 
                    quota_id = 56, 
                    organization_name = '', 
                    organization_id = 56, 
                    kubernetes_version = '', 
                    is_backup_enabled = True, 
                    ai_enabled = True, 
                    is_locked = True, 
                    is_auto_upgrade = True, 
                    is_monitoring_enabled = True, 
                    is_opa_enabled = True, 
                    has_kube_config_file = True, 
                    has_selected_flavors = True, 
                    is_maintenance_mode_enabled = True, 
                    is_project_maintenance_mode_enabled = True, 
                    is_deprecated = True, 
                    cpu_limit = 56, 
                    ram_limit = 56, 
                    disk_size_limit = 56, 
                    used_cpu = 56, 
                    used_ram = 56, 
                    used_disk_size = 56, 
                    vm_cpu_limit = 56, 
                    vm_ram_limit = 56, 
                    vm_volume_size_limit = 56, 
                    vm_used_cpu = 56, 
                    vm_used_ram = 56, 
                    vm_used_volume_size = 56, 
                    access_profile_name = '', 
                    access_profile_id = 56, 
                    kubernetes_profile_name = '', 
                    kubernetes_profile_id = 56, 
                    alerting_profile_name = '', 
                    health = 'Null', 
                    alerting_profile_id = 56, 
                    s3_credential_id = 56, 
                    ai_credential_id = 56, 
                    expired_at = '', 
                    certification_expired_at = '', 
                    opa_profile_id = 56, 
                    opa_profile_name = '', 
                    allow_full_spot_kubernetes = True, 
                    allow_spot_workers = True, 
                    allow_spot_vms = True, 
                    total_hourly_cost = 1.337, 
                    autoscaling_group_name = '', 
                    min_size = 56, 
                    max_size = 56, 
                    disk_size = 1.337, 
                    flavor = '', 
                    spot_enabled = True, 
                    is_autoscaling_enabled = True, 
                    is_autoscaling_spot_enabled = True, 
                    has_nfs_server = True, 
                    wasm_enabled = True, 
                    availability_zones = [
                        ''
                        ], 
                    hypervisors = [
                        ''
                        ], 
                    proxmox_storage = 'NFS', 
                    is_drs_enabled = True, 
                    max_spot_price = 1.337, )
            )
        else:
            return ServersListForDetails(
                data = [
                    taikunpycore.models.server_list_dto.ServerListDto(
                        id = 56, 
                        name = '', 
                        project_name = '', 
                        organization_name = '', 
                        organization_id = 56, 
                        project_id = 56, 
                        ip_address = '', 
                        disk_size = 1.337, 
                        kubernetes_health = '', 
                        cpu = 56, 
                        ram = 1.337, 
                        role = 'Bastion', 
                        status = '', 
                        created_at = '', 
                        cloud_type = 'NONE', 
                        created_by = '', 
                        last_modified = '', 
                        last_modified_by = '', 
                        spot_price = 1.337, 
                        spot_instance = True, 
                        shut_off = True, 
                        autoscaling_group = '', 
                        provider_id = '', 
                        instance_id = '', 
                        aws_host_name = '', 
                        availability_zone = '', 
                        hypervisor = '', 
                        hypervisor_id = '', 
                        proxmox_role = 'NONE', 
                        proxmox_extra_disk_size = 56, 
                        action_buttons = taikunpycore.models.server_action_button_visibility_dto.ServerActionButtonVisibilityDto(
                            status = True, 
                            reboot = True, 
                            console = True, ), 
                        kubernetes_node_labels = [
                            taikunpycore.models.kubernetes_node_labels_dto.KubernetesNodeLabelsDto(
                                key = '', 
                                value = '', )
                            ], 
                        replica_count = 56, 
                        wasm_enabled = True, 
                        flavor = '', )
                    ],
                project = taikunpycore.models.project_details_for_servers_dto.ProjectDetailsForServersDto(
                    alerts_count = 56, 
                    worker = 56, 
                    bastion = 56, 
                    status = 'Null', 
                    name = '', 
                    access_ip = '', 
                    id = 56, 
                    master_ready = 56, 
                    cloud_type = 'NONE', 
                    cloud_name = '', 
                    cloud_id = 56, 
                    quota_id = 56, 
                    organization_name = '', 
                    organization_id = 56, 
                    kubernetes_version = '', 
                    is_backup_enabled = True, 
                    ai_enabled = True, 
                    is_locked = True, 
                    is_auto_upgrade = True, 
                    is_monitoring_enabled = True, 
                    is_opa_enabled = True, 
                    has_kube_config_file = True, 
                    has_selected_flavors = True, 
                    is_maintenance_mode_enabled = True, 
                    is_project_maintenance_mode_enabled = True, 
                    is_deprecated = True, 
                    cpu_limit = 56, 
                    ram_limit = 56, 
                    disk_size_limit = 56, 
                    used_cpu = 56, 
                    used_ram = 56, 
                    used_disk_size = 56, 
                    vm_cpu_limit = 56, 
                    vm_ram_limit = 56, 
                    vm_volume_size_limit = 56, 
                    vm_used_cpu = 56, 
                    vm_used_ram = 56, 
                    vm_used_volume_size = 56, 
                    access_profile_name = '', 
                    access_profile_id = 56, 
                    kubernetes_profile_name = '', 
                    kubernetes_profile_id = 56, 
                    alerting_profile_name = '', 
                    health = 'Null', 
                    alerting_profile_id = 56, 
                    s3_credential_id = 56, 
                    ai_credential_id = 56, 
                    expired_at = '', 
                    certification_expired_at = '', 
                    opa_profile_id = 56, 
                    opa_profile_name = '', 
                    allow_full_spot_kubernetes = True, 
                    allow_spot_workers = True, 
                    allow_spot_vms = True, 
                    total_hourly_cost = 1.337, 
                    autoscaling_group_name = '', 
                    min_size = 56, 
                    max_size = 56, 
                    disk_size = 1.337, 
                    flavor = '', 
                    spot_enabled = True, 
                    is_autoscaling_enabled = True, 
                    is_autoscaling_spot_enabled = True, 
                    has_nfs_server = True, 
                    wasm_enabled = True, 
                    availability_zones = [
                        ''
                        ], 
                    hypervisors = [
                        ''
                        ], 
                    proxmox_storage = 'NFS', 
                    is_drs_enabled = True, 
                    max_spot_price = 1.337, ),
        )
        """

    def testServersListForDetails(self):
        """Test ServersListForDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
